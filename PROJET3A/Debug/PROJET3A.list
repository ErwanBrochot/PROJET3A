
PROJET3A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a728  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  0800a908  0800a908  0001a908  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adf4  0800adf4  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800adf4  0800adf4  0001adf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800adfc  0800adfc  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800adfc  0800adfc  0001adfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae00  0800ae00  0001ae00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800ae04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  200001ec  0800aff0  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  0800aff0  000204c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c37b  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032bd  00000000  00000000  0003c597  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001940  00000000  00000000  0003f858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001808  00000000  00000000  00041198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021e96  00000000  00000000  000429a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ba73  00000000  00000000  00064836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0235  00000000  00000000  000802a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001604de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007eec  00000000  00000000  00160530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001ec 	.word	0x200001ec
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a8f0 	.word	0x0800a8f0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f0 	.word	0x200001f0
 800021c:	0800a8f0 	.word	0x0800a8f0

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000f06:	4a38      	ldr	r2, [pc, #224]	; (8000fe8 <HD44780_Init+0xec>)
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000f0c:	4b37      	ldr	r3, [pc, #220]	; (8000fec <HD44780_Init+0xf0>)
 8000f0e:	2208      	movs	r2, #8
 8000f10:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000f12:	4b37      	ldr	r3, [pc, #220]	; (8000ff0 <HD44780_Init+0xf4>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000f18:	4b33      	ldr	r3, [pc, #204]	; (8000fe8 <HD44780_Init+0xec>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d907      	bls.n	8000f30 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000f20:	4b33      	ldr	r3, [pc, #204]	; (8000ff0 <HD44780_Init+0xf4>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	f043 0308 	orr.w	r3, r3, #8
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	4b31      	ldr	r3, [pc, #196]	; (8000ff0 <HD44780_Init+0xf4>)
 8000f2c:	701a      	strb	r2, [r3, #0]
 8000f2e:	e006      	b.n	8000f3e <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000f30:	4b2f      	ldr	r3, [pc, #188]	; (8000ff0 <HD44780_Init+0xf4>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	f043 0304 	orr.w	r3, r3, #4
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	4b2d      	ldr	r3, [pc, #180]	; (8000ff0 <HD44780_Init+0xf4>)
 8000f3c:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000f3e:	f000 f985 	bl	800124c <DelayInit>
  HAL_Delay(50);
 8000f42:	2032      	movs	r0, #50	; 0x32
 8000f44:	f001 fa54 	bl	80023f0 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000f48:	4b28      	ldr	r3, [pc, #160]	; (8000fec <HD44780_Init+0xf0>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f000 f943 	bl	80011d8 <ExpanderWrite>
  HAL_Delay(1000);
 8000f52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f56:	f001 fa4b 	bl	80023f0 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000f5a:	2030      	movs	r0, #48	; 0x30
 8000f5c:	f000 f92b 	bl	80011b6 <Write4Bits>
  DelayUS(4500);
 8000f60:	f241 1094 	movw	r0, #4500	; 0x1194
 8000f64:	f000 f99c 	bl	80012a0 <DelayUS>

  Write4Bits(0x03 << 4);
 8000f68:	2030      	movs	r0, #48	; 0x30
 8000f6a:	f000 f924 	bl	80011b6 <Write4Bits>
  DelayUS(4500);
 8000f6e:	f241 1094 	movw	r0, #4500	; 0x1194
 8000f72:	f000 f995 	bl	80012a0 <DelayUS>

  Write4Bits(0x03 << 4);
 8000f76:	2030      	movs	r0, #48	; 0x30
 8000f78:	f000 f91d 	bl	80011b6 <Write4Bits>
  DelayUS(4500);
 8000f7c:	f241 1094 	movw	r0, #4500	; 0x1194
 8000f80:	f000 f98e 	bl	80012a0 <DelayUS>

  Write4Bits(0x02 << 4);
 8000f84:	2020      	movs	r0, #32
 8000f86:	f000 f916 	bl	80011b6 <Write4Bits>
  DelayUS(100);
 8000f8a:	2064      	movs	r0, #100	; 0x64
 8000f8c:	f000 f988 	bl	80012a0 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000f90:	4b17      	ldr	r3, [pc, #92]	; (8000ff0 <HD44780_Init+0xf4>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	f043 0320 	orr.w	r3, r3, #32
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 f8ce 	bl	800113c <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000fa0:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <HD44780_Init+0xf8>)
 8000fa2:	2204      	movs	r2, #4
 8000fa4:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000fa6:	f000 f875 	bl	8001094 <HD44780_Display>
  HD44780_Clear();
 8000faa:	f000 f82b 	bl	8001004 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000fae:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <HD44780_Init+0xfc>)
 8000fb0:	2202      	movs	r2, #2
 8000fb2:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000fb4:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <HD44780_Init+0xfc>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	f043 0304 	orr.w	r3, r3, #4
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 f8bc 	bl	800113c <SendCommand>
  DelayUS(4500);
 8000fc4:	f241 1094 	movw	r0, #4500	; 0x1194
 8000fc8:	f000 f96a 	bl	80012a0 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000fcc:	490b      	ldr	r1, [pc, #44]	; (8000ffc <HD44780_Init+0x100>)
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f000 f876 	bl	80010c0 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000fd4:	490a      	ldr	r1, [pc, #40]	; (8001000 <HD44780_Init+0x104>)
 8000fd6:	2001      	movs	r0, #1
 8000fd8:	f000 f872 	bl	80010c0 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000fdc:	f000 f81d 	bl	800101a <HD44780_Home>
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	2000020b 	.word	0x2000020b
 8000fec:	2000020c 	.word	0x2000020c
 8000ff0:	20000208 	.word	0x20000208
 8000ff4:	20000209 	.word	0x20000209
 8000ff8:	2000020a 	.word	0x2000020a
 8000ffc:	20000000 	.word	0x20000000
 8001000:	20000008 	.word	0x20000008

08001004 <HD44780_Clear>:

void HD44780_Clear()
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8001008:	2001      	movs	r0, #1
 800100a:	f000 f897 	bl	800113c <SendCommand>
  DelayUS(2000);
 800100e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001012:	f000 f945 	bl	80012a0 <DelayUS>
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}

0800101a <HD44780_Home>:

void HD44780_Home()
{
 800101a:	b580      	push	{r7, lr}
 800101c:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800101e:	2002      	movs	r0, #2
 8001020:	f000 f88c 	bl	800113c <SendCommand>
  DelayUS(2000);
 8001024:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001028:	f000 f93a 	bl	80012a0 <DelayUS>
}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}

08001030 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8001030:	b590      	push	{r4, r7, lr}
 8001032:	b087      	sub	sp, #28
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	460a      	mov	r2, r1
 800103a:	71fb      	strb	r3, [r7, #7]
 800103c:	4613      	mov	r3, r2
 800103e:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <HD44780_SetCursor+0x5c>)
 8001042:	f107 0408 	add.w	r4, r7, #8
 8001046:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001048:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 800104c:	4b10      	ldr	r3, [pc, #64]	; (8001090 <HD44780_SetCursor+0x60>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	79ba      	ldrb	r2, [r7, #6]
 8001052:	429a      	cmp	r2, r3
 8001054:	d303      	bcc.n	800105e <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <HD44780_SetCursor+0x60>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	3b01      	subs	r3, #1
 800105c:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800105e:	79bb      	ldrb	r3, [r7, #6]
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	3318      	adds	r3, #24
 8001064:	443b      	add	r3, r7
 8001066:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800106a:	b2da      	uxtb	r2, r3
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	4413      	add	r3, r2
 8001070:	b2db      	uxtb	r3, r3
 8001072:	b25b      	sxtb	r3, r3
 8001074:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001078:	b25b      	sxtb	r3, r3
 800107a:	b2db      	uxtb	r3, r3
 800107c:	4618      	mov	r0, r3
 800107e:	f000 f85d 	bl	800113c <SendCommand>
}
 8001082:	bf00      	nop
 8001084:	371c      	adds	r7, #28
 8001086:	46bd      	mov	sp, r7
 8001088:	bd90      	pop	{r4, r7, pc}
 800108a:	bf00      	nop
 800108c:	0800a908 	.word	0x0800a908
 8001090:	2000020b 	.word	0x2000020b

08001094 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <HD44780_Display+0x28>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	f043 0304 	orr.w	r3, r3, #4
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HD44780_Display+0x28>)
 80010a4:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80010a6:	4b05      	ldr	r3, [pc, #20]	; (80010bc <HD44780_Display+0x28>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	f043 0308 	orr.w	r3, r3, #8
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	4618      	mov	r0, r3
 80010b2:	f000 f843 	bl	800113c <SendCommand>
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000209 	.word	0x20000209

080010c0 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	6039      	str	r1, [r7, #0]
 80010ca:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	00db      	lsls	r3, r3, #3
 80010d8:	b25b      	sxtb	r3, r3
 80010da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010de:	b25b      	sxtb	r3, r3
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 f82a 	bl	800113c <SendCommand>
  for (int i=0; i<8; i++)
 80010e8:	2300      	movs	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	e009      	b.n	8001102 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	4413      	add	r3, r2
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 f82e 	bl	8001158 <SendChar>
  for (int i=0; i<8; i++)
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	3301      	adds	r3, #1
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2b07      	cmp	r3, #7
 8001106:	ddf2      	ble.n	80010ee <HD44780_CreateSpecialChar+0x2e>
  }
}
 8001108:	bf00      	nop
 800110a:	bf00      	nop
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800111a:	e006      	b.n	800112a <HD44780_PrintStr+0x18>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	1c5a      	adds	r2, r3, #1
 8001120:	607a      	str	r2, [r7, #4]
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	4618      	mov	r0, r3
 8001126:	f000 f817 	bl	8001158 <SendChar>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1f4      	bne.n	800111c <HD44780_PrintStr+0xa>
}
 8001132:	bf00      	nop
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f000 f812 	bl	8001174 <Send>
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <SendChar>:

static void SendChar(uint8_t ch)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	2101      	movs	r1, #1
 8001166:	4618      	mov	r0, r3
 8001168:	f000 f804 	bl	8001174 <Send>
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	460a      	mov	r2, r1
 800117e:	71fb      	strb	r3, [r7, #7]
 8001180:	4613      	mov	r3, r2
 8001182:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	f023 030f 	bic.w	r3, r3, #15
 800118a:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	011b      	lsls	r3, r3, #4
 8001190:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8001192:	7bfa      	ldrb	r2, [r7, #15]
 8001194:	79bb      	ldrb	r3, [r7, #6]
 8001196:	4313      	orrs	r3, r2
 8001198:	b2db      	uxtb	r3, r3
 800119a:	4618      	mov	r0, r3
 800119c:	f000 f80b 	bl	80011b6 <Write4Bits>
  Write4Bits((lownib)|mode);
 80011a0:	7bba      	ldrb	r2, [r7, #14]
 80011a2:	79bb      	ldrb	r3, [r7, #6]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	4618      	mov	r0, r3
 80011aa:	f000 f804 	bl	80011b6 <Write4Bits>
}
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	4603      	mov	r3, r0
 80011be:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 f808 	bl	80011d8 <ExpanderWrite>
  PulseEnable(value);
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 f820 	bl	8001210 <PulseEnable>
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af02      	add	r7, sp, #8
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <ExpanderWrite+0x30>)
 80011e4:	781a      	ldrb	r2, [r3, #0]
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80011ee:	f107 020f 	add.w	r2, r7, #15
 80011f2:	230a      	movs	r3, #10
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	2301      	movs	r3, #1
 80011f8:	214e      	movs	r1, #78	; 0x4e
 80011fa:	4804      	ldr	r0, [pc, #16]	; (800120c <ExpanderWrite+0x34>)
 80011fc:	f003 f902 	bl	8004404 <HAL_I2C_Master_Transmit>
}
 8001200:	bf00      	nop
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	2000020c 	.word	0x2000020c
 800120c:	200002dc 	.word	0x200002dc

08001210 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	f043 0304 	orr.w	r3, r3, #4
 8001220:	b2db      	uxtb	r3, r3
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ffd8 	bl	80011d8 <ExpanderWrite>
  DelayUS(20);
 8001228:	2014      	movs	r0, #20
 800122a:	f000 f839 	bl	80012a0 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	f023 0304 	bic.w	r3, r3, #4
 8001234:	b2db      	uxtb	r3, r3
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff ffce 	bl	80011d8 <ExpanderWrite>
  DelayUS(20);
 800123c:	2014      	movs	r0, #20
 800123e:	f000 f82f 	bl	80012a0 <DelayUS>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <DelayInit>:

static void DelayInit(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <DelayInit+0x4c>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	4a10      	ldr	r2, [pc, #64]	; (8001298 <DelayInit+0x4c>)
 8001256:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800125a:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 800125c:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <DelayInit+0x4c>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	4a0d      	ldr	r2, [pc, #52]	; (8001298 <DelayInit+0x4c>)
 8001262:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001266:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <DelayInit+0x50>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a0b      	ldr	r2, [pc, #44]	; (800129c <DelayInit+0x50>)
 800126e:	f023 0301 	bic.w	r3, r3, #1
 8001272:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001274:	4b09      	ldr	r3, [pc, #36]	; (800129c <DelayInit+0x50>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a08      	ldr	r2, [pc, #32]	; (800129c <DelayInit+0x50>)
 800127a:	f043 0301 	orr.w	r3, r3, #1
 800127e:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <DelayInit+0x50>)
 8001282:	2200      	movs	r2, #0
 8001284:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8001286:	bf00      	nop
  __ASM volatile ("NOP");
 8001288:	bf00      	nop
  __ASM volatile ("NOP");
 800128a:	bf00      	nop
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	e000edf0 	.word	0xe000edf0
 800129c:	e0001000 	.word	0xe0001000

080012a0 <DelayUS>:

static void DelayUS(uint32_t us) {
 80012a0:	b480      	push	{r7}
 80012a2:	b087      	sub	sp, #28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80012a8:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <DelayUS+0x44>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a0e      	ldr	r2, [pc, #56]	; (80012e8 <DelayUS+0x48>)
 80012ae:	fba2 2303 	umull	r2, r3, r2, r3
 80012b2:	0c9a      	lsrs	r2, r3, #18
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	fb02 f303 	mul.w	r3, r2, r3
 80012ba:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80012bc:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <DelayUS+0x4c>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80012c2:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <DelayUS+0x4c>)
 80012c4:	685a      	ldr	r2, [r3, #4]
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	697a      	ldr	r2, [r7, #20]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d8f6      	bhi.n	80012c2 <DelayUS+0x22>
}
 80012d4:	bf00      	nop
 80012d6:	bf00      	nop
 80012d8:	371c      	adds	r7, #28
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	20000010 	.word	0x20000010
 80012e8:	431bde83 	.word	0x431bde83
 80012ec:	e0001000 	.word	0xe0001000

080012f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012f4:	f001 f80b 	bl	800230e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012f8:	f000 f83c 	bl	8001374 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012fc:	f000 fb06 	bl	800190c <MX_GPIO_Init>
  MX_DMA_Init();
 8001300:	f000 fada 	bl	80018b8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001304:	f000 fa8c 	bl	8001820 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001308:	f000 f98c 	bl	8001624 <MX_TIM1_Init>
  MX_TIM2_Init();
 800130c:	f000 fa3a 	bl	8001784 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001310:	f000 f87c 	bl	800140c <MX_ADC1_Init>
  MX_I2C1_Init();
 8001314:	f000 f946 	bl	80015a4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  sprintf (uartTX_Buffer,"PROJET 3A - Chargeur MPPT");
 8001318:	490f      	ldr	r1, [pc, #60]	; (8001358 <main+0x68>)
 800131a:	4810      	ldr	r0, [pc, #64]	; (800135c <main+0x6c>)
 800131c:	f007 f86e 	bl	80083fc <siprintf>
  HAL_UART_Transmit(&huart2, uartTX_Buffer, strlen(uartTX_Buffer), HAL_MAX_DELAY);
 8001320:	480e      	ldr	r0, [pc, #56]	; (800135c <main+0x6c>)
 8001322:	f7fe ff7d 	bl	8000220 <strlen>
 8001326:	4603      	mov	r3, r0
 8001328:	b29a      	uxth	r2, r3
 800132a:	f04f 33ff 	mov.w	r3, #4294967295
 800132e:	490b      	ldr	r1, [pc, #44]	; (800135c <main+0x6c>)
 8001330:	480b      	ldr	r0, [pc, #44]	; (8001360 <main+0x70>)
 8001332:	f005 fdad 	bl	8006e90 <HAL_UART_Transmit>

  //Start TIM1&2
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001336:	2100      	movs	r1, #0
 8001338:	480a      	ldr	r0, [pc, #40]	; (8001364 <main+0x74>)
 800133a:	f004 fce1 	bl	8005d00 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim2);
 800133e:	480a      	ldr	r0, [pc, #40]	; (8001368 <main+0x78>)
 8001340:	f004 fc1a 	bl	8005b78 <HAL_TIM_Base_Start>

  //Start ADC1&2 in DMA Mode triggered by TIM2
  HAL_ADC_Start_DMA(&hadc1, adc1Buffer, ADC_BUFFER_SIZE);
 8001344:	2206      	movs	r2, #6
 8001346:	4909      	ldr	r1, [pc, #36]	; (800136c <main+0x7c>)
 8001348:	4809      	ldr	r0, [pc, #36]	; (8001370 <main+0x80>)
 800134a:	f001 fc1f 	bl	8002b8c <HAL_ADC_Start_DMA>


  //LCD Initialisation
  lcdInit();
 800134e:	f000 fbdd 	bl	8001b0c <lcdInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  UartprintADCValue();
 8001352:	f000 fb93 	bl	8001a7c <UartprintADCValue>
  {
 8001356:	e7fc      	b.n	8001352 <main+0x62>
 8001358:	0800a918 	.word	0x0800a918
 800135c:	20000450 	.word	0x20000450
 8001360:	200003c0 	.word	0x200003c0
 8001364:	20000328 	.word	0x20000328
 8001368:	20000374 	.word	0x20000374
 800136c:	20000490 	.word	0x20000490
 8001370:	20000210 	.word	0x20000210

08001374 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b094      	sub	sp, #80	; 0x50
 8001378:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800137a:	f107 0318 	add.w	r3, r7, #24
 800137e:	2238      	movs	r2, #56	; 0x38
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f006 fbc8 	bl	8007b18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	60da      	str	r2, [r3, #12]
 8001394:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001396:	2000      	movs	r0, #0
 8001398:	f003 fbbe 	bl	8004b18 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800139c:	2302      	movs	r3, #2
 800139e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013a6:	2340      	movs	r3, #64	; 0x40
 80013a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013aa:	2302      	movs	r3, #2
 80013ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013ae:	2302      	movs	r3, #2
 80013b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80013b2:	2304      	movs	r3, #4
 80013b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80013b6:	2355      	movs	r3, #85	; 0x55
 80013b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013ba:	2302      	movs	r3, #2
 80013bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013be:	2302      	movs	r3, #2
 80013c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013c2:	2302      	movs	r3, #2
 80013c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c6:	f107 0318 	add.w	r3, r7, #24
 80013ca:	4618      	mov	r0, r3
 80013cc:	f003 fc58 	bl	8004c80 <HAL_RCC_OscConfig>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <SystemClock_Config+0x66>
  {
    Error_Handler();
 80013d6:	f000 fc43 	bl	8001c60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013da:	230f      	movs	r3, #15
 80013dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013de:	2303      	movs	r3, #3
 80013e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013e6:	2300      	movs	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	2104      	movs	r1, #4
 80013f2:	4618      	mov	r0, r3
 80013f4:	f003 ff5c 	bl	80052b0 <HAL_RCC_ClockConfig>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80013fe:	f000 fc2f 	bl	8001c60 <Error_Handler>
  }
}
 8001402:	bf00      	nop
 8001404:	3750      	adds	r7, #80	; 0x50
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08c      	sub	sp, #48	; 0x30
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	2220      	movs	r2, #32
 8001422:	2100      	movs	r1, #0
 8001424:	4618      	mov	r0, r3
 8001426:	f006 fb77 	bl	8007b18 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800142a:	4b57      	ldr	r3, [pc, #348]	; (8001588 <MX_ADC1_Init+0x17c>)
 800142c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001430:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001432:	4b55      	ldr	r3, [pc, #340]	; (8001588 <MX_ADC1_Init+0x17c>)
 8001434:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001438:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800143a:	4b53      	ldr	r3, [pc, #332]	; (8001588 <MX_ADC1_Init+0x17c>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001440:	4b51      	ldr	r3, [pc, #324]	; (8001588 <MX_ADC1_Init+0x17c>)
 8001442:	2200      	movs	r2, #0
 8001444:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001446:	4b50      	ldr	r3, [pc, #320]	; (8001588 <MX_ADC1_Init+0x17c>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800144c:	4b4e      	ldr	r3, [pc, #312]	; (8001588 <MX_ADC1_Init+0x17c>)
 800144e:	2201      	movs	r2, #1
 8001450:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001452:	4b4d      	ldr	r3, [pc, #308]	; (8001588 <MX_ADC1_Init+0x17c>)
 8001454:	2204      	movs	r2, #4
 8001456:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001458:	4b4b      	ldr	r3, [pc, #300]	; (8001588 <MX_ADC1_Init+0x17c>)
 800145a:	2200      	movs	r2, #0
 800145c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800145e:	4b4a      	ldr	r3, [pc, #296]	; (8001588 <MX_ADC1_Init+0x17c>)
 8001460:	2200      	movs	r2, #0
 8001462:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 6;
 8001464:	4b48      	ldr	r3, [pc, #288]	; (8001588 <MX_ADC1_Init+0x17c>)
 8001466:	2206      	movs	r2, #6
 8001468:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800146a:	4b47      	ldr	r3, [pc, #284]	; (8001588 <MX_ADC1_Init+0x17c>)
 800146c:	2200      	movs	r2, #0
 800146e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8001472:	4b45      	ldr	r3, [pc, #276]	; (8001588 <MX_ADC1_Init+0x17c>)
 8001474:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 8001478:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800147a:	4b43      	ldr	r3, [pc, #268]	; (8001588 <MX_ADC1_Init+0x17c>)
 800147c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001480:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001482:	4b41      	ldr	r3, [pc, #260]	; (8001588 <MX_ADC1_Init+0x17c>)
 8001484:	2201      	movs	r2, #1
 8001486:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800148a:	4b3f      	ldr	r3, [pc, #252]	; (8001588 <MX_ADC1_Init+0x17c>)
 800148c:	2200      	movs	r2, #0
 800148e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001490:	4b3d      	ldr	r3, [pc, #244]	; (8001588 <MX_ADC1_Init+0x17c>)
 8001492:	2200      	movs	r2, #0
 8001494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001498:	483b      	ldr	r0, [pc, #236]	; (8001588 <MX_ADC1_Init+0x17c>)
 800149a:	f001 f9ed 	bl	8002878 <HAL_ADC_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80014a4:	f000 fbdc 	bl	8001c60 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80014a8:	2300      	movs	r3, #0
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80014ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b0:	4619      	mov	r1, r3
 80014b2:	4835      	ldr	r0, [pc, #212]	; (8001588 <MX_ADC1_Init+0x17c>)
 80014b4:	f002 f93e 	bl	8003734 <HAL_ADCEx_MultiModeConfigChannel>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80014be:	f000 fbcf 	bl	8001c60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014c2:	4b32      	ldr	r3, [pc, #200]	; (800158c <MX_ADC1_Init+0x180>)
 80014c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014c6:	2306      	movs	r3, #6
 80014c8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014ce:	237f      	movs	r3, #127	; 0x7f
 80014d0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014d2:	2304      	movs	r3, #4
 80014d4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	4619      	mov	r1, r3
 80014de:	482a      	ldr	r0, [pc, #168]	; (8001588 <MX_ADC1_Init+0x17c>)
 80014e0:	f001 fc1c 	bl	8002d1c <HAL_ADC_ConfigChannel>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80014ea:	f000 fbb9 	bl	8001c60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80014ee:	4b28      	ldr	r3, [pc, #160]	; (8001590 <MX_ADC1_Init+0x184>)
 80014f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80014f2:	230c      	movs	r3, #12
 80014f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	4619      	mov	r1, r3
 80014fa:	4823      	ldr	r0, [pc, #140]	; (8001588 <MX_ADC1_Init+0x17c>)
 80014fc:	f001 fc0e 	bl	8002d1c <HAL_ADC_ConfigChannel>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001506:	f000 fbab 	bl	8001c60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800150a:	4b22      	ldr	r3, [pc, #136]	; (8001594 <MX_ADC1_Init+0x188>)
 800150c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800150e:	2312      	movs	r3, #18
 8001510:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	4619      	mov	r1, r3
 8001516:	481c      	ldr	r0, [pc, #112]	; (8001588 <MX_ADC1_Init+0x17c>)
 8001518:	f001 fc00 	bl	8002d1c <HAL_ADC_ConfigChannel>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8001522:	f000 fb9d 	bl	8001c60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001526:	4b1c      	ldr	r3, [pc, #112]	; (8001598 <MX_ADC1_Init+0x18c>)
 8001528:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800152a:	2318      	movs	r3, #24
 800152c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	4619      	mov	r1, r3
 8001532:	4815      	ldr	r0, [pc, #84]	; (8001588 <MX_ADC1_Init+0x17c>)
 8001534:	f001 fbf2 	bl	8002d1c <HAL_ADC_ConfigChannel>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 800153e:	f000 fb8f 	bl	8001c60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001542:	4b16      	ldr	r3, [pc, #88]	; (800159c <MX_ADC1_Init+0x190>)
 8001544:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001546:	f44f 7380 	mov.w	r3, #256	; 0x100
 800154a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	4619      	mov	r1, r3
 8001550:	480d      	ldr	r0, [pc, #52]	; (8001588 <MX_ADC1_Init+0x17c>)
 8001552:	f001 fbe3 	bl	8002d1c <HAL_ADC_ConfigChannel>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 800155c:	f000 fb80 	bl	8001c60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001560:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <MX_ADC1_Init+0x194>)
 8001562:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001564:	f44f 7383 	mov.w	r3, #262	; 0x106
 8001568:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	4619      	mov	r1, r3
 800156e:	4806      	ldr	r0, [pc, #24]	; (8001588 <MX_ADC1_Init+0x17c>)
 8001570:	f001 fbd4 	bl	8002d1c <HAL_ADC_ConfigChannel>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_ADC1_Init+0x172>
  {
    Error_Handler();
 800157a:	f000 fb71 	bl	8001c60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800157e:	bf00      	nop
 8001580:	3730      	adds	r7, #48	; 0x30
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000210 	.word	0x20000210
 800158c:	04300002 	.word	0x04300002
 8001590:	14f00020 	.word	0x14f00020
 8001594:	19200040 	.word	0x19200040
 8001598:	1d500080 	.word	0x1d500080
 800159c:	21800100 	.word	0x21800100
 80015a0:	2e300800 	.word	0x2e300800

080015a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015a8:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <MX_I2C1_Init+0x74>)
 80015aa:	4a1c      	ldr	r2, [pc, #112]	; (800161c <MX_I2C1_Init+0x78>)
 80015ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 80015ae:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <MX_I2C1_Init+0x74>)
 80015b0:	4a1b      	ldr	r2, [pc, #108]	; (8001620 <MX_I2C1_Init+0x7c>)
 80015b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80015b4:	4b18      	ldr	r3, [pc, #96]	; (8001618 <MX_I2C1_Init+0x74>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015ba:	4b17      	ldr	r3, [pc, #92]	; (8001618 <MX_I2C1_Init+0x74>)
 80015bc:	2201      	movs	r2, #1
 80015be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015c0:	4b15      	ldr	r3, [pc, #84]	; (8001618 <MX_I2C1_Init+0x74>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80015c6:	4b14      	ldr	r3, [pc, #80]	; (8001618 <MX_I2C1_Init+0x74>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015cc:	4b12      	ldr	r3, [pc, #72]	; (8001618 <MX_I2C1_Init+0x74>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015d2:	4b11      	ldr	r3, [pc, #68]	; (8001618 <MX_I2C1_Init+0x74>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015d8:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <MX_I2C1_Init+0x74>)
 80015da:	2200      	movs	r2, #0
 80015dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015de:	480e      	ldr	r0, [pc, #56]	; (8001618 <MX_I2C1_Init+0x74>)
 80015e0:	f002 fe80 	bl	80042e4 <HAL_I2C_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80015ea:	f000 fb39 	bl	8001c60 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015ee:	2100      	movs	r1, #0
 80015f0:	4809      	ldr	r0, [pc, #36]	; (8001618 <MX_I2C1_Init+0x74>)
 80015f2:	f003 f9f9 	bl	80049e8 <HAL_I2CEx_ConfigAnalogFilter>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015fc:	f000 fb30 	bl	8001c60 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001600:	2100      	movs	r1, #0
 8001602:	4805      	ldr	r0, [pc, #20]	; (8001618 <MX_I2C1_Init+0x74>)
 8001604:	f003 fa3b 	bl	8004a7e <HAL_I2CEx_ConfigDigitalFilter>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800160e:	f000 fb27 	bl	8001c60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	200002dc 	.word	0x200002dc
 800161c:	40005400 	.word	0x40005400
 8001620:	30a0a7fb 	.word	0x30a0a7fb

08001624 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b09c      	sub	sp, #112	; 0x70
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800162a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001638:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001644:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
 8001654:	615a      	str	r2, [r3, #20]
 8001656:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	2234      	movs	r2, #52	; 0x34
 800165c:	2100      	movs	r1, #0
 800165e:	4618      	mov	r0, r3
 8001660:	f006 fa5a 	bl	8007b18 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001664:	4b45      	ldr	r3, [pc, #276]	; (800177c <MX_TIM1_Init+0x158>)
 8001666:	4a46      	ldr	r2, [pc, #280]	; (8001780 <MX_TIM1_Init+0x15c>)
 8001668:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800166a:	4b44      	ldr	r3, [pc, #272]	; (800177c <MX_TIM1_Init+0x158>)
 800166c:	2200      	movs	r2, #0
 800166e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001670:	4b42      	ldr	r3, [pc, #264]	; (800177c <MX_TIM1_Init+0x158>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 17199;
 8001676:	4b41      	ldr	r3, [pc, #260]	; (800177c <MX_TIM1_Init+0x158>)
 8001678:	f244 322f 	movw	r2, #17199	; 0x432f
 800167c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167e:	4b3f      	ldr	r3, [pc, #252]	; (800177c <MX_TIM1_Init+0x158>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001684:	4b3d      	ldr	r3, [pc, #244]	; (800177c <MX_TIM1_Init+0x158>)
 8001686:	2200      	movs	r2, #0
 8001688:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168a:	4b3c      	ldr	r3, [pc, #240]	; (800177c <MX_TIM1_Init+0x158>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001690:	483a      	ldr	r0, [pc, #232]	; (800177c <MX_TIM1_Init+0x158>)
 8001692:	f004 fa19 	bl	8005ac8 <HAL_TIM_Base_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800169c:	f000 fae0 	bl	8001c60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a4:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016a6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80016aa:	4619      	mov	r1, r3
 80016ac:	4833      	ldr	r0, [pc, #204]	; (800177c <MX_TIM1_Init+0x158>)
 80016ae:	f004 fd3b 	bl	8006128 <HAL_TIM_ConfigClockSource>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80016b8:	f000 fad2 	bl	8001c60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016bc:	482f      	ldr	r0, [pc, #188]	; (800177c <MX_TIM1_Init+0x158>)
 80016be:	f004 fabd 	bl	8005c3c <HAL_TIM_PWM_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80016c8:	f000 faca 	bl	8001c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016cc:	2300      	movs	r3, #0
 80016ce:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016d0:	2300      	movs	r3, #0
 80016d2:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016dc:	4619      	mov	r1, r3
 80016de:	4827      	ldr	r0, [pc, #156]	; (800177c <MX_TIM1_Init+0x158>)
 80016e0:	f005 fa64 	bl	8006bac <HAL_TIMEx_MasterConfigSynchronization>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80016ea:	f000 fab9 	bl	8001c60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ee:	2360      	movs	r3, #96	; 0x60
 80016f0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016f6:	2300      	movs	r3, #0
 80016f8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016fa:	2300      	movs	r3, #0
 80016fc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016fe:	2300      	movs	r3, #0
 8001700:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001702:	2300      	movs	r3, #0
 8001704:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001706:	2300      	movs	r3, #0
 8001708:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800170a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800170e:	2200      	movs	r2, #0
 8001710:	4619      	mov	r1, r3
 8001712:	481a      	ldr	r0, [pc, #104]	; (800177c <MX_TIM1_Init+0x158>)
 8001714:	f004 fbf4 	bl	8005f00 <HAL_TIM_PWM_ConfigChannel>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800171e:	f000 fa9f 	bl	8001c60 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001722:	2300      	movs	r3, #0
 8001724:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001726:	2300      	movs	r3, #0
 8001728:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001736:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800173a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001740:	2300      	movs	r3, #0
 8001742:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001744:	2300      	movs	r3, #0
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001748:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800174c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001752:	2300      	movs	r3, #0
 8001754:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001756:	2300      	movs	r3, #0
 8001758:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	4619      	mov	r1, r3
 800175e:	4807      	ldr	r0, [pc, #28]	; (800177c <MX_TIM1_Init+0x158>)
 8001760:	f005 faa6 	bl	8006cb0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800176a:	f000 fa79 	bl	8001c60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800176e:	4803      	ldr	r0, [pc, #12]	; (800177c <MX_TIM1_Init+0x158>)
 8001770:	f000 fc00 	bl	8001f74 <HAL_TIM_MspPostInit>

}
 8001774:	bf00      	nop
 8001776:	3770      	adds	r7, #112	; 0x70
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000328 	.word	0x20000328
 8001780:	40012c00 	.word	0x40012c00

08001784 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b088      	sub	sp, #32
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800178a:	f107 0310 	add.w	r3, r7, #16
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001798:	1d3b      	adds	r3, r7, #4
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017a2:	4b1e      	ldr	r3, [pc, #120]	; (800181c <MX_TIM2_Init+0x98>)
 80017a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80017aa:	4b1c      	ldr	r3, [pc, #112]	; (800181c <MX_TIM2_Init+0x98>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b0:	4b1a      	ldr	r3, [pc, #104]	; (800181c <MX_TIM2_Init+0x98>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 17199;
 80017b6:	4b19      	ldr	r3, [pc, #100]	; (800181c <MX_TIM2_Init+0x98>)
 80017b8:	f244 322f 	movw	r2, #17199	; 0x432f
 80017bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017be:	4b17      	ldr	r3, [pc, #92]	; (800181c <MX_TIM2_Init+0x98>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c4:	4b15      	ldr	r3, [pc, #84]	; (800181c <MX_TIM2_Init+0x98>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017ca:	4814      	ldr	r0, [pc, #80]	; (800181c <MX_TIM2_Init+0x98>)
 80017cc:	f004 f97c 	bl	8005ac8 <HAL_TIM_Base_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80017d6:	f000 fa43 	bl	8001c60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017e0:	f107 0310 	add.w	r3, r7, #16
 80017e4:	4619      	mov	r1, r3
 80017e6:	480d      	ldr	r0, [pc, #52]	; (800181c <MX_TIM2_Init+0x98>)
 80017e8:	f004 fc9e 	bl	8006128 <HAL_TIM_ConfigClockSource>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80017f2:	f000 fa35 	bl	8001c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80017f6:	2320      	movs	r3, #32
 80017f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80017fa:	2380      	movs	r3, #128	; 0x80
 80017fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017fe:	1d3b      	adds	r3, r7, #4
 8001800:	4619      	mov	r1, r3
 8001802:	4806      	ldr	r0, [pc, #24]	; (800181c <MX_TIM2_Init+0x98>)
 8001804:	f005 f9d2 	bl	8006bac <HAL_TIMEx_MasterConfigSynchronization>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800180e:	f000 fa27 	bl	8001c60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001812:	bf00      	nop
 8001814:	3720      	adds	r7, #32
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000374 	.word	0x20000374

08001820 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001824:	4b22      	ldr	r3, [pc, #136]	; (80018b0 <MX_USART2_UART_Init+0x90>)
 8001826:	4a23      	ldr	r2, [pc, #140]	; (80018b4 <MX_USART2_UART_Init+0x94>)
 8001828:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800182a:	4b21      	ldr	r3, [pc, #132]	; (80018b0 <MX_USART2_UART_Init+0x90>)
 800182c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001830:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001832:	4b1f      	ldr	r3, [pc, #124]	; (80018b0 <MX_USART2_UART_Init+0x90>)
 8001834:	2200      	movs	r2, #0
 8001836:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001838:	4b1d      	ldr	r3, [pc, #116]	; (80018b0 <MX_USART2_UART_Init+0x90>)
 800183a:	2200      	movs	r2, #0
 800183c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800183e:	4b1c      	ldr	r3, [pc, #112]	; (80018b0 <MX_USART2_UART_Init+0x90>)
 8001840:	2200      	movs	r2, #0
 8001842:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001844:	4b1a      	ldr	r3, [pc, #104]	; (80018b0 <MX_USART2_UART_Init+0x90>)
 8001846:	220c      	movs	r2, #12
 8001848:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800184a:	4b19      	ldr	r3, [pc, #100]	; (80018b0 <MX_USART2_UART_Init+0x90>)
 800184c:	2200      	movs	r2, #0
 800184e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001850:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <MX_USART2_UART_Init+0x90>)
 8001852:	2200      	movs	r2, #0
 8001854:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001856:	4b16      	ldr	r3, [pc, #88]	; (80018b0 <MX_USART2_UART_Init+0x90>)
 8001858:	2200      	movs	r2, #0
 800185a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800185c:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <MX_USART2_UART_Init+0x90>)
 800185e:	2200      	movs	r2, #0
 8001860:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001862:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <MX_USART2_UART_Init+0x90>)
 8001864:	2200      	movs	r2, #0
 8001866:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001868:	4811      	ldr	r0, [pc, #68]	; (80018b0 <MX_USART2_UART_Init+0x90>)
 800186a:	f005 fac1 	bl	8006df0 <HAL_UART_Init>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001874:	f000 f9f4 	bl	8001c60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001878:	2100      	movs	r1, #0
 800187a:	480d      	ldr	r0, [pc, #52]	; (80018b0 <MX_USART2_UART_Init+0x90>)
 800187c:	f006 f858 	bl	8007930 <HAL_UARTEx_SetTxFifoThreshold>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001886:	f000 f9eb 	bl	8001c60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800188a:	2100      	movs	r1, #0
 800188c:	4808      	ldr	r0, [pc, #32]	; (80018b0 <MX_USART2_UART_Init+0x90>)
 800188e:	f006 f88d 	bl	80079ac <HAL_UARTEx_SetRxFifoThreshold>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001898:	f000 f9e2 	bl	8001c60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800189c:	4804      	ldr	r0, [pc, #16]	; (80018b0 <MX_USART2_UART_Init+0x90>)
 800189e:	f006 f80e 	bl	80078be <HAL_UARTEx_DisableFifoMode>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80018a8:	f000 f9da 	bl	8001c60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018ac:	bf00      	nop
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	200003c0 	.word	0x200003c0
 80018b4:	40004400 	.word	0x40004400

080018b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80018be:	4b12      	ldr	r3, [pc, #72]	; (8001908 <MX_DMA_Init+0x50>)
 80018c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018c2:	4a11      	ldr	r2, [pc, #68]	; (8001908 <MX_DMA_Init+0x50>)
 80018c4:	f043 0304 	orr.w	r3, r3, #4
 80018c8:	6493      	str	r3, [r2, #72]	; 0x48
 80018ca:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <MX_DMA_Init+0x50>)
 80018cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ce:	f003 0304 	and.w	r3, r3, #4
 80018d2:	607b      	str	r3, [r7, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018d6:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <MX_DMA_Init+0x50>)
 80018d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018da:	4a0b      	ldr	r2, [pc, #44]	; (8001908 <MX_DMA_Init+0x50>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6493      	str	r3, [r2, #72]	; 0x48
 80018e2:	4b09      	ldr	r3, [pc, #36]	; (8001908 <MX_DMA_Init+0x50>)
 80018e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	603b      	str	r3, [r7, #0]
 80018ec:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80018ee:	2200      	movs	r2, #0
 80018f0:	2100      	movs	r1, #0
 80018f2:	200b      	movs	r0, #11
 80018f4:	f002 f89d 	bl	8003a32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80018f8:	200b      	movs	r0, #11
 80018fa:	f002 f8b4 	bl	8003a66 <HAL_NVIC_EnableIRQ>

}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40021000 	.word	0x40021000

0800190c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08a      	sub	sp, #40	; 0x28
 8001910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	609a      	str	r2, [r3, #8]
 800191e:	60da      	str	r2, [r3, #12]
 8001920:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001922:	4b3a      	ldr	r3, [pc, #232]	; (8001a0c <MX_GPIO_Init+0x100>)
 8001924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001926:	4a39      	ldr	r2, [pc, #228]	; (8001a0c <MX_GPIO_Init+0x100>)
 8001928:	f043 0304 	orr.w	r3, r3, #4
 800192c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800192e:	4b37      	ldr	r3, [pc, #220]	; (8001a0c <MX_GPIO_Init+0x100>)
 8001930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001932:	f003 0304 	and.w	r3, r3, #4
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800193a:	4b34      	ldr	r3, [pc, #208]	; (8001a0c <MX_GPIO_Init+0x100>)
 800193c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193e:	4a33      	ldr	r2, [pc, #204]	; (8001a0c <MX_GPIO_Init+0x100>)
 8001940:	f043 0320 	orr.w	r3, r3, #32
 8001944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001946:	4b31      	ldr	r3, [pc, #196]	; (8001a0c <MX_GPIO_Init+0x100>)
 8001948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194a:	f003 0320 	and.w	r3, r3, #32
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001952:	4b2e      	ldr	r3, [pc, #184]	; (8001a0c <MX_GPIO_Init+0x100>)
 8001954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001956:	4a2d      	ldr	r2, [pc, #180]	; (8001a0c <MX_GPIO_Init+0x100>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800195e:	4b2b      	ldr	r3, [pc, #172]	; (8001a0c <MX_GPIO_Init+0x100>)
 8001960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800196a:	4b28      	ldr	r3, [pc, #160]	; (8001a0c <MX_GPIO_Init+0x100>)
 800196c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196e:	4a27      	ldr	r2, [pc, #156]	; (8001a0c <MX_GPIO_Init+0x100>)
 8001970:	f043 0302 	orr.w	r3, r3, #2
 8001974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001976:	4b25      	ldr	r3, [pc, #148]	; (8001a0c <MX_GPIO_Init+0x100>)
 8001978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	607b      	str	r3, [r7, #4]
 8001980:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001982:	2200      	movs	r2, #0
 8001984:	2120      	movs	r1, #32
 8001986:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800198a:	f002 fc7b 	bl	8004284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Rel_Bat1_Pin|Rel_Bat2_Pin, GPIO_PIN_RESET);
 800198e:	2200      	movs	r2, #0
 8001990:	f248 0102 	movw	r1, #32770	; 0x8002
 8001994:	481e      	ldr	r0, [pc, #120]	; (8001a10 <MX_GPIO_Init+0x104>)
 8001996:	f002 fc75 	bl	8004284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800199a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800199e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019a0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019aa:	f107 0314 	add.w	r3, r7, #20
 80019ae:	4619      	mov	r1, r3
 80019b0:	4818      	ldr	r0, [pc, #96]	; (8001a14 <MX_GPIO_Init+0x108>)
 80019b2:	f002 fae5 	bl	8003f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80019b6:	2320      	movs	r3, #32
 80019b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ba:	2301      	movs	r3, #1
 80019bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	2300      	movs	r3, #0
 80019c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80019c6:	f107 0314 	add.w	r3, r7, #20
 80019ca:	4619      	mov	r1, r3
 80019cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019d0:	f002 fad6 	bl	8003f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : Rel_Bat1_Pin Rel_Bat2_Pin */
  GPIO_InitStruct.Pin = Rel_Bat1_Pin|Rel_Bat2_Pin;
 80019d4:	f248 0302 	movw	r3, #32770	; 0x8002
 80019d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019da:	2301      	movs	r3, #1
 80019dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e2:	2300      	movs	r3, #0
 80019e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e6:	f107 0314 	add.w	r3, r7, #20
 80019ea:	4619      	mov	r1, r3
 80019ec:	4808      	ldr	r0, [pc, #32]	; (8001a10 <MX_GPIO_Init+0x104>)
 80019ee:	f002 fac7 	bl	8003f80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2100      	movs	r1, #0
 80019f6:	2028      	movs	r0, #40	; 0x28
 80019f8:	f002 f81b 	bl	8003a32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019fc:	2028      	movs	r0, #40	; 0x28
 80019fe:	f002 f832 	bl	8003a66 <HAL_NVIC_EnableIRQ>

}
 8001a02:	bf00      	nop
 8001a04:	3728      	adds	r7, #40	; 0x28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	48000400 	.word	0x48000400
 8001a14:	48000800 	.word	0x48000800

08001a18 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

//ADC_Conversion complete callback
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  if (hadc == &hadc1)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a06      	ldr	r2, [pc, #24]	; (8001a3c <HAL_ADC_ConvCpltCallback+0x24>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d102      	bne.n	8001a2e <HAL_ADC_ConvCpltCallback+0x16>
  {
	  adc1flag=1;
 8001a28:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <HAL_ADC_ConvCpltCallback+0x28>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]
  }

}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	20000210 	.word	0x20000210
 8001a40:	200004a8 	.word	0x200004a8

08001a44 <HAL_GPIO_EXTI_Callback>:

//GPIO EXTI Callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == B1_Pin)
 8001a4e:	88fb      	ldrh	r3, [r7, #6]
 8001a50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a54:	d10c      	bne.n	8001a70 <HAL_GPIO_EXTI_Callback+0x2c>
  {
	  if (lcdflag==0)
 8001a56:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <HAL_GPIO_EXTI_Callback+0x34>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d103      	bne.n	8001a66 <HAL_GPIO_EXTI_Callback+0x22>
	  {
		  lcdflag=1;
 8001a5e:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <HAL_GPIO_EXTI_Callback+0x34>)
 8001a60:	2201      	movs	r2, #1
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	e002      	b.n	8001a6c <HAL_GPIO_EXTI_Callback+0x28>
	  }
	  else
	  {
		  lcdflag=0;
 8001a66:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <HAL_GPIO_EXTI_Callback+0x34>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
	  }
	  lcdchangeDisplay();
 8001a6c:	f000 f8e8 	bl	8001c40 <lcdchangeDisplay>
  }
}
 8001a70:	bf00      	nop
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	200004ac 	.word	0x200004ac

08001a7c <UartprintADCValue>:

void UartprintADCValue(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af02      	add	r7, sp, #8
	if (adc1flag==1)
 8001a82:	4b1c      	ldr	r3, [pc, #112]	; (8001af4 <UartprintADCValue+0x78>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d130      	bne.n	8001aec <UartprintADCValue+0x70>
	{
		adc1flag=0;
 8001a8a:	4b1a      	ldr	r3, [pc, #104]	; (8001af4 <UartprintADCValue+0x78>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
		sprintf(uartTX_Buffer,"Current: Pan:%d | Bat1:%d | Bat2:%d\r\n",adc1Buffer[0],adc1Buffer[1],adc1Buffer[2]);
 8001a90:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <UartprintADCValue+0x7c>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <UartprintADCValue+0x7c>)
 8001a96:	6859      	ldr	r1, [r3, #4]
 8001a98:	4b17      	ldr	r3, [pc, #92]	; (8001af8 <UartprintADCValue+0x7c>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4916      	ldr	r1, [pc, #88]	; (8001afc <UartprintADCValue+0x80>)
 8001aa2:	4817      	ldr	r0, [pc, #92]	; (8001b00 <UartprintADCValue+0x84>)
 8001aa4:	f006 fcaa 	bl	80083fc <siprintf>
		HAL_UART_Transmit(&huart2, uartTX_Buffer, strlen(uartTX_Buffer), HAL_MAX_DELAY);
 8001aa8:	4815      	ldr	r0, [pc, #84]	; (8001b00 <UartprintADCValue+0x84>)
 8001aaa:	f7fe fbb9 	bl	8000220 <strlen>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab6:	4912      	ldr	r1, [pc, #72]	; (8001b00 <UartprintADCValue+0x84>)
 8001ab8:	4812      	ldr	r0, [pc, #72]	; (8001b04 <UartprintADCValue+0x88>)
 8001aba:	f005 f9e9 	bl	8006e90 <HAL_UART_Transmit>
		sprintf(uartTX_Buffer,"Voltage: Pan:%d | Bat1:%d | Bat2:%d\r\n",adc1Buffer[3],adc1Buffer[4],adc1Buffer[5]);
 8001abe:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <UartprintADCValue+0x7c>)
 8001ac0:	68da      	ldr	r2, [r3, #12]
 8001ac2:	4b0d      	ldr	r3, [pc, #52]	; (8001af8 <UartprintADCValue+0x7c>)
 8001ac4:	6919      	ldr	r1, [r3, #16]
 8001ac6:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <UartprintADCValue+0x7c>)
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	460b      	mov	r3, r1
 8001ace:	490e      	ldr	r1, [pc, #56]	; (8001b08 <UartprintADCValue+0x8c>)
 8001ad0:	480b      	ldr	r0, [pc, #44]	; (8001b00 <UartprintADCValue+0x84>)
 8001ad2:	f006 fc93 	bl	80083fc <siprintf>
		HAL_UART_Transmit(&huart2, uartTX_Buffer, strlen(uartTX_Buffer), HAL_MAX_DELAY);
 8001ad6:	480a      	ldr	r0, [pc, #40]	; (8001b00 <UartprintADCValue+0x84>)
 8001ad8:	f7fe fba2 	bl	8000220 <strlen>
 8001adc:	4603      	mov	r3, r0
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae4:	4906      	ldr	r1, [pc, #24]	; (8001b00 <UartprintADCValue+0x84>)
 8001ae6:	4807      	ldr	r0, [pc, #28]	; (8001b04 <UartprintADCValue+0x88>)
 8001ae8:	f005 f9d2 	bl	8006e90 <HAL_UART_Transmit>
	}

}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	200004a8 	.word	0x200004a8
 8001af8:	20000490 	.word	0x20000490
 8001afc:	0800a934 	.word	0x0800a934
 8001b00:	20000450 	.word	0x20000450
 8001b04:	200003c0 	.word	0x200003c0
 8001b08:	0800a95c 	.word	0x0800a95c

08001b0c <lcdInit>:

//LCD Display Functions
void lcdInit()
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
	  HD44780_Init(2);
 8001b10:	2002      	movs	r0, #2
 8001b12:	f7ff f9f3 	bl	8000efc <HD44780_Init>
	  HD44780_Clear();
 8001b16:	f7ff fa75 	bl	8001004 <HD44780_Clear>
	  HD44780_SetCursor(1,0);
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	2001      	movs	r0, #1
 8001b1e:	f7ff fa87 	bl	8001030 <HD44780_SetCursor>
	  HD44780_PrintStr("SOLAR CHARGER");
 8001b22:	4809      	ldr	r0, [pc, #36]	; (8001b48 <lcdInit+0x3c>)
 8001b24:	f7ff faf5 	bl	8001112 <HD44780_PrintStr>
	  HD44780_SetCursor(5, 1);
 8001b28:	2101      	movs	r1, #1
 8001b2a:	2005      	movs	r0, #5
 8001b2c:	f7ff fa80 	bl	8001030 <HD44780_SetCursor>
	  HD44780_PrintStr("V1.0");
 8001b30:	4806      	ldr	r0, [pc, #24]	; (8001b4c <lcdInit+0x40>)
 8001b32:	f7ff faee 	bl	8001112 <HD44780_PrintStr>
	  HAL_Delay(2000);
 8001b36:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b3a:	f000 fc59 	bl	80023f0 <HAL_Delay>
	  lcdDispVoltage();
 8001b3e:	f000 f807 	bl	8001b50 <lcdDispVoltage>
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	0800a984 	.word	0x0800a984
 8001b4c:	0800a994 	.word	0x0800a994

08001b50 <lcdDispVoltage>:
void lcdDispVoltage()
{
 8001b50:	b5b0      	push	{r4, r5, r7, lr}
 8001b52:	b088      	sub	sp, #32
 8001b54:	af02      	add	r7, sp, #8
	//pour test//
	float test=11.5;
 8001b56:	4b19      	ldr	r3, [pc, #100]	; (8001bbc <lcdDispVoltage+0x6c>)
 8001b58:	617b      	str	r3, [r7, #20]
	char buffer[16];
	HD44780_Clear();
 8001b5a:	f7ff fa53 	bl	8001004 <HD44780_Clear>
	HD44780_SetCursor(0, 0);
 8001b5e:	2100      	movs	r1, #0
 8001b60:	2000      	movs	r0, #0
 8001b62:	f7ff fa65 	bl	8001030 <HD44780_SetCursor>
	sprintf(buffer,"Vp=%.1f Vb1=%.1f",test,test);
 8001b66:	6978      	ldr	r0, [r7, #20]
 8001b68:	f7fe fd16 	bl	8000598 <__aeabi_f2d>
 8001b6c:	4604      	mov	r4, r0
 8001b6e:	460d      	mov	r5, r1
 8001b70:	6978      	ldr	r0, [r7, #20]
 8001b72:	f7fe fd11 	bl	8000598 <__aeabi_f2d>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	1d38      	adds	r0, r7, #4
 8001b7c:	e9cd 2300 	strd	r2, r3, [sp]
 8001b80:	4622      	mov	r2, r4
 8001b82:	462b      	mov	r3, r5
 8001b84:	490e      	ldr	r1, [pc, #56]	; (8001bc0 <lcdDispVoltage+0x70>)
 8001b86:	f006 fc39 	bl	80083fc <siprintf>
	HD44780_PrintStr(buffer);
 8001b8a:	1d3b      	adds	r3, r7, #4
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff fac0 	bl	8001112 <HD44780_PrintStr>
	HD44780_SetCursor(4, 1);
 8001b92:	2101      	movs	r1, #1
 8001b94:	2004      	movs	r0, #4
 8001b96:	f7ff fa4b 	bl	8001030 <HD44780_SetCursor>
	sprintf(buffer,"Vb2=%.1f",test);
 8001b9a:	6978      	ldr	r0, [r7, #20]
 8001b9c:	f7fe fcfc 	bl	8000598 <__aeabi_f2d>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	1d38      	adds	r0, r7, #4
 8001ba6:	4907      	ldr	r1, [pc, #28]	; (8001bc4 <lcdDispVoltage+0x74>)
 8001ba8:	f006 fc28 	bl	80083fc <siprintf>
	HD44780_PrintStr(buffer);
 8001bac:	1d3b      	adds	r3, r7, #4
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff faaf 	bl	8001112 <HD44780_PrintStr>
}
 8001bb4:	bf00      	nop
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bdb0      	pop	{r4, r5, r7, pc}
 8001bbc:	41380000 	.word	0x41380000
 8001bc0:	0800a99c 	.word	0x0800a99c
 8001bc4:	0800a9b0 	.word	0x0800a9b0

08001bc8 <lcdDispCurrent>:

void lcdDispCurrent()
{
 8001bc8:	b5b0      	push	{r4, r5, r7, lr}
 8001bca:	b088      	sub	sp, #32
 8001bcc:	af02      	add	r7, sp, #8
	//pour test//
	float test=10.00;
 8001bce:	4b19      	ldr	r3, [pc, #100]	; (8001c34 <lcdDispCurrent+0x6c>)
 8001bd0:	617b      	str	r3, [r7, #20]
	char buffer[16];
	HD44780_Clear();
 8001bd2:	f7ff fa17 	bl	8001004 <HD44780_Clear>
	HD44780_SetCursor(0, 0);
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	2000      	movs	r0, #0
 8001bda:	f7ff fa29 	bl	8001030 <HD44780_SetCursor>
	sprintf(buffer,"Ip=%.1f Ib1=%.1f",test,test);
 8001bde:	6978      	ldr	r0, [r7, #20]
 8001be0:	f7fe fcda 	bl	8000598 <__aeabi_f2d>
 8001be4:	4604      	mov	r4, r0
 8001be6:	460d      	mov	r5, r1
 8001be8:	6978      	ldr	r0, [r7, #20]
 8001bea:	f7fe fcd5 	bl	8000598 <__aeabi_f2d>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	1d38      	adds	r0, r7, #4
 8001bf4:	e9cd 2300 	strd	r2, r3, [sp]
 8001bf8:	4622      	mov	r2, r4
 8001bfa:	462b      	mov	r3, r5
 8001bfc:	490e      	ldr	r1, [pc, #56]	; (8001c38 <lcdDispCurrent+0x70>)
 8001bfe:	f006 fbfd 	bl	80083fc <siprintf>
	HD44780_PrintStr(buffer);
 8001c02:	1d3b      	adds	r3, r7, #4
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff fa84 	bl	8001112 <HD44780_PrintStr>
	HD44780_SetCursor(4, 1);
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	2004      	movs	r0, #4
 8001c0e:	f7ff fa0f 	bl	8001030 <HD44780_SetCursor>
	sprintf(buffer,"Ib2=%.1f",test);
 8001c12:	6978      	ldr	r0, [r7, #20]
 8001c14:	f7fe fcc0 	bl	8000598 <__aeabi_f2d>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	1d38      	adds	r0, r7, #4
 8001c1e:	4907      	ldr	r1, [pc, #28]	; (8001c3c <lcdDispCurrent+0x74>)
 8001c20:	f006 fbec 	bl	80083fc <siprintf>
	HD44780_PrintStr(buffer);
 8001c24:	1d3b      	adds	r3, r7, #4
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff fa73 	bl	8001112 <HD44780_PrintStr>
}
 8001c2c:	bf00      	nop
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bdb0      	pop	{r4, r5, r7, pc}
 8001c34:	41200000 	.word	0x41200000
 8001c38:	0800a9bc 	.word	0x0800a9bc
 8001c3c:	0800a9d0 	.word	0x0800a9d0

08001c40 <lcdchangeDisplay>:

void lcdchangeDisplay()
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
	if (lcdflag==0)
 8001c44:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <lcdchangeDisplay+0x1c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d102      	bne.n	8001c52 <lcdchangeDisplay+0x12>
	{
		lcdDispVoltage();
 8001c4c:	f7ff ff80 	bl	8001b50 <lcdDispVoltage>
	}
	else
	{
		lcdDispCurrent();
	}
}
 8001c50:	e001      	b.n	8001c56 <lcdchangeDisplay+0x16>
		lcdDispCurrent();
 8001c52:	f7ff ffb9 	bl	8001bc8 <lcdDispCurrent>
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	200004ac 	.word	0x200004ac

08001c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c64:	b672      	cpsid	i
}
 8001c66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c68:	e7fe      	b.n	8001c68 <Error_Handler+0x8>
	...

08001c6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c72:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <HAL_MspInit+0x44>)
 8001c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c76:	4a0e      	ldr	r2, [pc, #56]	; (8001cb0 <HAL_MspInit+0x44>)
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	6613      	str	r3, [r2, #96]	; 0x60
 8001c7e:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <HAL_MspInit+0x44>)
 8001c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	607b      	str	r3, [r7, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c8a:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <HAL_MspInit+0x44>)
 8001c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8e:	4a08      	ldr	r2, [pc, #32]	; (8001cb0 <HAL_MspInit+0x44>)
 8001c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c94:	6593      	str	r3, [r2, #88]	; 0x58
 8001c96:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_MspInit+0x44>)
 8001c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9e:	603b      	str	r3, [r7, #0]
 8001ca0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001ca2:	f002 ffdd 	bl	8004c60 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40021000 	.word	0x40021000

08001cb4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b09c      	sub	sp, #112	; 0x70
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ccc:	f107 0318 	add.w	r3, r7, #24
 8001cd0:	2244      	movs	r2, #68	; 0x44
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f005 ff1f 	bl	8007b18 <memset>
  if(hadc->Instance==ADC1)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ce2:	f040 8091 	bne.w	8001e08 <HAL_ADC_MspInit+0x154>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001ce6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cea:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001cec:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001cf0:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cf2:	f107 0318 	add.w	r3, r7, #24
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f003 fcf6 	bl	80056e8 <HAL_RCCEx_PeriphCLKConfig>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001d02:	f7ff ffad 	bl	8001c60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001d06:	4b42      	ldr	r3, [pc, #264]	; (8001e10 <HAL_ADC_MspInit+0x15c>)
 8001d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0a:	4a41      	ldr	r2, [pc, #260]	; (8001e10 <HAL_ADC_MspInit+0x15c>)
 8001d0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d12:	4b3f      	ldr	r3, [pc, #252]	; (8001e10 <HAL_ADC_MspInit+0x15c>)
 8001d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d1e:	4b3c      	ldr	r3, [pc, #240]	; (8001e10 <HAL_ADC_MspInit+0x15c>)
 8001d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d22:	4a3b      	ldr	r2, [pc, #236]	; (8001e10 <HAL_ADC_MspInit+0x15c>)
 8001d24:	f043 0304 	orr.w	r3, r3, #4
 8001d28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d2a:	4b39      	ldr	r3, [pc, #228]	; (8001e10 <HAL_ADC_MspInit+0x15c>)
 8001d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2e:	f003 0304 	and.w	r3, r3, #4
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d36:	4b36      	ldr	r3, [pc, #216]	; (8001e10 <HAL_ADC_MspInit+0x15c>)
 8001d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3a:	4a35      	ldr	r2, [pc, #212]	; (8001e10 <HAL_ADC_MspInit+0x15c>)
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d42:	4b33      	ldr	r3, [pc, #204]	; (8001e10 <HAL_ADC_MspInit+0x15c>)
 8001d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d4e:	4b30      	ldr	r3, [pc, #192]	; (8001e10 <HAL_ADC_MspInit+0x15c>)
 8001d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d52:	4a2f      	ldr	r2, [pc, #188]	; (8001e10 <HAL_ADC_MspInit+0x15c>)
 8001d54:	f043 0302 	orr.w	r3, r3, #2
 8001d58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d5a:	4b2d      	ldr	r3, [pc, #180]	; (8001e10 <HAL_ADC_MspInit+0x15c>)
 8001d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> ADC1_IN8
    PA0     ------> ADC1_IN1
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = IBat2_Pin|Vpan_Pin|Vbat1_Pin;
 8001d66:	2307      	movs	r3, #7
 8001d68:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d72:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d76:	4619      	mov	r1, r3
 8001d78:	4826      	ldr	r0, [pc, #152]	; (8001e14 <HAL_ADC_MspInit+0x160>)
 8001d7a:	f002 f901 	bl	8003f80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Ipan_Pin;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d82:	2303      	movs	r3, #3
 8001d84:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(Ipan_GPIO_Port, &GPIO_InitStruct);
 8001d8a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d8e:	4619      	mov	r1, r3
 8001d90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d94:	f002 f8f4 	bl	8003f80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Vbat2_Pin|IBat1_Pin;
 8001d98:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001d9c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001daa:	4619      	mov	r1, r3
 8001dac:	481a      	ldr	r0, [pc, #104]	; (8001e18 <HAL_ADC_MspInit+0x164>)
 8001dae:	f002 f8e7 	bl	8003f80 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001db2:	4b1a      	ldr	r3, [pc, #104]	; (8001e1c <HAL_ADC_MspInit+0x168>)
 8001db4:	4a1a      	ldr	r2, [pc, #104]	; (8001e20 <HAL_ADC_MspInit+0x16c>)
 8001db6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001db8:	4b18      	ldr	r3, [pc, #96]	; (8001e1c <HAL_ADC_MspInit+0x168>)
 8001dba:	2205      	movs	r2, #5
 8001dbc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dbe:	4b17      	ldr	r3, [pc, #92]	; (8001e1c <HAL_ADC_MspInit+0x168>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dc4:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <HAL_ADC_MspInit+0x168>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001dca:	4b14      	ldr	r3, [pc, #80]	; (8001e1c <HAL_ADC_MspInit+0x168>)
 8001dcc:	2280      	movs	r2, #128	; 0x80
 8001dce:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001dd0:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <HAL_ADC_MspInit+0x168>)
 8001dd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dd6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001dd8:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <HAL_ADC_MspInit+0x168>)
 8001dda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001dde:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001de0:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <HAL_ADC_MspInit+0x168>)
 8001de2:	2220      	movs	r2, #32
 8001de4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001de6:	4b0d      	ldr	r3, [pc, #52]	; (8001e1c <HAL_ADC_MspInit+0x168>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001dec:	480b      	ldr	r0, [pc, #44]	; (8001e1c <HAL_ADC_MspInit+0x168>)
 8001dee:	f001 fe55 	bl	8003a9c <HAL_DMA_Init>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <HAL_ADC_MspInit+0x148>
    {
      Error_Handler();
 8001df8:	f7ff ff32 	bl	8001c60 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a07      	ldr	r2, [pc, #28]	; (8001e1c <HAL_ADC_MspInit+0x168>)
 8001e00:	655a      	str	r2, [r3, #84]	; 0x54
 8001e02:	4a06      	ldr	r2, [pc, #24]	; (8001e1c <HAL_ADC_MspInit+0x168>)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e08:	bf00      	nop
 8001e0a:	3770      	adds	r7, #112	; 0x70
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40021000 	.word	0x40021000
 8001e14:	48000800 	.word	0x48000800
 8001e18:	48000400 	.word	0x48000400
 8001e1c:	2000027c 	.word	0x2000027c
 8001e20:	40020008 	.word	0x40020008

08001e24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b09c      	sub	sp, #112	; 0x70
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e3c:	f107 0318 	add.w	r3, r7, #24
 8001e40:	2244      	movs	r2, #68	; 0x44
 8001e42:	2100      	movs	r1, #0
 8001e44:	4618      	mov	r0, r3
 8001e46:	f005 fe67 	bl	8007b18 <memset>
  if(hi2c->Instance==I2C1)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a2d      	ldr	r2, [pc, #180]	; (8001f04 <HAL_I2C_MspInit+0xe0>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d153      	bne.n	8001efc <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e54:	2340      	movs	r3, #64	; 0x40
 8001e56:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e5c:	f107 0318 	add.w	r3, r7, #24
 8001e60:	4618      	mov	r0, r3
 8001e62:	f003 fc41 	bl	80056e8 <HAL_RCCEx_PeriphCLKConfig>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001e6c:	f7ff fef8 	bl	8001c60 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e70:	4b25      	ldr	r3, [pc, #148]	; (8001f08 <HAL_I2C_MspInit+0xe4>)
 8001e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e74:	4a24      	ldr	r2, [pc, #144]	; (8001f08 <HAL_I2C_MspInit+0xe4>)
 8001e76:	f043 0301 	orr.w	r3, r3, #1
 8001e7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e7c:	4b22      	ldr	r3, [pc, #136]	; (8001f08 <HAL_I2C_MspInit+0xe4>)
 8001e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	617b      	str	r3, [r7, #20]
 8001e86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e88:	4b1f      	ldr	r3, [pc, #124]	; (8001f08 <HAL_I2C_MspInit+0xe4>)
 8001e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8c:	4a1e      	ldr	r2, [pc, #120]	; (8001f08 <HAL_I2C_MspInit+0xe4>)
 8001e8e:	f043 0302 	orr.w	r3, r3, #2
 8001e92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e94:	4b1c      	ldr	r3, [pc, #112]	; (8001f08 <HAL_I2C_MspInit+0xe4>)
 8001e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	613b      	str	r3, [r7, #16]
 8001e9e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ea0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ea4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ea6:	2312      	movs	r3, #18
 8001ea8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001eb2:	2304      	movs	r3, #4
 8001eb4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ec0:	f002 f85e 	bl	8003f80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ec4:	2380      	movs	r3, #128	; 0x80
 8001ec6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ec8:	2312      	movs	r3, #18
 8001eca:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ed4:	2304      	movs	r3, #4
 8001ed6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001edc:	4619      	mov	r1, r3
 8001ede:	480b      	ldr	r0, [pc, #44]	; (8001f0c <HAL_I2C_MspInit+0xe8>)
 8001ee0:	f002 f84e 	bl	8003f80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ee4:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <HAL_I2C_MspInit+0xe4>)
 8001ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee8:	4a07      	ldr	r2, [pc, #28]	; (8001f08 <HAL_I2C_MspInit+0xe4>)
 8001eea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001eee:	6593      	str	r3, [r2, #88]	; 0x58
 8001ef0:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <HAL_I2C_MspInit+0xe4>)
 8001ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001efc:	bf00      	nop
 8001efe:	3770      	adds	r7, #112	; 0x70
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40005400 	.word	0x40005400
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	48000400 	.word	0x48000400

08001f10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a13      	ldr	r2, [pc, #76]	; (8001f6c <HAL_TIM_Base_MspInit+0x5c>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d10c      	bne.n	8001f3c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f22:	4b13      	ldr	r3, [pc, #76]	; (8001f70 <HAL_TIM_Base_MspInit+0x60>)
 8001f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f26:	4a12      	ldr	r2, [pc, #72]	; (8001f70 <HAL_TIM_Base_MspInit+0x60>)
 8001f28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f2c:	6613      	str	r3, [r2, #96]	; 0x60
 8001f2e:	4b10      	ldr	r3, [pc, #64]	; (8001f70 <HAL_TIM_Base_MspInit+0x60>)
 8001f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f3a:	e010      	b.n	8001f5e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f44:	d10b      	bne.n	8001f5e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f46:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <HAL_TIM_Base_MspInit+0x60>)
 8001f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4a:	4a09      	ldr	r2, [pc, #36]	; (8001f70 <HAL_TIM_Base_MspInit+0x60>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	6593      	str	r3, [r2, #88]	; 0x58
 8001f52:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <HAL_TIM_Base_MspInit+0x60>)
 8001f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	60bb      	str	r3, [r7, #8]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
}
 8001f5e:	bf00      	nop
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40012c00 	.word	0x40012c00
 8001f70:	40021000 	.word	0x40021000

08001f74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b088      	sub	sp, #32
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 030c 	add.w	r3, r7, #12
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a12      	ldr	r2, [pc, #72]	; (8001fdc <HAL_TIM_MspPostInit+0x68>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d11d      	bne.n	8001fd2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f96:	4b12      	ldr	r3, [pc, #72]	; (8001fe0 <HAL_TIM_MspPostInit+0x6c>)
 8001f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9a:	4a11      	ldr	r2, [pc, #68]	; (8001fe0 <HAL_TIM_MspPostInit+0x6c>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fa2:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <HAL_TIM_MspPostInit+0x6c>)
 8001fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001fae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fb2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001fc0:	2306      	movs	r3, #6
 8001fc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc4:	f107 030c 	add.w	r3, r7, #12
 8001fc8:	4619      	mov	r1, r3
 8001fca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fce:	f001 ffd7 	bl	8003f80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001fd2:	bf00      	nop
 8001fd4:	3720      	adds	r7, #32
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40012c00 	.word	0x40012c00
 8001fe0:	40021000 	.word	0x40021000

08001fe4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b09a      	sub	sp, #104	; 0x68
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ffc:	f107 0310 	add.w	r3, r7, #16
 8002000:	2244      	movs	r2, #68	; 0x44
 8002002:	2100      	movs	r1, #0
 8002004:	4618      	mov	r0, r3
 8002006:	f005 fd87 	bl	8007b18 <memset>
  if(huart->Instance==USART2)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a1f      	ldr	r2, [pc, #124]	; (800208c <HAL_UART_MspInit+0xa8>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d136      	bne.n	8002082 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002014:	2302      	movs	r3, #2
 8002016:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002018:	2300      	movs	r3, #0
 800201a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800201c:	f107 0310 	add.w	r3, r7, #16
 8002020:	4618      	mov	r0, r3
 8002022:	f003 fb61 	bl	80056e8 <HAL_RCCEx_PeriphCLKConfig>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800202c:	f7ff fe18 	bl	8001c60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002030:	4b17      	ldr	r3, [pc, #92]	; (8002090 <HAL_UART_MspInit+0xac>)
 8002032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002034:	4a16      	ldr	r2, [pc, #88]	; (8002090 <HAL_UART_MspInit+0xac>)
 8002036:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800203a:	6593      	str	r3, [r2, #88]	; 0x58
 800203c:	4b14      	ldr	r3, [pc, #80]	; (8002090 <HAL_UART_MspInit+0xac>)
 800203e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002048:	4b11      	ldr	r3, [pc, #68]	; (8002090 <HAL_UART_MspInit+0xac>)
 800204a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204c:	4a10      	ldr	r2, [pc, #64]	; (8002090 <HAL_UART_MspInit+0xac>)
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002054:	4b0e      	ldr	r3, [pc, #56]	; (8002090 <HAL_UART_MspInit+0xac>)
 8002056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002060:	230c      	movs	r3, #12
 8002062:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002064:	2302      	movs	r3, #2
 8002066:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002068:	2300      	movs	r3, #0
 800206a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206c:	2300      	movs	r3, #0
 800206e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002070:	2307      	movs	r3, #7
 8002072:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002074:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002078:	4619      	mov	r1, r3
 800207a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800207e:	f001 ff7f 	bl	8003f80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002082:	bf00      	nop
 8002084:	3768      	adds	r7, #104	; 0x68
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40004400 	.word	0x40004400
 8002090:	40021000 	.word	0x40021000

08002094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002098:	e7fe      	b.n	8002098 <NMI_Handler+0x4>

0800209a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800209a:	b480      	push	{r7}
 800209c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800209e:	e7fe      	b.n	800209e <HardFault_Handler+0x4>

080020a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020a4:	e7fe      	b.n	80020a4 <MemManage_Handler+0x4>

080020a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020a6:	b480      	push	{r7}
 80020a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020aa:	e7fe      	b.n	80020aa <BusFault_Handler+0x4>

080020ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020b0:	e7fe      	b.n	80020b0 <UsageFault_Handler+0x4>

080020b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020b2:	b480      	push	{r7}
 80020b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020ce:	b480      	push	{r7}
 80020d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020e0:	f000 f968 	bl	80023b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020e4:	bf00      	nop
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020ec:	4802      	ldr	r0, [pc, #8]	; (80020f8 <DMA1_Channel1_IRQHandler+0x10>)
 80020ee:	f001 fdf8 	bl	8003ce2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	2000027c 	.word	0x2000027c

080020fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002100:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002104:	f002 f8d6 	bl	80042b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002108:	bf00      	nop
 800210a:	bd80      	pop	{r7, pc}

0800210c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
	return 1;
 8002110:	2301      	movs	r3, #1
}
 8002112:	4618      	mov	r0, r3
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <_kill>:

int _kill(int pid, int sig)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002126:	f005 fccd 	bl	8007ac4 <__errno>
 800212a:	4603      	mov	r3, r0
 800212c:	2216      	movs	r2, #22
 800212e:	601a      	str	r2, [r3, #0]
	return -1;
 8002130:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002134:	4618      	mov	r0, r3
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <_exit>:

void _exit (int status)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002144:	f04f 31ff 	mov.w	r1, #4294967295
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7ff ffe7 	bl	800211c <_kill>
	while (1) {}		/* Make sure we hang here */
 800214e:	e7fe      	b.n	800214e <_exit+0x12>

08002150 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]
 8002160:	e00a      	b.n	8002178 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002162:	f3af 8000 	nop.w
 8002166:	4601      	mov	r1, r0
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	1c5a      	adds	r2, r3, #1
 800216c:	60ba      	str	r2, [r7, #8]
 800216e:	b2ca      	uxtb	r2, r1
 8002170:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	3301      	adds	r3, #1
 8002176:	617b      	str	r3, [r7, #20]
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	429a      	cmp	r2, r3
 800217e:	dbf0      	blt.n	8002162 <_read+0x12>
	}

return len;
 8002180:	687b      	ldr	r3, [r7, #4]
}
 8002182:	4618      	mov	r0, r3
 8002184:	3718      	adds	r7, #24
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b086      	sub	sp, #24
 800218e:	af00      	add	r7, sp, #0
 8002190:	60f8      	str	r0, [r7, #12]
 8002192:	60b9      	str	r1, [r7, #8]
 8002194:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
 800219a:	e009      	b.n	80021b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	1c5a      	adds	r2, r3, #1
 80021a0:	60ba      	str	r2, [r7, #8]
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	3301      	adds	r3, #1
 80021ae:	617b      	str	r3, [r7, #20]
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	dbf1      	blt.n	800219c <_write+0x12>
	}
	return len;
 80021b8:	687b      	ldr	r3, [r7, #4]
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <_close>:

int _close(int file)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b083      	sub	sp, #12
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
	return -1;
 80021ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
 80021e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021ea:	605a      	str	r2, [r3, #4]
	return 0;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <_isatty>:

int _isatty(int file)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
	return 1;
 8002202:	2301      	movs	r3, #1
}
 8002204:	4618      	mov	r0, r3
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
	return 0;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
	...

0800222c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002234:	4a14      	ldr	r2, [pc, #80]	; (8002288 <_sbrk+0x5c>)
 8002236:	4b15      	ldr	r3, [pc, #84]	; (800228c <_sbrk+0x60>)
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002240:	4b13      	ldr	r3, [pc, #76]	; (8002290 <_sbrk+0x64>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d102      	bne.n	800224e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002248:	4b11      	ldr	r3, [pc, #68]	; (8002290 <_sbrk+0x64>)
 800224a:	4a12      	ldr	r2, [pc, #72]	; (8002294 <_sbrk+0x68>)
 800224c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800224e:	4b10      	ldr	r3, [pc, #64]	; (8002290 <_sbrk+0x64>)
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4413      	add	r3, r2
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	429a      	cmp	r2, r3
 800225a:	d207      	bcs.n	800226c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800225c:	f005 fc32 	bl	8007ac4 <__errno>
 8002260:	4603      	mov	r3, r0
 8002262:	220c      	movs	r2, #12
 8002264:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002266:	f04f 33ff 	mov.w	r3, #4294967295
 800226a:	e009      	b.n	8002280 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800226c:	4b08      	ldr	r3, [pc, #32]	; (8002290 <_sbrk+0x64>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002272:	4b07      	ldr	r3, [pc, #28]	; (8002290 <_sbrk+0x64>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4413      	add	r3, r2
 800227a:	4a05      	ldr	r2, [pc, #20]	; (8002290 <_sbrk+0x64>)
 800227c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800227e:	68fb      	ldr	r3, [r7, #12]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3718      	adds	r7, #24
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	20008000 	.word	0x20008000
 800228c:	00000400 	.word	0x00000400
 8002290:	200004b0 	.word	0x200004b0
 8002294:	200004c8 	.word	0x200004c8

08002298 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800229c:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <SystemInit+0x20>)
 800229e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a2:	4a05      	ldr	r2, [pc, #20]	; (80022b8 <SystemInit+0x20>)
 80022a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022ac:	bf00      	nop
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	e000ed00 	.word	0xe000ed00

080022bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80022bc:	480d      	ldr	r0, [pc, #52]	; (80022f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80022be:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022c0:	480d      	ldr	r0, [pc, #52]	; (80022f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80022c2:	490e      	ldr	r1, [pc, #56]	; (80022fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80022c4:	4a0e      	ldr	r2, [pc, #56]	; (8002300 <LoopForever+0xe>)
  movs r3, #0
 80022c6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80022c8:	e002      	b.n	80022d0 <LoopCopyDataInit>

080022ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ce:	3304      	adds	r3, #4

080022d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022d4:	d3f9      	bcc.n	80022ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022d6:	4a0b      	ldr	r2, [pc, #44]	; (8002304 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022d8:	4c0b      	ldr	r4, [pc, #44]	; (8002308 <LoopForever+0x16>)
  movs r3, #0
 80022da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022dc:	e001      	b.n	80022e2 <LoopFillZerobss>

080022de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022e0:	3204      	adds	r2, #4

080022e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022e4:	d3fb      	bcc.n	80022de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80022e6:	f7ff ffd7 	bl	8002298 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022ea:	f005 fbf1 	bl	8007ad0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022ee:	f7fe ffff 	bl	80012f0 <main>

080022f2 <LoopForever>:

LoopForever:
    b LoopForever
 80022f2:	e7fe      	b.n	80022f2 <LoopForever>
  ldr   r0, =_estack
 80022f4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80022f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022fc:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002300:	0800ae04 	.word	0x0800ae04
  ldr r2, =_sbss
 8002304:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002308:	200004c8 	.word	0x200004c8

0800230c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800230c:	e7fe      	b.n	800230c <ADC1_2_IRQHandler>

0800230e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b082      	sub	sp, #8
 8002312:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002314:	2300      	movs	r3, #0
 8002316:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002318:	2003      	movs	r0, #3
 800231a:	f001 fb7f 	bl	8003a1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800231e:	2000      	movs	r0, #0
 8002320:	f000 f80e 	bl	8002340 <HAL_InitTick>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d002      	beq.n	8002330 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	71fb      	strb	r3, [r7, #7]
 800232e:	e001      	b.n	8002334 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002330:	f7ff fc9c 	bl	8001c6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002334:	79fb      	ldrb	r3, [r7, #7]

}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002348:	2300      	movs	r3, #0
 800234a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800234c:	4b16      	ldr	r3, [pc, #88]	; (80023a8 <HAL_InitTick+0x68>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d022      	beq.n	800239a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002354:	4b15      	ldr	r3, [pc, #84]	; (80023ac <HAL_InitTick+0x6c>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	4b13      	ldr	r3, [pc, #76]	; (80023a8 <HAL_InitTick+0x68>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002360:	fbb1 f3f3 	udiv	r3, r1, r3
 8002364:	fbb2 f3f3 	udiv	r3, r2, r3
 8002368:	4618      	mov	r0, r3
 800236a:	f001 fb8a 	bl	8003a82 <HAL_SYSTICK_Config>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d10f      	bne.n	8002394 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b0f      	cmp	r3, #15
 8002378:	d809      	bhi.n	800238e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800237a:	2200      	movs	r2, #0
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	f04f 30ff 	mov.w	r0, #4294967295
 8002382:	f001 fb56 	bl	8003a32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002386:	4a0a      	ldr	r2, [pc, #40]	; (80023b0 <HAL_InitTick+0x70>)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6013      	str	r3, [r2, #0]
 800238c:	e007      	b.n	800239e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	73fb      	strb	r3, [r7, #15]
 8002392:	e004      	b.n	800239e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	73fb      	strb	r3, [r7, #15]
 8002398:	e001      	b.n	800239e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800239e:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	20000018 	.word	0x20000018
 80023ac:	20000010 	.word	0x20000010
 80023b0:	20000014 	.word	0x20000014

080023b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023b8:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <HAL_IncTick+0x1c>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <HAL_IncTick+0x20>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4413      	add	r3, r2
 80023c2:	4a03      	ldr	r2, [pc, #12]	; (80023d0 <HAL_IncTick+0x1c>)
 80023c4:	6013      	str	r3, [r2, #0]
}
 80023c6:	bf00      	nop
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	200004b4 	.word	0x200004b4
 80023d4:	20000018 	.word	0x20000018

080023d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  return uwTick;
 80023dc:	4b03      	ldr	r3, [pc, #12]	; (80023ec <HAL_GetTick+0x14>)
 80023de:	681b      	ldr	r3, [r3, #0]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	200004b4 	.word	0x200004b4

080023f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023f8:	f7ff ffee 	bl	80023d8 <HAL_GetTick>
 80023fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002408:	d004      	beq.n	8002414 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800240a:	4b09      	ldr	r3, [pc, #36]	; (8002430 <HAL_Delay+0x40>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	4413      	add	r3, r2
 8002412:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002414:	bf00      	nop
 8002416:	f7ff ffdf 	bl	80023d8 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	429a      	cmp	r2, r3
 8002424:	d8f7      	bhi.n	8002416 <HAL_Delay+0x26>
  {
  }
}
 8002426:	bf00      	nop
 8002428:	bf00      	nop
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	20000018 	.word	0x20000018

08002434 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	431a      	orrs	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	609a      	str	r2, [r3, #8]
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
 8002462:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	431a      	orrs	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	609a      	str	r2, [r3, #8]
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002490:	4618      	mov	r0, r3
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800249c:	b480      	push	{r7}
 800249e:	b087      	sub	sp, #28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
 80024a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	3360      	adds	r3, #96	; 0x60
 80024ae:	461a      	mov	r2, r3
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	4b08      	ldr	r3, [pc, #32]	; (80024e0 <LL_ADC_SetOffset+0x44>)
 80024be:	4013      	ands	r3, r2
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	430a      	orrs	r2, r1
 80024ca:	4313      	orrs	r3, r2
 80024cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80024d4:	bf00      	nop
 80024d6:	371c      	adds	r7, #28
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	03fff000 	.word	0x03fff000

080024e4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	3360      	adds	r3, #96	; 0x60
 80024f2:	461a      	mov	r2, r3
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002504:	4618      	mov	r0, r3
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002510:	b480      	push	{r7}
 8002512:	b087      	sub	sp, #28
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	3360      	adds	r3, #96	; 0x60
 8002520:	461a      	mov	r2, r3
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4413      	add	r3, r2
 8002528:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	431a      	orrs	r2, r3
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800253a:	bf00      	nop
 800253c:	371c      	adds	r7, #28
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002546:	b480      	push	{r7}
 8002548:	b087      	sub	sp, #28
 800254a:	af00      	add	r7, sp, #0
 800254c:	60f8      	str	r0, [r7, #12]
 800254e:	60b9      	str	r1, [r7, #8]
 8002550:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	3360      	adds	r3, #96	; 0x60
 8002556:	461a      	mov	r2, r3
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	4413      	add	r3, r2
 800255e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	431a      	orrs	r2, r3
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002570:	bf00      	nop
 8002572:	371c      	adds	r7, #28
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800257c:	b480      	push	{r7}
 800257e:	b087      	sub	sp, #28
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	3360      	adds	r3, #96	; 0x60
 800258c:	461a      	mov	r2, r3
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	431a      	orrs	r2, r3
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80025a6:	bf00      	nop
 80025a8:	371c      	adds	r7, #28
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b083      	sub	sp, #12
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
 80025ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	615a      	str	r2, [r3, #20]
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80025ec:	2301      	movs	r3, #1
 80025ee:	e000      	b.n	80025f2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80025fe:	b480      	push	{r7}
 8002600:	b087      	sub	sp, #28
 8002602:	af00      	add	r7, sp, #0
 8002604:	60f8      	str	r0, [r7, #12]
 8002606:	60b9      	str	r1, [r7, #8]
 8002608:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	3330      	adds	r3, #48	; 0x30
 800260e:	461a      	mov	r2, r3
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	0a1b      	lsrs	r3, r3, #8
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	f003 030c 	and.w	r3, r3, #12
 800261a:	4413      	add	r3, r2
 800261c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	f003 031f 	and.w	r3, r3, #31
 8002628:	211f      	movs	r1, #31
 800262a:	fa01 f303 	lsl.w	r3, r1, r3
 800262e:	43db      	mvns	r3, r3
 8002630:	401a      	ands	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	0e9b      	lsrs	r3, r3, #26
 8002636:	f003 011f 	and.w	r1, r3, #31
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	f003 031f 	and.w	r3, r3, #31
 8002640:	fa01 f303 	lsl.w	r3, r1, r3
 8002644:	431a      	orrs	r2, r3
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800264a:	bf00      	nop
 800264c:	371c      	adds	r7, #28
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002656:	b480      	push	{r7}
 8002658:	b087      	sub	sp, #28
 800265a:	af00      	add	r7, sp, #0
 800265c:	60f8      	str	r0, [r7, #12]
 800265e:	60b9      	str	r1, [r7, #8]
 8002660:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	3314      	adds	r3, #20
 8002666:	461a      	mov	r2, r3
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	0e5b      	lsrs	r3, r3, #25
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	f003 0304 	and.w	r3, r3, #4
 8002672:	4413      	add	r3, r2
 8002674:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	0d1b      	lsrs	r3, r3, #20
 800267e:	f003 031f 	and.w	r3, r3, #31
 8002682:	2107      	movs	r1, #7
 8002684:	fa01 f303 	lsl.w	r3, r1, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	401a      	ands	r2, r3
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	0d1b      	lsrs	r3, r3, #20
 8002690:	f003 031f 	and.w	r3, r3, #31
 8002694:	6879      	ldr	r1, [r7, #4]
 8002696:	fa01 f303 	lsl.w	r3, r1, r3
 800269a:	431a      	orrs	r2, r3
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80026a0:	bf00      	nop
 80026a2:	371c      	adds	r7, #28
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a0f      	ldr	r2, [pc, #60]	; (80026f8 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d10a      	bne.n	80026d6 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026cc:	431a      	orrs	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80026d4:	e00a      	b.n	80026ec <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026e2:	43db      	mvns	r3, r3
 80026e4:	401a      	ands	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80026ec:	bf00      	nop
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	407f0000 	.word	0x407f0000

080026fc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f003 031f 	and.w	r3, r3, #31
}
 800270c:	4618      	mov	r0, r3
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002728:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6093      	str	r3, [r2, #8]
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800274c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002750:	d101      	bne.n	8002756 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002752:	2301      	movs	r3, #1
 8002754:	e000      	b.n	8002758 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002774:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002778:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027a0:	d101      	bne.n	80027a6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80027a2:	2301      	movs	r3, #1
 80027a4:	e000      	b.n	80027a8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027c8:	f043 0201 	orr.w	r2, r3, #1
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d101      	bne.n	80027f4 <LL_ADC_IsEnabled+0x18>
 80027f0:	2301      	movs	r3, #1
 80027f2:	e000      	b.n	80027f6 <LL_ADC_IsEnabled+0x1a>
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002802:	b480      	push	{r7}
 8002804:	b083      	sub	sp, #12
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002812:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002816:	f043 0204 	orr.w	r2, r3, #4
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800282a:	b480      	push	{r7}
 800282c:	b083      	sub	sp, #12
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 0304 	and.w	r3, r3, #4
 800283a:	2b04      	cmp	r3, #4
 800283c:	d101      	bne.n	8002842 <LL_ADC_REG_IsConversionOngoing+0x18>
 800283e:	2301      	movs	r3, #1
 8002840:	e000      	b.n	8002844 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f003 0308 	and.w	r3, r3, #8
 8002860:	2b08      	cmp	r3, #8
 8002862:	d101      	bne.n	8002868 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002864:	2301      	movs	r3, #1
 8002866:	e000      	b.n	800286a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
	...

08002878 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002878:	b590      	push	{r4, r7, lr}
 800287a:	b089      	sub	sp, #36	; 0x24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002880:	2300      	movs	r3, #0
 8002882:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002884:	2300      	movs	r3, #0
 8002886:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e177      	b.n	8002b82 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289c:	2b00      	cmp	r3, #0
 800289e:	d109      	bne.n	80028b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f7ff fa07 	bl	8001cb4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff ff3f 	bl	800273c <LL_ADC_IsDeepPowerDownEnabled>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d004      	beq.n	80028ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff ff25 	bl	8002718 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff ff5a 	bl	800278c <LL_ADC_IsInternalRegulatorEnabled>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d115      	bne.n	800290a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff ff3e 	bl	8002764 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028e8:	4b9c      	ldr	r3, [pc, #624]	; (8002b5c <HAL_ADC_Init+0x2e4>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	099b      	lsrs	r3, r3, #6
 80028ee:	4a9c      	ldr	r2, [pc, #624]	; (8002b60 <HAL_ADC_Init+0x2e8>)
 80028f0:	fba2 2303 	umull	r2, r3, r2, r3
 80028f4:	099b      	lsrs	r3, r3, #6
 80028f6:	3301      	adds	r3, #1
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80028fc:	e002      	b.n	8002904 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	3b01      	subs	r3, #1
 8002902:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f9      	bne.n	80028fe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff ff3c 	bl	800278c <LL_ADC_IsInternalRegulatorEnabled>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d10d      	bne.n	8002936 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291e:	f043 0210 	orr.w	r2, r3, #16
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800292a:	f043 0201 	orr.w	r2, r3, #1
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff ff75 	bl	800282a <LL_ADC_REG_IsConversionOngoing>
 8002940:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002946:	f003 0310 	and.w	r3, r3, #16
 800294a:	2b00      	cmp	r3, #0
 800294c:	f040 8110 	bne.w	8002b70 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	2b00      	cmp	r3, #0
 8002954:	f040 810c 	bne.w	8002b70 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002960:	f043 0202 	orr.w	r2, r3, #2
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff ff35 	bl	80027dc <LL_ADC_IsEnabled>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d111      	bne.n	800299c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002978:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800297c:	f7ff ff2e 	bl	80027dc <LL_ADC_IsEnabled>
 8002980:	4604      	mov	r4, r0
 8002982:	4878      	ldr	r0, [pc, #480]	; (8002b64 <HAL_ADC_Init+0x2ec>)
 8002984:	f7ff ff2a 	bl	80027dc <LL_ADC_IsEnabled>
 8002988:	4603      	mov	r3, r0
 800298a:	4323      	orrs	r3, r4
 800298c:	2b00      	cmp	r3, #0
 800298e:	d105      	bne.n	800299c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	4619      	mov	r1, r3
 8002996:	4874      	ldr	r0, [pc, #464]	; (8002b68 <HAL_ADC_Init+0x2f0>)
 8002998:	f7ff fd4c 	bl	8002434 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	7f5b      	ldrb	r3, [r3, #29]
 80029a0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029a6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80029ac:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80029b2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029ba:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029bc:	4313      	orrs	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d106      	bne.n	80029d8 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ce:	3b01      	subs	r3, #1
 80029d0:	045b      	lsls	r3, r3, #17
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d009      	beq.n	80029f4 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ec:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	4b5c      	ldr	r3, [pc, #368]	; (8002b6c <HAL_ADC_Init+0x2f4>)
 80029fc:	4013      	ands	r3, r2
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	6812      	ldr	r2, [r2, #0]
 8002a02:	69b9      	ldr	r1, [r7, #24]
 8002a04:	430b      	orrs	r3, r1
 8002a06:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff ff01 	bl	800282a <LL_ADC_REG_IsConversionOngoing>
 8002a28:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff ff0e 	bl	8002850 <LL_ADC_INJ_IsConversionOngoing>
 8002a34:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d16d      	bne.n	8002b18 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d16a      	bne.n	8002b18 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a46:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a4e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a50:	4313      	orrs	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a5e:	f023 0302 	bic.w	r3, r3, #2
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6812      	ldr	r2, [r2, #0]
 8002a66:	69b9      	ldr	r1, [r7, #24]
 8002a68:	430b      	orrs	r3, r1
 8002a6a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d017      	beq.n	8002aa4 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	691a      	ldr	r2, [r3, #16]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002a82:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002a8c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6911      	ldr	r1, [r2, #16]
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	6812      	ldr	r2, [r2, #0]
 8002a9c:	430b      	orrs	r3, r1
 8002a9e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002aa2:	e013      	b.n	8002acc <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	691a      	ldr	r2, [r3, #16]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002ab2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6812      	ldr	r2, [r2, #0]
 8002ac0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002ac4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ac8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d118      	bne.n	8002b08 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002ae0:	f023 0304 	bic.w	r3, r3, #4
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002aec:	4311      	orrs	r1, r2
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002af2:	4311      	orrs	r1, r2
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002af8:	430a      	orrs	r2, r1
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f042 0201 	orr.w	r2, r2, #1
 8002b04:	611a      	str	r2, [r3, #16]
 8002b06:	e007      	b.n	8002b18 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	691a      	ldr	r2, [r3, #16]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 0201 	bic.w	r2, r2, #1
 8002b16:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d10c      	bne.n	8002b3a <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	f023 010f 	bic.w	r1, r3, #15
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	1e5a      	subs	r2, r3, #1
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	631a      	str	r2, [r3, #48]	; 0x30
 8002b38:	e007      	b.n	8002b4a <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 020f 	bic.w	r2, r2, #15
 8002b48:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4e:	f023 0303 	bic.w	r3, r3, #3
 8002b52:	f043 0201 	orr.w	r2, r3, #1
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b5a:	e011      	b.n	8002b80 <HAL_ADC_Init+0x308>
 8002b5c:	20000010 	.word	0x20000010
 8002b60:	053e2d63 	.word	0x053e2d63
 8002b64:	50000100 	.word	0x50000100
 8002b68:	50000300 	.word	0x50000300
 8002b6c:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b74:	f043 0210 	orr.w	r2, r3, #16
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b80:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3724      	adds	r7, #36	; 0x24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd90      	pop	{r4, r7, pc}
 8002b8a:	bf00      	nop

08002b8c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b98:	4851      	ldr	r0, [pc, #324]	; (8002ce0 <HAL_ADC_Start_DMA+0x154>)
 8002b9a:	f7ff fdaf 	bl	80026fc <LL_ADC_GetMultimode>
 8002b9e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff fe40 	bl	800282a <LL_ADC_REG_IsConversionOngoing>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f040 808f 	bne.w	8002cd0 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d101      	bne.n	8002bc0 <HAL_ADC_Start_DMA+0x34>
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	e08a      	b.n	8002cd6 <HAL_ADC_Start_DMA+0x14a>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d005      	beq.n	8002bda <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	2b05      	cmp	r3, #5
 8002bd2:	d002      	beq.n	8002bda <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	2b09      	cmp	r3, #9
 8002bd8:	d173      	bne.n	8002cc2 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 fc8e 	bl	80034fc <ADC_Enable>
 8002be0:	4603      	mov	r3, r0
 8002be2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002be4:	7dfb      	ldrb	r3, [r7, #23]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d166      	bne.n	8002cb8 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002bf2:	f023 0301 	bic.w	r3, r3, #1
 8002bf6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a38      	ldr	r2, [pc, #224]	; (8002ce4 <HAL_ADC_Start_DMA+0x158>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d002      	beq.n	8002c0e <HAL_ADC_Start_DMA+0x82>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	e001      	b.n	8002c12 <HAL_ADC_Start_DMA+0x86>
 8002c0e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	6812      	ldr	r2, [r2, #0]
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d002      	beq.n	8002c20 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d105      	bne.n	8002c2c <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c24:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d006      	beq.n	8002c46 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c3c:	f023 0206 	bic.w	r2, r3, #6
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	661a      	str	r2, [r3, #96]	; 0x60
 8002c44:	e002      	b.n	8002c4c <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c50:	4a25      	ldr	r2, [pc, #148]	; (8002ce8 <HAL_ADC_Start_DMA+0x15c>)
 8002c52:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c58:	4a24      	ldr	r2, [pc, #144]	; (8002cec <HAL_ADC_Start_DMA+0x160>)
 8002c5a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c60:	4a23      	ldr	r2, [pc, #140]	; (8002cf0 <HAL_ADC_Start_DMA+0x164>)
 8002c62:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	221c      	movs	r2, #28
 8002c6a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f042 0210 	orr.w	r2, r2, #16
 8002c82:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68da      	ldr	r2, [r3, #12]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 0201 	orr.w	r2, r2, #1
 8002c92:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	3340      	adds	r3, #64	; 0x40
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	68ba      	ldr	r2, [r7, #8]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f000 ffa2 	bl	8003bec <HAL_DMA_Start_IT>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff fda6 	bl	8002802 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002cb6:	e00d      	b.n	8002cd4 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002cc0:	e008      	b.n	8002cd4 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002cce:	e001      	b.n	8002cd4 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002cd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3718      	adds	r7, #24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	50000300 	.word	0x50000300
 8002ce4:	50000100 	.word	0x50000100
 8002ce8:	080035c1 	.word	0x080035c1
 8002cec:	08003699 	.word	0x08003699
 8002cf0:	080036b5 	.word	0x080036b5

08002cf4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b0b6      	sub	sp, #216	; 0xd8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d26:	2300      	movs	r3, #0
 8002d28:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d101      	bne.n	8002d3e <HAL_ADC_ConfigChannel+0x22>
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	e3c8      	b.n	80034d0 <HAL_ADC_ConfigChannel+0x7b4>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff fd6d 	bl	800282a <LL_ADC_REG_IsConversionOngoing>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f040 83ad 	bne.w	80034b2 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6818      	ldr	r0, [r3, #0]
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	6859      	ldr	r1, [r3, #4]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	461a      	mov	r2, r3
 8002d66:	f7ff fc4a 	bl	80025fe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff fd5b 	bl	800282a <LL_ADC_REG_IsConversionOngoing>
 8002d74:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff fd67 	bl	8002850 <LL_ADC_INJ_IsConversionOngoing>
 8002d82:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d86:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f040 81d9 	bne.w	8003142 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f040 81d4 	bne.w	8003142 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002da2:	d10f      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6818      	ldr	r0, [r3, #0]
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2200      	movs	r2, #0
 8002dae:	4619      	mov	r1, r3
 8002db0:	f7ff fc51 	bl	8002656 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff fbf8 	bl	80025b2 <LL_ADC_SetSamplingTimeCommonConfig>
 8002dc2:	e00e      	b.n	8002de2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6818      	ldr	r0, [r3, #0]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	6819      	ldr	r1, [r3, #0]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	f7ff fc40 	bl	8002656 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2100      	movs	r1, #0
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff fbe8 	bl	80025b2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	695a      	ldr	r2, [r3, #20]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	08db      	lsrs	r3, r3, #3
 8002dee:	f003 0303 	and.w	r3, r3, #3
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	2b04      	cmp	r3, #4
 8002e02:	d022      	beq.n	8002e4a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6818      	ldr	r0, [r3, #0]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	6919      	ldr	r1, [r3, #16]
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e14:	f7ff fb42 	bl	800249c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6818      	ldr	r0, [r3, #0]
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	6919      	ldr	r1, [r3, #16]
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	461a      	mov	r2, r3
 8002e26:	f7ff fb8e 	bl	8002546 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6818      	ldr	r0, [r3, #0]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	6919      	ldr	r1, [r3, #16]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	7f1b      	ldrb	r3, [r3, #28]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d102      	bne.n	8002e40 <HAL_ADC_ConfigChannel+0x124>
 8002e3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e3e:	e000      	b.n	8002e42 <HAL_ADC_ConfigChannel+0x126>
 8002e40:	2300      	movs	r3, #0
 8002e42:	461a      	mov	r2, r3
 8002e44:	f7ff fb9a 	bl	800257c <LL_ADC_SetOffsetSaturation>
 8002e48:	e17b      	b.n	8003142 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2100      	movs	r1, #0
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff fb47 	bl	80024e4 <LL_ADC_GetOffsetChannel>
 8002e56:	4603      	mov	r3, r0
 8002e58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d10a      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x15a>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2100      	movs	r1, #0
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7ff fb3c 	bl	80024e4 <LL_ADC_GetOffsetChannel>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	0e9b      	lsrs	r3, r3, #26
 8002e70:	f003 021f 	and.w	r2, r3, #31
 8002e74:	e01e      	b.n	8002eb4 <HAL_ADC_ConfigChannel+0x198>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff fb31 	bl	80024e4 <LL_ADC_GetOffsetChannel>
 8002e82:	4603      	mov	r3, r0
 8002e84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002e8c:	fa93 f3a3 	rbit	r3, r3
 8002e90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002e98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002ea4:	2320      	movs	r3, #32
 8002ea6:	e004      	b.n	8002eb2 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002ea8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002eac:	fab3 f383 	clz	r3, r3
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d105      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x1b0>
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	0e9b      	lsrs	r3, r3, #26
 8002ec6:	f003 031f 	and.w	r3, r3, #31
 8002eca:	e018      	b.n	8002efe <HAL_ADC_ConfigChannel+0x1e2>
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002ed8:	fa93 f3a3 	rbit	r3, r3
 8002edc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002ee0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ee4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002ee8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002ef0:	2320      	movs	r3, #32
 8002ef2:	e004      	b.n	8002efe <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002ef4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002ef8:	fab3 f383 	clz	r3, r3
 8002efc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d106      	bne.n	8002f10 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2200      	movs	r2, #0
 8002f08:	2100      	movs	r1, #0
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff fb00 	bl	8002510 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2101      	movs	r1, #1
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff fae4 	bl	80024e4 <LL_ADC_GetOffsetChannel>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10a      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x220>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff fad9 	bl	80024e4 <LL_ADC_GetOffsetChannel>
 8002f32:	4603      	mov	r3, r0
 8002f34:	0e9b      	lsrs	r3, r3, #26
 8002f36:	f003 021f 	and.w	r2, r3, #31
 8002f3a:	e01e      	b.n	8002f7a <HAL_ADC_ConfigChannel+0x25e>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2101      	movs	r1, #1
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7ff face 	bl	80024e4 <LL_ADC_GetOffsetChannel>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002f52:	fa93 f3a3 	rbit	r3, r3
 8002f56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002f5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002f62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002f6a:	2320      	movs	r3, #32
 8002f6c:	e004      	b.n	8002f78 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002f6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f72:	fab3 f383 	clz	r3, r3
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d105      	bne.n	8002f92 <HAL_ADC_ConfigChannel+0x276>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	0e9b      	lsrs	r3, r3, #26
 8002f8c:	f003 031f 	and.w	r3, r3, #31
 8002f90:	e018      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x2a8>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f9e:	fa93 f3a3 	rbit	r3, r3
 8002fa2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002fa6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002faa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002fae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002fb6:	2320      	movs	r3, #32
 8002fb8:	e004      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002fba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002fbe:	fab3 f383 	clz	r3, r3
 8002fc2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d106      	bne.n	8002fd6 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	2101      	movs	r1, #1
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff fa9d 	bl	8002510 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2102      	movs	r1, #2
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7ff fa81 	bl	80024e4 <LL_ADC_GetOffsetChannel>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d10a      	bne.n	8003002 <HAL_ADC_ConfigChannel+0x2e6>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2102      	movs	r1, #2
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff fa76 	bl	80024e4 <LL_ADC_GetOffsetChannel>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	0e9b      	lsrs	r3, r3, #26
 8002ffc:	f003 021f 	and.w	r2, r3, #31
 8003000:	e01e      	b.n	8003040 <HAL_ADC_ConfigChannel+0x324>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2102      	movs	r1, #2
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff fa6b 	bl	80024e4 <LL_ADC_GetOffsetChannel>
 800300e:	4603      	mov	r3, r0
 8003010:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003014:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003018:	fa93 f3a3 	rbit	r3, r3
 800301c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003020:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003024:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003028:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003030:	2320      	movs	r3, #32
 8003032:	e004      	b.n	800303e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003034:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003038:	fab3 f383 	clz	r3, r3
 800303c:	b2db      	uxtb	r3, r3
 800303e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003048:	2b00      	cmp	r3, #0
 800304a:	d105      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x33c>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	0e9b      	lsrs	r3, r3, #26
 8003052:	f003 031f 	and.w	r3, r3, #31
 8003056:	e016      	b.n	8003086 <HAL_ADC_ConfigChannel+0x36a>
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003060:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003064:	fa93 f3a3 	rbit	r3, r3
 8003068:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800306a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800306c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003070:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003074:	2b00      	cmp	r3, #0
 8003076:	d101      	bne.n	800307c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003078:	2320      	movs	r3, #32
 800307a:	e004      	b.n	8003086 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800307c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003080:	fab3 f383 	clz	r3, r3
 8003084:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003086:	429a      	cmp	r2, r3
 8003088:	d106      	bne.n	8003098 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2200      	movs	r2, #0
 8003090:	2102      	movs	r1, #2
 8003092:	4618      	mov	r0, r3
 8003094:	f7ff fa3c 	bl	8002510 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2103      	movs	r1, #3
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff fa20 	bl	80024e4 <LL_ADC_GetOffsetChannel>
 80030a4:	4603      	mov	r3, r0
 80030a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10a      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x3a8>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2103      	movs	r1, #3
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff fa15 	bl	80024e4 <LL_ADC_GetOffsetChannel>
 80030ba:	4603      	mov	r3, r0
 80030bc:	0e9b      	lsrs	r3, r3, #26
 80030be:	f003 021f 	and.w	r2, r3, #31
 80030c2:	e017      	b.n	80030f4 <HAL_ADC_ConfigChannel+0x3d8>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2103      	movs	r1, #3
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff fa0a 	bl	80024e4 <LL_ADC_GetOffsetChannel>
 80030d0:	4603      	mov	r3, r0
 80030d2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030d6:	fa93 f3a3 	rbit	r3, r3
 80030da:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80030dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030de:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80030e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80030e6:	2320      	movs	r3, #32
 80030e8:	e003      	b.n	80030f2 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80030ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030ec:	fab3 f383 	clz	r3, r3
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d105      	bne.n	800310c <HAL_ADC_ConfigChannel+0x3f0>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	0e9b      	lsrs	r3, r3, #26
 8003106:	f003 031f 	and.w	r3, r3, #31
 800310a:	e011      	b.n	8003130 <HAL_ADC_ConfigChannel+0x414>
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003112:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003114:	fa93 f3a3 	rbit	r3, r3
 8003118:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800311a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800311c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800311e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003124:	2320      	movs	r3, #32
 8003126:	e003      	b.n	8003130 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800312a:	fab3 f383 	clz	r3, r3
 800312e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003130:	429a      	cmp	r2, r3
 8003132:	d106      	bne.n	8003142 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2200      	movs	r2, #0
 800313a:	2103      	movs	r1, #3
 800313c:	4618      	mov	r0, r3
 800313e:	f7ff f9e7 	bl	8002510 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff fb48 	bl	80027dc <LL_ADC_IsEnabled>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	f040 8140 	bne.w	80033d4 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6818      	ldr	r0, [r3, #0]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	6819      	ldr	r1, [r3, #0]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	461a      	mov	r2, r3
 8003162:	f7ff faa3 	bl	80026ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	4a8f      	ldr	r2, [pc, #572]	; (80033a8 <HAL_ADC_ConfigChannel+0x68c>)
 800316c:	4293      	cmp	r3, r2
 800316e:	f040 8131 	bne.w	80033d4 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10b      	bne.n	800319a <HAL_ADC_ConfigChannel+0x47e>
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	0e9b      	lsrs	r3, r3, #26
 8003188:	3301      	adds	r3, #1
 800318a:	f003 031f 	and.w	r3, r3, #31
 800318e:	2b09      	cmp	r3, #9
 8003190:	bf94      	ite	ls
 8003192:	2301      	movls	r3, #1
 8003194:	2300      	movhi	r3, #0
 8003196:	b2db      	uxtb	r3, r3
 8003198:	e019      	b.n	80031ce <HAL_ADC_ConfigChannel+0x4b2>
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031a2:	fa93 f3a3 	rbit	r3, r3
 80031a6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80031a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031aa:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80031ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80031b2:	2320      	movs	r3, #32
 80031b4:	e003      	b.n	80031be <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80031b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031b8:	fab3 f383 	clz	r3, r3
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	3301      	adds	r3, #1
 80031c0:	f003 031f 	and.w	r3, r3, #31
 80031c4:	2b09      	cmp	r3, #9
 80031c6:	bf94      	ite	ls
 80031c8:	2301      	movls	r3, #1
 80031ca:	2300      	movhi	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d079      	beq.n	80032c6 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d107      	bne.n	80031ee <HAL_ADC_ConfigChannel+0x4d2>
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	0e9b      	lsrs	r3, r3, #26
 80031e4:	3301      	adds	r3, #1
 80031e6:	069b      	lsls	r3, r3, #26
 80031e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031ec:	e015      	b.n	800321a <HAL_ADC_ConfigChannel+0x4fe>
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031f6:	fa93 f3a3 	rbit	r3, r3
 80031fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80031fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031fe:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003200:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003206:	2320      	movs	r3, #32
 8003208:	e003      	b.n	8003212 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800320a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800320c:	fab3 f383 	clz	r3, r3
 8003210:	b2db      	uxtb	r3, r3
 8003212:	3301      	adds	r3, #1
 8003214:	069b      	lsls	r3, r3, #26
 8003216:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003222:	2b00      	cmp	r3, #0
 8003224:	d109      	bne.n	800323a <HAL_ADC_ConfigChannel+0x51e>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	0e9b      	lsrs	r3, r3, #26
 800322c:	3301      	adds	r3, #1
 800322e:	f003 031f 	and.w	r3, r3, #31
 8003232:	2101      	movs	r1, #1
 8003234:	fa01 f303 	lsl.w	r3, r1, r3
 8003238:	e017      	b.n	800326a <HAL_ADC_ConfigChannel+0x54e>
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003242:	fa93 f3a3 	rbit	r3, r3
 8003246:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800324a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800324c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003252:	2320      	movs	r3, #32
 8003254:	e003      	b.n	800325e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003258:	fab3 f383 	clz	r3, r3
 800325c:	b2db      	uxtb	r3, r3
 800325e:	3301      	adds	r3, #1
 8003260:	f003 031f 	and.w	r3, r3, #31
 8003264:	2101      	movs	r1, #1
 8003266:	fa01 f303 	lsl.w	r3, r1, r3
 800326a:	ea42 0103 	orr.w	r1, r2, r3
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10a      	bne.n	8003290 <HAL_ADC_ConfigChannel+0x574>
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	0e9b      	lsrs	r3, r3, #26
 8003280:	3301      	adds	r3, #1
 8003282:	f003 021f 	and.w	r2, r3, #31
 8003286:	4613      	mov	r3, r2
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	4413      	add	r3, r2
 800328c:	051b      	lsls	r3, r3, #20
 800328e:	e018      	b.n	80032c2 <HAL_ADC_ConfigChannel+0x5a6>
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003298:	fa93 f3a3 	rbit	r3, r3
 800329c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800329e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80032a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d101      	bne.n	80032ac <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80032a8:	2320      	movs	r3, #32
 80032aa:	e003      	b.n	80032b4 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80032ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032ae:	fab3 f383 	clz	r3, r3
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	3301      	adds	r3, #1
 80032b6:	f003 021f 	and.w	r2, r3, #31
 80032ba:	4613      	mov	r3, r2
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	4413      	add	r3, r2
 80032c0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032c2:	430b      	orrs	r3, r1
 80032c4:	e081      	b.n	80033ca <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d107      	bne.n	80032e2 <HAL_ADC_ConfigChannel+0x5c6>
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	0e9b      	lsrs	r3, r3, #26
 80032d8:	3301      	adds	r3, #1
 80032da:	069b      	lsls	r3, r3, #26
 80032dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032e0:	e015      	b.n	800330e <HAL_ADC_ConfigChannel+0x5f2>
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ea:	fa93 f3a3 	rbit	r3, r3
 80032ee:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80032f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80032f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80032fa:	2320      	movs	r3, #32
 80032fc:	e003      	b.n	8003306 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80032fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003300:	fab3 f383 	clz	r3, r3
 8003304:	b2db      	uxtb	r3, r3
 8003306:	3301      	adds	r3, #1
 8003308:	069b      	lsls	r3, r3, #26
 800330a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003316:	2b00      	cmp	r3, #0
 8003318:	d109      	bne.n	800332e <HAL_ADC_ConfigChannel+0x612>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	0e9b      	lsrs	r3, r3, #26
 8003320:	3301      	adds	r3, #1
 8003322:	f003 031f 	and.w	r3, r3, #31
 8003326:	2101      	movs	r1, #1
 8003328:	fa01 f303 	lsl.w	r3, r1, r3
 800332c:	e017      	b.n	800335e <HAL_ADC_ConfigChannel+0x642>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003334:	6a3b      	ldr	r3, [r7, #32]
 8003336:	fa93 f3a3 	rbit	r3, r3
 800333a:	61fb      	str	r3, [r7, #28]
  return result;
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003346:	2320      	movs	r3, #32
 8003348:	e003      	b.n	8003352 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	fab3 f383 	clz	r3, r3
 8003350:	b2db      	uxtb	r3, r3
 8003352:	3301      	adds	r3, #1
 8003354:	f003 031f 	and.w	r3, r3, #31
 8003358:	2101      	movs	r1, #1
 800335a:	fa01 f303 	lsl.w	r3, r1, r3
 800335e:	ea42 0103 	orr.w	r1, r2, r3
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10d      	bne.n	800338a <HAL_ADC_ConfigChannel+0x66e>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	0e9b      	lsrs	r3, r3, #26
 8003374:	3301      	adds	r3, #1
 8003376:	f003 021f 	and.w	r2, r3, #31
 800337a:	4613      	mov	r3, r2
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	4413      	add	r3, r2
 8003380:	3b1e      	subs	r3, #30
 8003382:	051b      	lsls	r3, r3, #20
 8003384:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003388:	e01e      	b.n	80033c8 <HAL_ADC_ConfigChannel+0x6ac>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	fa93 f3a3 	rbit	r3, r3
 8003396:	613b      	str	r3, [r7, #16]
  return result;
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d104      	bne.n	80033ac <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80033a2:	2320      	movs	r3, #32
 80033a4:	e006      	b.n	80033b4 <HAL_ADC_ConfigChannel+0x698>
 80033a6:	bf00      	nop
 80033a8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	fab3 f383 	clz	r3, r3
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	3301      	adds	r3, #1
 80033b6:	f003 021f 	and.w	r2, r3, #31
 80033ba:	4613      	mov	r3, r2
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	4413      	add	r3, r2
 80033c0:	3b1e      	subs	r3, #30
 80033c2:	051b      	lsls	r3, r3, #20
 80033c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033c8:	430b      	orrs	r3, r1
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	6892      	ldr	r2, [r2, #8]
 80033ce:	4619      	mov	r1, r3
 80033d0:	f7ff f941 	bl	8002656 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	4b3f      	ldr	r3, [pc, #252]	; (80034d8 <HAL_ADC_ConfigChannel+0x7bc>)
 80033da:	4013      	ands	r3, r2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d071      	beq.n	80034c4 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033e0:	483e      	ldr	r0, [pc, #248]	; (80034dc <HAL_ADC_ConfigChannel+0x7c0>)
 80033e2:	f7ff f84d 	bl	8002480 <LL_ADC_GetCommonPathInternalCh>
 80033e6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a3c      	ldr	r2, [pc, #240]	; (80034e0 <HAL_ADC_ConfigChannel+0x7c4>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d004      	beq.n	80033fe <HAL_ADC_ConfigChannel+0x6e2>
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a3a      	ldr	r2, [pc, #232]	; (80034e4 <HAL_ADC_ConfigChannel+0x7c8>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d127      	bne.n	800344e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80033fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003402:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d121      	bne.n	800344e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003412:	d157      	bne.n	80034c4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003414:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003418:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800341c:	4619      	mov	r1, r3
 800341e:	482f      	ldr	r0, [pc, #188]	; (80034dc <HAL_ADC_ConfigChannel+0x7c0>)
 8003420:	f7ff f81b 	bl	800245a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003424:	4b30      	ldr	r3, [pc, #192]	; (80034e8 <HAL_ADC_ConfigChannel+0x7cc>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	099b      	lsrs	r3, r3, #6
 800342a:	4a30      	ldr	r2, [pc, #192]	; (80034ec <HAL_ADC_ConfigChannel+0x7d0>)
 800342c:	fba2 2303 	umull	r2, r3, r2, r3
 8003430:	099b      	lsrs	r3, r3, #6
 8003432:	1c5a      	adds	r2, r3, #1
 8003434:	4613      	mov	r3, r2
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	4413      	add	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800343e:	e002      	b.n	8003446 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	3b01      	subs	r3, #1
 8003444:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1f9      	bne.n	8003440 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800344c:	e03a      	b.n	80034c4 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a27      	ldr	r2, [pc, #156]	; (80034f0 <HAL_ADC_ConfigChannel+0x7d4>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d113      	bne.n	8003480 <HAL_ADC_ConfigChannel+0x764>
 8003458:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800345c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d10d      	bne.n	8003480 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a22      	ldr	r2, [pc, #136]	; (80034f4 <HAL_ADC_ConfigChannel+0x7d8>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d02a      	beq.n	80034c4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800346e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003472:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003476:	4619      	mov	r1, r3
 8003478:	4818      	ldr	r0, [pc, #96]	; (80034dc <HAL_ADC_ConfigChannel+0x7c0>)
 800347a:	f7fe ffee 	bl	800245a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800347e:	e021      	b.n	80034c4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a1c      	ldr	r2, [pc, #112]	; (80034f8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d11c      	bne.n	80034c4 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800348a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800348e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d116      	bne.n	80034c4 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a16      	ldr	r2, [pc, #88]	; (80034f4 <HAL_ADC_ConfigChannel+0x7d8>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d011      	beq.n	80034c4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034a8:	4619      	mov	r1, r3
 80034aa:	480c      	ldr	r0, [pc, #48]	; (80034dc <HAL_ADC_ConfigChannel+0x7c0>)
 80034ac:	f7fe ffd5 	bl	800245a <LL_ADC_SetCommonPathInternalCh>
 80034b0:	e008      	b.n	80034c4 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b6:	f043 0220 	orr.w	r2, r3, #32
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80034cc:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	37d8      	adds	r7, #216	; 0xd8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	80080000 	.word	0x80080000
 80034dc:	50000300 	.word	0x50000300
 80034e0:	c3210000 	.word	0xc3210000
 80034e4:	90c00010 	.word	0x90c00010
 80034e8:	20000010 	.word	0x20000010
 80034ec:	053e2d63 	.word	0x053e2d63
 80034f0:	c7520000 	.word	0xc7520000
 80034f4:	50000100 	.word	0x50000100
 80034f8:	cb840000 	.word	0xcb840000

080034fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff f967 	bl	80027dc <LL_ADC_IsEnabled>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d14d      	bne.n	80035b0 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689a      	ldr	r2, [r3, #8]
 800351a:	4b28      	ldr	r3, [pc, #160]	; (80035bc <ADC_Enable+0xc0>)
 800351c:	4013      	ands	r3, r2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00d      	beq.n	800353e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003526:	f043 0210 	orr.w	r2, r3, #16
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003532:	f043 0201 	orr.w	r2, r3, #1
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e039      	b.n	80035b2 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff f936 	bl	80027b4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003548:	f7fe ff46 	bl	80023d8 <HAL_GetTick>
 800354c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800354e:	e028      	b.n	80035a2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff f941 	bl	80027dc <LL_ADC_IsEnabled>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d104      	bne.n	800356a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff f925 	bl	80027b4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800356a:	f7fe ff35 	bl	80023d8 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d914      	bls.n	80035a2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b01      	cmp	r3, #1
 8003584:	d00d      	beq.n	80035a2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800358a:	f043 0210 	orr.w	r2, r3, #16
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003596:	f043 0201 	orr.w	r2, r3, #1
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e007      	b.n	80035b2 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d1cf      	bne.n	8003550 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	8000003f 	.word	0x8000003f

080035c0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035cc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d14b      	bne.n	8003672 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0308 	and.w	r3, r3, #8
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d021      	beq.n	8003638 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fe ffed 	bl	80025d8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d032      	beq.n	800366a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d12b      	bne.n	800366a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003616:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003622:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d11f      	bne.n	800366a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800362e:	f043 0201 	orr.w	r2, r3, #1
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	65da      	str	r2, [r3, #92]	; 0x5c
 8003636:	e018      	b.n	800366a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d111      	bne.n	800366a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800364a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003656:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d105      	bne.n	800366a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003662:	f043 0201 	orr.w	r2, r3, #1
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f7fe f9d4 	bl	8001a18 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003670:	e00e      	b.n	8003690 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003676:	f003 0310 	and.w	r3, r3, #16
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f7ff fb42 	bl	8002d08 <HAL_ADC_ErrorCallback>
}
 8003684:	e004      	b.n	8003690 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	4798      	blx	r3
}
 8003690:	bf00      	nop
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f7ff fb24 	bl	8002cf4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80036ac:	bf00      	nop
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036d2:	f043 0204 	orr.w	r2, r3, #4
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f7ff fb14 	bl	8002d08 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80036e0:	bf00      	nop
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <LL_ADC_IsEnabled>:
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d101      	bne.n	8003700 <LL_ADC_IsEnabled+0x18>
 80036fc:	2301      	movs	r3, #1
 80036fe:	e000      	b.n	8003702 <LL_ADC_IsEnabled+0x1a>
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <LL_ADC_REG_IsConversionOngoing>:
{
 800370e:	b480      	push	{r7}
 8003710:	b083      	sub	sp, #12
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 0304 	and.w	r3, r3, #4
 800371e:	2b04      	cmp	r3, #4
 8003720:	d101      	bne.n	8003726 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003722:	2301      	movs	r3, #1
 8003724:	e000      	b.n	8003728 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003734:	b590      	push	{r4, r7, lr}
 8003736:	b0a1      	sub	sp, #132	; 0x84
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800373e:	2300      	movs	r3, #0
 8003740:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800374a:	2b01      	cmp	r3, #1
 800374c:	d101      	bne.n	8003752 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800374e:	2302      	movs	r3, #2
 8003750:	e08b      	b.n	800386a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800375a:	2300      	movs	r3, #0
 800375c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800375e:	2300      	movs	r3, #0
 8003760:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800376a:	d102      	bne.n	8003772 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800376c:	4b41      	ldr	r3, [pc, #260]	; (8003874 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800376e:	60bb      	str	r3, [r7, #8]
 8003770:	e001      	b.n	8003776 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003772:	2300      	movs	r3, #0
 8003774:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10b      	bne.n	8003794 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003780:	f043 0220 	orr.w	r2, r3, #32
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e06a      	b.n	800386a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	4618      	mov	r0, r3
 8003798:	f7ff ffb9 	bl	800370e <LL_ADC_REG_IsConversionOngoing>
 800379c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7ff ffb3 	bl	800370e <LL_ADC_REG_IsConversionOngoing>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d14c      	bne.n	8003848 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80037ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d149      	bne.n	8003848 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80037b4:	4b30      	ldr	r3, [pc, #192]	; (8003878 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80037b6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d028      	beq.n	8003812 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80037c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	6859      	ldr	r1, [r3, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037d2:	035b      	lsls	r3, r3, #13
 80037d4:	430b      	orrs	r3, r1
 80037d6:	431a      	orrs	r2, r3
 80037d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037da:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037dc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80037e0:	f7ff ff82 	bl	80036e8 <LL_ADC_IsEnabled>
 80037e4:	4604      	mov	r4, r0
 80037e6:	4823      	ldr	r0, [pc, #140]	; (8003874 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80037e8:	f7ff ff7e 	bl	80036e8 <LL_ADC_IsEnabled>
 80037ec:	4603      	mov	r3, r0
 80037ee:	4323      	orrs	r3, r4
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d133      	bne.n	800385c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80037f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80037fc:	f023 030f 	bic.w	r3, r3, #15
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	6811      	ldr	r1, [r2, #0]
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	6892      	ldr	r2, [r2, #8]
 8003808:	430a      	orrs	r2, r1
 800380a:	431a      	orrs	r2, r3
 800380c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800380e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003810:	e024      	b.n	800385c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003812:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800381a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800381c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800381e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003822:	f7ff ff61 	bl	80036e8 <LL_ADC_IsEnabled>
 8003826:	4604      	mov	r4, r0
 8003828:	4812      	ldr	r0, [pc, #72]	; (8003874 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800382a:	f7ff ff5d 	bl	80036e8 <LL_ADC_IsEnabled>
 800382e:	4603      	mov	r3, r0
 8003830:	4323      	orrs	r3, r4
 8003832:	2b00      	cmp	r3, #0
 8003834:	d112      	bne.n	800385c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003836:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800383e:	f023 030f 	bic.w	r3, r3, #15
 8003842:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003844:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003846:	e009      	b.n	800385c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384c:	f043 0220 	orr.w	r2, r3, #32
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800385a:	e000      	b.n	800385e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800385c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003866:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800386a:	4618      	mov	r0, r3
 800386c:	3784      	adds	r7, #132	; 0x84
 800386e:	46bd      	mov	sp, r7
 8003870:	bd90      	pop	{r4, r7, pc}
 8003872:	bf00      	nop
 8003874:	50000100 	.word	0x50000100
 8003878:	50000300 	.word	0x50000300

0800387c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800388c:	4b0c      	ldr	r3, [pc, #48]	; (80038c0 <__NVIC_SetPriorityGrouping+0x44>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003898:	4013      	ands	r3, r2
 800389a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038ae:	4a04      	ldr	r2, [pc, #16]	; (80038c0 <__NVIC_SetPriorityGrouping+0x44>)
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	60d3      	str	r3, [r2, #12]
}
 80038b4:	bf00      	nop
 80038b6:	3714      	adds	r7, #20
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	e000ed00 	.word	0xe000ed00

080038c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038c8:	4b04      	ldr	r3, [pc, #16]	; (80038dc <__NVIC_GetPriorityGrouping+0x18>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	0a1b      	lsrs	r3, r3, #8
 80038ce:	f003 0307 	and.w	r3, r3, #7
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	e000ed00 	.word	0xe000ed00

080038e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	4603      	mov	r3, r0
 80038e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	db0b      	blt.n	800390a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038f2:	79fb      	ldrb	r3, [r7, #7]
 80038f4:	f003 021f 	and.w	r2, r3, #31
 80038f8:	4907      	ldr	r1, [pc, #28]	; (8003918 <__NVIC_EnableIRQ+0x38>)
 80038fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fe:	095b      	lsrs	r3, r3, #5
 8003900:	2001      	movs	r0, #1
 8003902:	fa00 f202 	lsl.w	r2, r0, r2
 8003906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800390a:	bf00      	nop
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	e000e100 	.word	0xe000e100

0800391c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	4603      	mov	r3, r0
 8003924:	6039      	str	r1, [r7, #0]
 8003926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392c:	2b00      	cmp	r3, #0
 800392e:	db0a      	blt.n	8003946 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	b2da      	uxtb	r2, r3
 8003934:	490c      	ldr	r1, [pc, #48]	; (8003968 <__NVIC_SetPriority+0x4c>)
 8003936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393a:	0112      	lsls	r2, r2, #4
 800393c:	b2d2      	uxtb	r2, r2
 800393e:	440b      	add	r3, r1
 8003940:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003944:	e00a      	b.n	800395c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	b2da      	uxtb	r2, r3
 800394a:	4908      	ldr	r1, [pc, #32]	; (800396c <__NVIC_SetPriority+0x50>)
 800394c:	79fb      	ldrb	r3, [r7, #7]
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	3b04      	subs	r3, #4
 8003954:	0112      	lsls	r2, r2, #4
 8003956:	b2d2      	uxtb	r2, r2
 8003958:	440b      	add	r3, r1
 800395a:	761a      	strb	r2, [r3, #24]
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	e000e100 	.word	0xe000e100
 800396c:	e000ed00 	.word	0xe000ed00

08003970 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003970:	b480      	push	{r7}
 8003972:	b089      	sub	sp, #36	; 0x24
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	f1c3 0307 	rsb	r3, r3, #7
 800398a:	2b04      	cmp	r3, #4
 800398c:	bf28      	it	cs
 800398e:	2304      	movcs	r3, #4
 8003990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	3304      	adds	r3, #4
 8003996:	2b06      	cmp	r3, #6
 8003998:	d902      	bls.n	80039a0 <NVIC_EncodePriority+0x30>
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	3b03      	subs	r3, #3
 800399e:	e000      	b.n	80039a2 <NVIC_EncodePriority+0x32>
 80039a0:	2300      	movs	r3, #0
 80039a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039a4:	f04f 32ff 	mov.w	r2, #4294967295
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	43da      	mvns	r2, r3
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	401a      	ands	r2, r3
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039b8:	f04f 31ff 	mov.w	r1, #4294967295
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	fa01 f303 	lsl.w	r3, r1, r3
 80039c2:	43d9      	mvns	r1, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039c8:	4313      	orrs	r3, r2
         );
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3724      	adds	r7, #36	; 0x24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
	...

080039d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3b01      	subs	r3, #1
 80039e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039e8:	d301      	bcc.n	80039ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039ea:	2301      	movs	r3, #1
 80039ec:	e00f      	b.n	8003a0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039ee:	4a0a      	ldr	r2, [pc, #40]	; (8003a18 <SysTick_Config+0x40>)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039f6:	210f      	movs	r1, #15
 80039f8:	f04f 30ff 	mov.w	r0, #4294967295
 80039fc:	f7ff ff8e 	bl	800391c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a00:	4b05      	ldr	r3, [pc, #20]	; (8003a18 <SysTick_Config+0x40>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a06:	4b04      	ldr	r3, [pc, #16]	; (8003a18 <SysTick_Config+0x40>)
 8003a08:	2207      	movs	r2, #7
 8003a0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	e000e010 	.word	0xe000e010

08003a1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7ff ff29 	bl	800387c <__NVIC_SetPriorityGrouping>
}
 8003a2a:	bf00      	nop
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b086      	sub	sp, #24
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	4603      	mov	r3, r0
 8003a3a:	60b9      	str	r1, [r7, #8]
 8003a3c:	607a      	str	r2, [r7, #4]
 8003a3e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a40:	f7ff ff40 	bl	80038c4 <__NVIC_GetPriorityGrouping>
 8003a44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	68b9      	ldr	r1, [r7, #8]
 8003a4a:	6978      	ldr	r0, [r7, #20]
 8003a4c:	f7ff ff90 	bl	8003970 <NVIC_EncodePriority>
 8003a50:	4602      	mov	r2, r0
 8003a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a56:	4611      	mov	r1, r2
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7ff ff5f 	bl	800391c <__NVIC_SetPriority>
}
 8003a5e:	bf00      	nop
 8003a60:	3718      	adds	r7, #24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b082      	sub	sp, #8
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7ff ff33 	bl	80038e0 <__NVIC_EnableIRQ>
}
 8003a7a:	bf00      	nop
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b082      	sub	sp, #8
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7ff ffa4 	bl	80039d8 <SysTick_Config>
 8003a90:	4603      	mov	r3, r0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
	...

08003a9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e08d      	b.n	8003bca <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	4b47      	ldr	r3, [pc, #284]	; (8003bd4 <HAL_DMA_Init+0x138>)
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d80f      	bhi.n	8003ada <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	4b45      	ldr	r3, [pc, #276]	; (8003bd8 <HAL_DMA_Init+0x13c>)
 8003ac2:	4413      	add	r3, r2
 8003ac4:	4a45      	ldr	r2, [pc, #276]	; (8003bdc <HAL_DMA_Init+0x140>)
 8003ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aca:	091b      	lsrs	r3, r3, #4
 8003acc:	009a      	lsls	r2, r3, #2
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a42      	ldr	r2, [pc, #264]	; (8003be0 <HAL_DMA_Init+0x144>)
 8003ad6:	641a      	str	r2, [r3, #64]	; 0x40
 8003ad8:	e00e      	b.n	8003af8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	4b40      	ldr	r3, [pc, #256]	; (8003be4 <HAL_DMA_Init+0x148>)
 8003ae2:	4413      	add	r3, r2
 8003ae4:	4a3d      	ldr	r2, [pc, #244]	; (8003bdc <HAL_DMA_Init+0x140>)
 8003ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aea:	091b      	lsrs	r3, r3, #4
 8003aec:	009a      	lsls	r2, r3, #2
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a3c      	ldr	r2, [pc, #240]	; (8003be8 <HAL_DMA_Init+0x14c>)
 8003af6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2202      	movs	r2, #2
 8003afc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b12:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003b1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f9b6 	bl	8003ebc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b58:	d102      	bne.n	8003b60 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b68:	b2d2      	uxtb	r2, r2
 8003b6a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b74:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d010      	beq.n	8003ba0 <HAL_DMA_Init+0x104>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2b04      	cmp	r3, #4
 8003b84:	d80c      	bhi.n	8003ba0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f9d6 	bl	8003f38 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b9c:	605a      	str	r2, [r3, #4]
 8003b9e:	e008      	b.n	8003bb2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40020407 	.word	0x40020407
 8003bd8:	bffdfff8 	.word	0xbffdfff8
 8003bdc:	cccccccd 	.word	0xcccccccd
 8003be0:	40020000 	.word	0x40020000
 8003be4:	bffdfbf8 	.word	0xbffdfbf8
 8003be8:	40020400 	.word	0x40020400

08003bec <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
 8003bf8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d101      	bne.n	8003c0c <HAL_DMA_Start_IT+0x20>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	e066      	b.n	8003cda <HAL_DMA_Start_IT+0xee>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d155      	bne.n	8003ccc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 0201 	bic.w	r2, r2, #1
 8003c3c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	68b9      	ldr	r1, [r7, #8]
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 f8fb 	bl	8003e40 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d008      	beq.n	8003c64 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f042 020e 	orr.w	r2, r2, #14
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	e00f      	b.n	8003c84 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0204 	bic.w	r2, r2, #4
 8003c72:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f042 020a 	orr.w	r2, r2, #10
 8003c82:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d007      	beq.n	8003ca2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ca0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d007      	beq.n	8003cba <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cb8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f042 0201 	orr.w	r2, r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	e005      	b.n	8003cd8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003cd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b084      	sub	sp, #16
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfe:	f003 031f 	and.w	r3, r3, #31
 8003d02:	2204      	movs	r2, #4
 8003d04:	409a      	lsls	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d026      	beq.n	8003d5c <HAL_DMA_IRQHandler+0x7a>
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d021      	beq.n	8003d5c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0320 	and.w	r3, r3, #32
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d107      	bne.n	8003d36 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 0204 	bic.w	r2, r2, #4
 8003d34:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3a:	f003 021f 	and.w	r2, r3, #31
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	2104      	movs	r1, #4
 8003d44:	fa01 f202 	lsl.w	r2, r1, r2
 8003d48:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d071      	beq.n	8003e36 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003d5a:	e06c      	b.n	8003e36 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d60:	f003 031f 	and.w	r3, r3, #31
 8003d64:	2202      	movs	r2, #2
 8003d66:	409a      	lsls	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d02e      	beq.n	8003dce <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d029      	beq.n	8003dce <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0320 	and.w	r3, r3, #32
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10b      	bne.n	8003da0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 020a 	bic.w	r2, r2, #10
 8003d96:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da4:	f003 021f 	and.w	r2, r3, #31
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dac:	2102      	movs	r1, #2
 8003dae:	fa01 f202 	lsl.w	r2, r1, r2
 8003db2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d038      	beq.n	8003e36 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003dcc:	e033      	b.n	8003e36 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd2:	f003 031f 	and.w	r3, r3, #31
 8003dd6:	2208      	movs	r2, #8
 8003dd8:	409a      	lsls	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d02a      	beq.n	8003e38 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	f003 0308 	and.w	r3, r3, #8
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d025      	beq.n	8003e38 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 020e 	bic.w	r2, r2, #14
 8003dfa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e00:	f003 021f 	and.w	r2, r3, #31
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e08:	2101      	movs	r1, #1
 8003e0a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e0e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d004      	beq.n	8003e38 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003e36:	bf00      	nop
 8003e38:	bf00      	nop
}
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
 8003e4c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e56:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d004      	beq.n	8003e6a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003e68:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6e:	f003 021f 	and.w	r2, r3, #31
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	2101      	movs	r1, #1
 8003e78:	fa01 f202 	lsl.w	r2, r1, r2
 8003e7c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	2b10      	cmp	r3, #16
 8003e8c:	d108      	bne.n	8003ea0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e9e:	e007      	b.n	8003eb0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	60da      	str	r2, [r3, #12]
}
 8003eb0:	bf00      	nop
 8003eb2:	3714      	adds	r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b087      	sub	sp, #28
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	461a      	mov	r2, r3
 8003eca:	4b16      	ldr	r3, [pc, #88]	; (8003f24 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d802      	bhi.n	8003ed6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003ed0:	4b15      	ldr	r3, [pc, #84]	; (8003f28 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003ed2:	617b      	str	r3, [r7, #20]
 8003ed4:	e001      	b.n	8003eda <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003ed6:	4b15      	ldr	r3, [pc, #84]	; (8003f2c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003ed8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	3b08      	subs	r3, #8
 8003ee6:	4a12      	ldr	r2, [pc, #72]	; (8003f30 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8003eec:	091b      	lsrs	r3, r3, #4
 8003eee:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef4:	089b      	lsrs	r3, r3, #2
 8003ef6:	009a      	lsls	r2, r3, #2
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	4413      	add	r3, r2
 8003efc:	461a      	mov	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a0b      	ldr	r2, [pc, #44]	; (8003f34 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003f06:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f003 031f 	and.w	r3, r3, #31
 8003f0e:	2201      	movs	r2, #1
 8003f10:	409a      	lsls	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003f16:	bf00      	nop
 8003f18:	371c      	adds	r7, #28
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	40020407 	.word	0x40020407
 8003f28:	40020800 	.word	0x40020800
 8003f2c:	40020820 	.word	0x40020820
 8003f30:	cccccccd 	.word	0xcccccccd
 8003f34:	40020880 	.word	0x40020880

08003f38 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	4b0b      	ldr	r3, [pc, #44]	; (8003f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003f4c:	4413      	add	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	461a      	mov	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a08      	ldr	r2, [pc, #32]	; (8003f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003f5a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	f003 031f 	and.w	r3, r3, #31
 8003f64:	2201      	movs	r2, #1
 8003f66:	409a      	lsls	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003f6c:	bf00      	nop
 8003f6e:	3714      	adds	r7, #20
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr
 8003f78:	1000823f 	.word	0x1000823f
 8003f7c:	40020940 	.word	0x40020940

08003f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003f8e:	e15a      	b.n	8004246 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	2101      	movs	r1, #1
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	fa01 f303 	lsl.w	r3, r1, r3
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 814c 	beq.w	8004240 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f003 0303 	and.w	r3, r3, #3
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d005      	beq.n	8003fc0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d130      	bne.n	8004022 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	2203      	movs	r2, #3
 8003fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd0:	43db      	mvns	r3, r3
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	68da      	ldr	r2, [r3, #12]
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	005b      	lsls	r3, r3, #1
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffe:	43db      	mvns	r3, r3
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	4013      	ands	r3, r2
 8004004:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	091b      	lsrs	r3, r3, #4
 800400c:	f003 0201 	and.w	r2, r3, #1
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	fa02 f303 	lsl.w	r3, r2, r3
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	4313      	orrs	r3, r2
 800401a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	2b03      	cmp	r3, #3
 800402c:	d017      	beq.n	800405e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	2203      	movs	r2, #3
 800403a:	fa02 f303 	lsl.w	r3, r2, r3
 800403e:	43db      	mvns	r3, r3
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	4013      	ands	r3, r2
 8004044:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	689a      	ldr	r2, [r3, #8]
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	fa02 f303 	lsl.w	r3, r2, r3
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	4313      	orrs	r3, r2
 8004056:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f003 0303 	and.w	r3, r3, #3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d123      	bne.n	80040b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	08da      	lsrs	r2, r3, #3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	3208      	adds	r2, #8
 8004072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004076:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	f003 0307 	and.w	r3, r3, #7
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	220f      	movs	r2, #15
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	43db      	mvns	r3, r3
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	4013      	ands	r3, r2
 800408c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	691a      	ldr	r2, [r3, #16]
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	fa02 f303 	lsl.w	r3, r2, r3
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	08da      	lsrs	r2, r3, #3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3208      	adds	r2, #8
 80040ac:	6939      	ldr	r1, [r7, #16]
 80040ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	005b      	lsls	r3, r3, #1
 80040bc:	2203      	movs	r2, #3
 80040be:	fa02 f303 	lsl.w	r3, r2, r3
 80040c2:	43db      	mvns	r3, r3
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	4013      	ands	r3, r2
 80040c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f003 0203 	and.w	r2, r3, #3
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	fa02 f303 	lsl.w	r3, r2, r3
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	4313      	orrs	r3, r2
 80040de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 80a6 	beq.w	8004240 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040f4:	4b5b      	ldr	r3, [pc, #364]	; (8004264 <HAL_GPIO_Init+0x2e4>)
 80040f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040f8:	4a5a      	ldr	r2, [pc, #360]	; (8004264 <HAL_GPIO_Init+0x2e4>)
 80040fa:	f043 0301 	orr.w	r3, r3, #1
 80040fe:	6613      	str	r3, [r2, #96]	; 0x60
 8004100:	4b58      	ldr	r3, [pc, #352]	; (8004264 <HAL_GPIO_Init+0x2e4>)
 8004102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	60bb      	str	r3, [r7, #8]
 800410a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800410c:	4a56      	ldr	r2, [pc, #344]	; (8004268 <HAL_GPIO_Init+0x2e8>)
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	089b      	lsrs	r3, r3, #2
 8004112:	3302      	adds	r3, #2
 8004114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004118:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f003 0303 	and.w	r3, r3, #3
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	220f      	movs	r2, #15
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	43db      	mvns	r3, r3
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	4013      	ands	r3, r2
 800412e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004136:	d01f      	beq.n	8004178 <HAL_GPIO_Init+0x1f8>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a4c      	ldr	r2, [pc, #304]	; (800426c <HAL_GPIO_Init+0x2ec>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d019      	beq.n	8004174 <HAL_GPIO_Init+0x1f4>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a4b      	ldr	r2, [pc, #300]	; (8004270 <HAL_GPIO_Init+0x2f0>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d013      	beq.n	8004170 <HAL_GPIO_Init+0x1f0>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a4a      	ldr	r2, [pc, #296]	; (8004274 <HAL_GPIO_Init+0x2f4>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d00d      	beq.n	800416c <HAL_GPIO_Init+0x1ec>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a49      	ldr	r2, [pc, #292]	; (8004278 <HAL_GPIO_Init+0x2f8>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d007      	beq.n	8004168 <HAL_GPIO_Init+0x1e8>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a48      	ldr	r2, [pc, #288]	; (800427c <HAL_GPIO_Init+0x2fc>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d101      	bne.n	8004164 <HAL_GPIO_Init+0x1e4>
 8004160:	2305      	movs	r3, #5
 8004162:	e00a      	b.n	800417a <HAL_GPIO_Init+0x1fa>
 8004164:	2306      	movs	r3, #6
 8004166:	e008      	b.n	800417a <HAL_GPIO_Init+0x1fa>
 8004168:	2304      	movs	r3, #4
 800416a:	e006      	b.n	800417a <HAL_GPIO_Init+0x1fa>
 800416c:	2303      	movs	r3, #3
 800416e:	e004      	b.n	800417a <HAL_GPIO_Init+0x1fa>
 8004170:	2302      	movs	r3, #2
 8004172:	e002      	b.n	800417a <HAL_GPIO_Init+0x1fa>
 8004174:	2301      	movs	r3, #1
 8004176:	e000      	b.n	800417a <HAL_GPIO_Init+0x1fa>
 8004178:	2300      	movs	r3, #0
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	f002 0203 	and.w	r2, r2, #3
 8004180:	0092      	lsls	r2, r2, #2
 8004182:	4093      	lsls	r3, r2
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	4313      	orrs	r3, r2
 8004188:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800418a:	4937      	ldr	r1, [pc, #220]	; (8004268 <HAL_GPIO_Init+0x2e8>)
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	089b      	lsrs	r3, r3, #2
 8004190:	3302      	adds	r3, #2
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004198:	4b39      	ldr	r3, [pc, #228]	; (8004280 <HAL_GPIO_Init+0x300>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	43db      	mvns	r3, r3
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	4013      	ands	r3, r2
 80041a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d003      	beq.n	80041bc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80041bc:	4a30      	ldr	r2, [pc, #192]	; (8004280 <HAL_GPIO_Init+0x300>)
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80041c2:	4b2f      	ldr	r3, [pc, #188]	; (8004280 <HAL_GPIO_Init+0x300>)
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	43db      	mvns	r3, r3
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	4013      	ands	r3, r2
 80041d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80041e6:	4a26      	ldr	r2, [pc, #152]	; (8004280 <HAL_GPIO_Init+0x300>)
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80041ec:	4b24      	ldr	r3, [pc, #144]	; (8004280 <HAL_GPIO_Init+0x300>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	43db      	mvns	r3, r3
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	4013      	ands	r3, r2
 80041fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d003      	beq.n	8004210 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	4313      	orrs	r3, r2
 800420e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004210:	4a1b      	ldr	r2, [pc, #108]	; (8004280 <HAL_GPIO_Init+0x300>)
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004216:	4b1a      	ldr	r3, [pc, #104]	; (8004280 <HAL_GPIO_Init+0x300>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	43db      	mvns	r3, r3
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	4013      	ands	r3, r2
 8004224:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	4313      	orrs	r3, r2
 8004238:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800423a:	4a11      	ldr	r2, [pc, #68]	; (8004280 <HAL_GPIO_Init+0x300>)
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	3301      	adds	r3, #1
 8004244:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	fa22 f303 	lsr.w	r3, r2, r3
 8004250:	2b00      	cmp	r3, #0
 8004252:	f47f ae9d 	bne.w	8003f90 <HAL_GPIO_Init+0x10>
  }
}
 8004256:	bf00      	nop
 8004258:	bf00      	nop
 800425a:	371c      	adds	r7, #28
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr
 8004264:	40021000 	.word	0x40021000
 8004268:	40010000 	.word	0x40010000
 800426c:	48000400 	.word	0x48000400
 8004270:	48000800 	.word	0x48000800
 8004274:	48000c00 	.word	0x48000c00
 8004278:	48001000 	.word	0x48001000
 800427c:	48001400 	.word	0x48001400
 8004280:	40010400 	.word	0x40010400

08004284 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	460b      	mov	r3, r1
 800428e:	807b      	strh	r3, [r7, #2]
 8004290:	4613      	mov	r3, r2
 8004292:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004294:	787b      	ldrb	r3, [r7, #1]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800429a:	887a      	ldrh	r2, [r7, #2]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80042a0:	e002      	b.n	80042a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80042a2:	887a      	ldrh	r2, [r7, #2]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	4603      	mov	r3, r0
 80042bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80042be:	4b08      	ldr	r3, [pc, #32]	; (80042e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042c0:	695a      	ldr	r2, [r3, #20]
 80042c2:	88fb      	ldrh	r3, [r7, #6]
 80042c4:	4013      	ands	r3, r2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d006      	beq.n	80042d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80042ca:	4a05      	ldr	r2, [pc, #20]	; (80042e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042cc:	88fb      	ldrh	r3, [r7, #6]
 80042ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80042d0:	88fb      	ldrh	r3, [r7, #6]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7fd fbb6 	bl	8001a44 <HAL_GPIO_EXTI_Callback>
  }
}
 80042d8:	bf00      	nop
 80042da:	3708      	adds	r7, #8
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	40010400 	.word	0x40010400

080042e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e081      	b.n	80043fa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d106      	bne.n	8004310 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7fd fd8a 	bl	8001e24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2224      	movs	r2, #36	; 0x24
 8004314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 0201 	bic.w	r2, r2, #1
 8004326:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004334:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004344:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d107      	bne.n	800435e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689a      	ldr	r2, [r3, #8]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800435a:	609a      	str	r2, [r3, #8]
 800435c:	e006      	b.n	800436c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	689a      	ldr	r2, [r3, #8]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800436a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	2b02      	cmp	r3, #2
 8004372:	d104      	bne.n	800437e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800437c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	6812      	ldr	r2, [r2, #0]
 8004388:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800438c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004390:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68da      	ldr	r2, [r3, #12]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	691a      	ldr	r2, [r3, #16]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	430a      	orrs	r2, r1
 80043ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	69d9      	ldr	r1, [r3, #28]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a1a      	ldr	r2, [r3, #32]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	430a      	orrs	r2, r1
 80043ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0201 	orr.w	r2, r2, #1
 80043da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2220      	movs	r2, #32
 80043e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
	...

08004404 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b088      	sub	sp, #32
 8004408:	af02      	add	r7, sp, #8
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	607a      	str	r2, [r7, #4]
 800440e:	461a      	mov	r2, r3
 8004410:	460b      	mov	r3, r1
 8004412:	817b      	strh	r3, [r7, #10]
 8004414:	4613      	mov	r3, r2
 8004416:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800441e:	b2db      	uxtb	r3, r3
 8004420:	2b20      	cmp	r3, #32
 8004422:	f040 80da 	bne.w	80045da <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800442c:	2b01      	cmp	r3, #1
 800442e:	d101      	bne.n	8004434 <HAL_I2C_Master_Transmit+0x30>
 8004430:	2302      	movs	r3, #2
 8004432:	e0d3      	b.n	80045dc <HAL_I2C_Master_Transmit+0x1d8>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800443c:	f7fd ffcc 	bl	80023d8 <HAL_GetTick>
 8004440:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	2319      	movs	r3, #25
 8004448:	2201      	movs	r2, #1
 800444a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f000 f8f0 	bl	8004634 <I2C_WaitOnFlagUntilTimeout>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e0be      	b.n	80045dc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2221      	movs	r2, #33	; 0x21
 8004462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2210      	movs	r2, #16
 800446a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	893a      	ldrh	r2, [r7, #8]
 800447e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800448a:	b29b      	uxth	r3, r3
 800448c:	2bff      	cmp	r3, #255	; 0xff
 800448e:	d90e      	bls.n	80044ae <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	22ff      	movs	r2, #255	; 0xff
 8004494:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800449a:	b2da      	uxtb	r2, r3
 800449c:	8979      	ldrh	r1, [r7, #10]
 800449e:	4b51      	ldr	r3, [pc, #324]	; (80045e4 <HAL_I2C_Master_Transmit+0x1e0>)
 80044a0:	9300      	str	r3, [sp, #0]
 80044a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f000 fa6c 	bl	8004984 <I2C_TransferConfig>
 80044ac:	e06c      	b.n	8004588 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044bc:	b2da      	uxtb	r2, r3
 80044be:	8979      	ldrh	r1, [r7, #10]
 80044c0:	4b48      	ldr	r3, [pc, #288]	; (80045e4 <HAL_I2C_Master_Transmit+0x1e0>)
 80044c2:	9300      	str	r3, [sp, #0]
 80044c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f000 fa5b 	bl	8004984 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80044ce:	e05b      	b.n	8004588 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	6a39      	ldr	r1, [r7, #32]
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f000 f8ed 	bl	80046b4 <I2C_WaitOnTXISFlagUntilTimeout>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d001      	beq.n	80044e4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e07b      	b.n	80045dc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e8:	781a      	ldrb	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f4:	1c5a      	adds	r2, r3, #1
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044fe:	b29b      	uxth	r3, r3
 8004500:	3b01      	subs	r3, #1
 8004502:	b29a      	uxth	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800450c:	3b01      	subs	r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004518:	b29b      	uxth	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d034      	beq.n	8004588 <HAL_I2C_Master_Transmit+0x184>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004522:	2b00      	cmp	r3, #0
 8004524:	d130      	bne.n	8004588 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	6a3b      	ldr	r3, [r7, #32]
 800452c:	2200      	movs	r2, #0
 800452e:	2180      	movs	r1, #128	; 0x80
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f000 f87f 	bl	8004634 <I2C_WaitOnFlagUntilTimeout>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e04d      	b.n	80045dc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004544:	b29b      	uxth	r3, r3
 8004546:	2bff      	cmp	r3, #255	; 0xff
 8004548:	d90e      	bls.n	8004568 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	22ff      	movs	r2, #255	; 0xff
 800454e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004554:	b2da      	uxtb	r2, r3
 8004556:	8979      	ldrh	r1, [r7, #10]
 8004558:	2300      	movs	r3, #0
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f000 fa0f 	bl	8004984 <I2C_TransferConfig>
 8004566:	e00f      	b.n	8004588 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800456c:	b29a      	uxth	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004576:	b2da      	uxtb	r2, r3
 8004578:	8979      	ldrh	r1, [r7, #10]
 800457a:	2300      	movs	r3, #0
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004582:	68f8      	ldr	r0, [r7, #12]
 8004584:	f000 f9fe 	bl	8004984 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800458c:	b29b      	uxth	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d19e      	bne.n	80044d0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	6a39      	ldr	r1, [r7, #32]
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 f8cc 	bl	8004734 <I2C_WaitOnSTOPFlagUntilTimeout>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d001      	beq.n	80045a6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e01a      	b.n	80045dc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2220      	movs	r2, #32
 80045ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6859      	ldr	r1, [r3, #4]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	4b0b      	ldr	r3, [pc, #44]	; (80045e8 <HAL_I2C_Master_Transmit+0x1e4>)
 80045ba:	400b      	ands	r3, r1
 80045bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2220      	movs	r2, #32
 80045c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80045d6:	2300      	movs	r3, #0
 80045d8:	e000      	b.n	80045dc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80045da:	2302      	movs	r3, #2
  }
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3718      	adds	r7, #24
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	80002000 	.word	0x80002000
 80045e8:	fe00e800 	.word	0xfe00e800

080045ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d103      	bne.n	800460a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2200      	movs	r2, #0
 8004608:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	f003 0301 	and.w	r3, r3, #1
 8004614:	2b01      	cmp	r3, #1
 8004616:	d007      	beq.n	8004628 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	699a      	ldr	r2, [r3, #24]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f042 0201 	orr.w	r2, r2, #1
 8004626:	619a      	str	r2, [r3, #24]
  }
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	603b      	str	r3, [r7, #0]
 8004640:	4613      	mov	r3, r2
 8004642:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004644:	e022      	b.n	800468c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464c:	d01e      	beq.n	800468c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800464e:	f7fd fec3 	bl	80023d8 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	429a      	cmp	r2, r3
 800465c:	d302      	bcc.n	8004664 <I2C_WaitOnFlagUntilTimeout+0x30>
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d113      	bne.n	800468c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004668:	f043 0220 	orr.w	r2, r3, #32
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2220      	movs	r2, #32
 8004674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e00f      	b.n	80046ac <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	699a      	ldr	r2, [r3, #24]
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	4013      	ands	r3, r2
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	429a      	cmp	r2, r3
 800469a:	bf0c      	ite	eq
 800469c:	2301      	moveq	r3, #1
 800469e:	2300      	movne	r3, #0
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	461a      	mov	r2, r3
 80046a4:	79fb      	ldrb	r3, [r7, #7]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d0cd      	beq.n	8004646 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046c0:	e02c      	b.n	800471c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	68b9      	ldr	r1, [r7, #8]
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f000 f870 	bl	80047ac <I2C_IsErrorOccurred>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e02a      	b.n	800472c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046dc:	d01e      	beq.n	800471c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046de:	f7fd fe7b 	bl	80023d8 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	68ba      	ldr	r2, [r7, #8]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d302      	bcc.n	80046f4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d113      	bne.n	800471c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f8:	f043 0220 	orr.w	r2, r3, #32
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2220      	movs	r2, #32
 8004704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e007      	b.n	800472c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b02      	cmp	r3, #2
 8004728:	d1cb      	bne.n	80046c2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004740:	e028      	b.n	8004794 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	68b9      	ldr	r1, [r7, #8]
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 f830 	bl	80047ac <I2C_IsErrorOccurred>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e026      	b.n	80047a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004756:	f7fd fe3f 	bl	80023d8 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	429a      	cmp	r2, r3
 8004764:	d302      	bcc.n	800476c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d113      	bne.n	8004794 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004770:	f043 0220 	orr.w	r2, r3, #32
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2220      	movs	r2, #32
 800477c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e007      	b.n	80047a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	f003 0320 	and.w	r3, r3, #32
 800479e:	2b20      	cmp	r3, #32
 80047a0:	d1cf      	bne.n	8004742 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b08a      	sub	sp, #40	; 0x28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047b8:	2300      	movs	r3, #0
 80047ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80047c6:	2300      	movs	r3, #0
 80047c8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	f003 0310 	and.w	r3, r3, #16
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d075      	beq.n	80048c4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2210      	movs	r2, #16
 80047de:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80047e0:	e056      	b.n	8004890 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e8:	d052      	beq.n	8004890 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80047ea:	f7fd fdf5 	bl	80023d8 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	68ba      	ldr	r2, [r7, #8]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d302      	bcc.n	8004800 <I2C_IsErrorOccurred+0x54>
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d147      	bne.n	8004890 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800480a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004812:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800481e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004822:	d12e      	bne.n	8004882 <I2C_IsErrorOccurred+0xd6>
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800482a:	d02a      	beq.n	8004882 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800482c:	7cfb      	ldrb	r3, [r7, #19]
 800482e:	2b20      	cmp	r3, #32
 8004830:	d027      	beq.n	8004882 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004840:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004842:	f7fd fdc9 	bl	80023d8 <HAL_GetTick>
 8004846:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004848:	e01b      	b.n	8004882 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800484a:	f7fd fdc5 	bl	80023d8 <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	2b19      	cmp	r3, #25
 8004856:	d914      	bls.n	8004882 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485c:	f043 0220 	orr.w	r2, r3, #32
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2220      	movs	r2, #32
 8004868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	f003 0320 	and.w	r3, r3, #32
 800488c:	2b20      	cmp	r3, #32
 800488e:	d1dc      	bne.n	800484a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	f003 0320 	and.w	r3, r3, #32
 800489a:	2b20      	cmp	r3, #32
 800489c:	d003      	beq.n	80048a6 <I2C_IsErrorOccurred+0xfa>
 800489e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d09d      	beq.n	80047e2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80048a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d103      	bne.n	80048b6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2220      	movs	r2, #32
 80048b4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80048b6:	6a3b      	ldr	r3, [r7, #32]
 80048b8:	f043 0304 	orr.w	r3, r3, #4
 80048bc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00b      	beq.n	80048ee <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	f043 0301 	orr.w	r3, r3, #1
 80048dc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00b      	beq.n	8004910 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80048f8:	6a3b      	ldr	r3, [r7, #32]
 80048fa:	f043 0308 	orr.w	r3, r3, #8
 80048fe:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004908:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00b      	beq.n	8004932 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800491a:	6a3b      	ldr	r3, [r7, #32]
 800491c:	f043 0302 	orr.w	r3, r3, #2
 8004920:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f44f 7200 	mov.w	r2, #512	; 0x200
 800492a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004932:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004936:	2b00      	cmp	r3, #0
 8004938:	d01c      	beq.n	8004974 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f7ff fe56 	bl	80045ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6859      	ldr	r1, [r3, #4]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	4b0d      	ldr	r3, [pc, #52]	; (8004980 <I2C_IsErrorOccurred+0x1d4>)
 800494c:	400b      	ands	r3, r1
 800494e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004954:	6a3b      	ldr	r3, [r7, #32]
 8004956:	431a      	orrs	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2220      	movs	r2, #32
 8004960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004974:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004978:	4618      	mov	r0, r3
 800497a:	3728      	adds	r7, #40	; 0x28
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	fe00e800 	.word	0xfe00e800

08004984 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004984:	b480      	push	{r7}
 8004986:	b087      	sub	sp, #28
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	607b      	str	r3, [r7, #4]
 800498e:	460b      	mov	r3, r1
 8004990:	817b      	strh	r3, [r7, #10]
 8004992:	4613      	mov	r3, r2
 8004994:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004996:	897b      	ldrh	r3, [r7, #10]
 8004998:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800499c:	7a7b      	ldrb	r3, [r7, #9]
 800499e:	041b      	lsls	r3, r3, #16
 80049a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80049a4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80049aa:	6a3b      	ldr	r3, [r7, #32]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80049b2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685a      	ldr	r2, [r3, #4]
 80049ba:	6a3b      	ldr	r3, [r7, #32]
 80049bc:	0d5b      	lsrs	r3, r3, #21
 80049be:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80049c2:	4b08      	ldr	r3, [pc, #32]	; (80049e4 <I2C_TransferConfig+0x60>)
 80049c4:	430b      	orrs	r3, r1
 80049c6:	43db      	mvns	r3, r3
 80049c8:	ea02 0103 	and.w	r1, r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80049d6:	bf00      	nop
 80049d8:	371c      	adds	r7, #28
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	03ff63ff 	.word	0x03ff63ff

080049e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b20      	cmp	r3, #32
 80049fc:	d138      	bne.n	8004a70 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d101      	bne.n	8004a0c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a08:	2302      	movs	r3, #2
 8004a0a:	e032      	b.n	8004a72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2224      	movs	r2, #36	; 0x24
 8004a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f022 0201 	bic.w	r2, r2, #1
 8004a2a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a3a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6819      	ldr	r1, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f042 0201 	orr.w	r2, r2, #1
 8004a5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2220      	movs	r2, #32
 8004a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	e000      	b.n	8004a72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004a70:	2302      	movs	r3, #2
  }
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b085      	sub	sp, #20
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
 8004a86:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	2b20      	cmp	r3, #32
 8004a92:	d139      	bne.n	8004b08 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d101      	bne.n	8004aa2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	e033      	b.n	8004b0a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2224      	movs	r2, #36	; 0x24
 8004aae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 0201 	bic.w	r2, r2, #1
 8004ac0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004ad0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	021b      	lsls	r3, r3, #8
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f042 0201 	orr.w	r2, r2, #1
 8004af2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2220      	movs	r2, #32
 8004af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b04:	2300      	movs	r3, #0
 8004b06:	e000      	b.n	8004b0a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b08:	2302      	movs	r3, #2
  }
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
	...

08004b18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d141      	bne.n	8004baa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b26:	4b4b      	ldr	r3, [pc, #300]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b32:	d131      	bne.n	8004b98 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b34:	4b47      	ldr	r3, [pc, #284]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b3a:	4a46      	ldr	r2, [pc, #280]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b44:	4b43      	ldr	r3, [pc, #268]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b4c:	4a41      	ldr	r2, [pc, #260]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b54:	4b40      	ldr	r3, [pc, #256]	; (8004c58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2232      	movs	r2, #50	; 0x32
 8004b5a:	fb02 f303 	mul.w	r3, r2, r3
 8004b5e:	4a3f      	ldr	r2, [pc, #252]	; (8004c5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004b60:	fba2 2303 	umull	r2, r3, r2, r3
 8004b64:	0c9b      	lsrs	r3, r3, #18
 8004b66:	3301      	adds	r3, #1
 8004b68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b6a:	e002      	b.n	8004b72 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b72:	4b38      	ldr	r3, [pc, #224]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b7e:	d102      	bne.n	8004b86 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1f2      	bne.n	8004b6c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b86:	4b33      	ldr	r3, [pc, #204]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b92:	d158      	bne.n	8004c46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e057      	b.n	8004c48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b98:	4b2e      	ldr	r3, [pc, #184]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b9e:	4a2d      	ldr	r2, [pc, #180]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ba0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ba4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004ba8:	e04d      	b.n	8004c46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bb0:	d141      	bne.n	8004c36 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004bb2:	4b28      	ldr	r3, [pc, #160]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bbe:	d131      	bne.n	8004c24 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bc0:	4b24      	ldr	r3, [pc, #144]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bc6:	4a23      	ldr	r2, [pc, #140]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bcc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bd0:	4b20      	ldr	r3, [pc, #128]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004bd8:	4a1e      	ldr	r2, [pc, #120]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bde:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004be0:	4b1d      	ldr	r3, [pc, #116]	; (8004c58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2232      	movs	r2, #50	; 0x32
 8004be6:	fb02 f303 	mul.w	r3, r2, r3
 8004bea:	4a1c      	ldr	r2, [pc, #112]	; (8004c5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004bec:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf0:	0c9b      	lsrs	r3, r3, #18
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bf6:	e002      	b.n	8004bfe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bfe:	4b15      	ldr	r3, [pc, #84]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c0a:	d102      	bne.n	8004c12 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1f2      	bne.n	8004bf8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c12:	4b10      	ldr	r3, [pc, #64]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c1e:	d112      	bne.n	8004c46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e011      	b.n	8004c48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c24:	4b0b      	ldr	r3, [pc, #44]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c2a:	4a0a      	ldr	r2, [pc, #40]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004c34:	e007      	b.n	8004c46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004c36:	4b07      	ldr	r3, [pc, #28]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c3e:	4a05      	ldr	r2, [pc, #20]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c44:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3714      	adds	r7, #20
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	40007000 	.word	0x40007000
 8004c58:	20000010 	.word	0x20000010
 8004c5c:	431bde83 	.word	0x431bde83

08004c60 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004c60:	b480      	push	{r7}
 8004c62:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004c64:	4b05      	ldr	r3, [pc, #20]	; (8004c7c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	4a04      	ldr	r2, [pc, #16]	; (8004c7c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004c6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c6e:	6093      	str	r3, [r2, #8]
}
 8004c70:	bf00      	nop
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	40007000 	.word	0x40007000

08004c80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b088      	sub	sp, #32
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e306      	b.n	80052a0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d075      	beq.n	8004d8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c9e:	4b97      	ldr	r3, [pc, #604]	; (8004efc <HAL_RCC_OscConfig+0x27c>)
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f003 030c 	and.w	r3, r3, #12
 8004ca6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ca8:	4b94      	ldr	r3, [pc, #592]	; (8004efc <HAL_RCC_OscConfig+0x27c>)
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f003 0303 	and.w	r3, r3, #3
 8004cb0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	2b0c      	cmp	r3, #12
 8004cb6:	d102      	bne.n	8004cbe <HAL_RCC_OscConfig+0x3e>
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	2b03      	cmp	r3, #3
 8004cbc:	d002      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x44>
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	2b08      	cmp	r3, #8
 8004cc2:	d10b      	bne.n	8004cdc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cc4:	4b8d      	ldr	r3, [pc, #564]	; (8004efc <HAL_RCC_OscConfig+0x27c>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d05b      	beq.n	8004d88 <HAL_RCC_OscConfig+0x108>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d157      	bne.n	8004d88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e2e1      	b.n	80052a0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ce4:	d106      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x74>
 8004ce6:	4b85      	ldr	r3, [pc, #532]	; (8004efc <HAL_RCC_OscConfig+0x27c>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a84      	ldr	r2, [pc, #528]	; (8004efc <HAL_RCC_OscConfig+0x27c>)
 8004cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cf0:	6013      	str	r3, [r2, #0]
 8004cf2:	e01d      	b.n	8004d30 <HAL_RCC_OscConfig+0xb0>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cfc:	d10c      	bne.n	8004d18 <HAL_RCC_OscConfig+0x98>
 8004cfe:	4b7f      	ldr	r3, [pc, #508]	; (8004efc <HAL_RCC_OscConfig+0x27c>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a7e      	ldr	r2, [pc, #504]	; (8004efc <HAL_RCC_OscConfig+0x27c>)
 8004d04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d08:	6013      	str	r3, [r2, #0]
 8004d0a:	4b7c      	ldr	r3, [pc, #496]	; (8004efc <HAL_RCC_OscConfig+0x27c>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a7b      	ldr	r2, [pc, #492]	; (8004efc <HAL_RCC_OscConfig+0x27c>)
 8004d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d14:	6013      	str	r3, [r2, #0]
 8004d16:	e00b      	b.n	8004d30 <HAL_RCC_OscConfig+0xb0>
 8004d18:	4b78      	ldr	r3, [pc, #480]	; (8004efc <HAL_RCC_OscConfig+0x27c>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a77      	ldr	r2, [pc, #476]	; (8004efc <HAL_RCC_OscConfig+0x27c>)
 8004d1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d22:	6013      	str	r3, [r2, #0]
 8004d24:	4b75      	ldr	r3, [pc, #468]	; (8004efc <HAL_RCC_OscConfig+0x27c>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a74      	ldr	r2, [pc, #464]	; (8004efc <HAL_RCC_OscConfig+0x27c>)
 8004d2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d013      	beq.n	8004d60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d38:	f7fd fb4e 	bl	80023d8 <HAL_GetTick>
 8004d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d3e:	e008      	b.n	8004d52 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d40:	f7fd fb4a 	bl	80023d8 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b64      	cmp	r3, #100	; 0x64
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e2a6      	b.n	80052a0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d52:	4b6a      	ldr	r3, [pc, #424]	; (8004efc <HAL_RCC_OscConfig+0x27c>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d0f0      	beq.n	8004d40 <HAL_RCC_OscConfig+0xc0>
 8004d5e:	e014      	b.n	8004d8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d60:	f7fd fb3a 	bl	80023d8 <HAL_GetTick>
 8004d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d66:	e008      	b.n	8004d7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d68:	f7fd fb36 	bl	80023d8 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b64      	cmp	r3, #100	; 0x64
 8004d74:	d901      	bls.n	8004d7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e292      	b.n	80052a0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d7a:	4b60      	ldr	r3, [pc, #384]	; (8004efc <HAL_RCC_OscConfig+0x27c>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1f0      	bne.n	8004d68 <HAL_RCC_OscConfig+0xe8>
 8004d86:	e000      	b.n	8004d8a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d075      	beq.n	8004e82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d96:	4b59      	ldr	r3, [pc, #356]	; (8004efc <HAL_RCC_OscConfig+0x27c>)
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f003 030c 	and.w	r3, r3, #12
 8004d9e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004da0:	4b56      	ldr	r3, [pc, #344]	; (8004efc <HAL_RCC_OscConfig+0x27c>)
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	f003 0303 	and.w	r3, r3, #3
 8004da8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	2b0c      	cmp	r3, #12
 8004dae:	d102      	bne.n	8004db6 <HAL_RCC_OscConfig+0x136>
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d002      	beq.n	8004dbc <HAL_RCC_OscConfig+0x13c>
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	2b04      	cmp	r3, #4
 8004dba:	d11f      	bne.n	8004dfc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dbc:	4b4f      	ldr	r3, [pc, #316]	; (8004efc <HAL_RCC_OscConfig+0x27c>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d005      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x154>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d101      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e265      	b.n	80052a0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dd4:	4b49      	ldr	r3, [pc, #292]	; (8004efc <HAL_RCC_OscConfig+0x27c>)
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	061b      	lsls	r3, r3, #24
 8004de2:	4946      	ldr	r1, [pc, #280]	; (8004efc <HAL_RCC_OscConfig+0x27c>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004de8:	4b45      	ldr	r3, [pc, #276]	; (8004f00 <HAL_RCC_OscConfig+0x280>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7fd faa7 	bl	8002340 <HAL_InitTick>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d043      	beq.n	8004e80 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e251      	b.n	80052a0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d023      	beq.n	8004e4c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e04:	4b3d      	ldr	r3, [pc, #244]	; (8004efc <HAL_RCC_OscConfig+0x27c>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a3c      	ldr	r2, [pc, #240]	; (8004efc <HAL_RCC_OscConfig+0x27c>)
 8004e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e10:	f7fd fae2 	bl	80023d8 <HAL_GetTick>
 8004e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e16:	e008      	b.n	8004e2a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e18:	f7fd fade 	bl	80023d8 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d901      	bls.n	8004e2a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e23a      	b.n	80052a0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e2a:	4b34      	ldr	r3, [pc, #208]	; (8004efc <HAL_RCC_OscConfig+0x27c>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d0f0      	beq.n	8004e18 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e36:	4b31      	ldr	r3, [pc, #196]	; (8004efc <HAL_RCC_OscConfig+0x27c>)
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	061b      	lsls	r3, r3, #24
 8004e44:	492d      	ldr	r1, [pc, #180]	; (8004efc <HAL_RCC_OscConfig+0x27c>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	604b      	str	r3, [r1, #4]
 8004e4a:	e01a      	b.n	8004e82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e4c:	4b2b      	ldr	r3, [pc, #172]	; (8004efc <HAL_RCC_OscConfig+0x27c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a2a      	ldr	r2, [pc, #168]	; (8004efc <HAL_RCC_OscConfig+0x27c>)
 8004e52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e58:	f7fd fabe 	bl	80023d8 <HAL_GetTick>
 8004e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e5e:	e008      	b.n	8004e72 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e60:	f7fd faba 	bl	80023d8 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e216      	b.n	80052a0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e72:	4b22      	ldr	r3, [pc, #136]	; (8004efc <HAL_RCC_OscConfig+0x27c>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1f0      	bne.n	8004e60 <HAL_RCC_OscConfig+0x1e0>
 8004e7e:	e000      	b.n	8004e82 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e80:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0308 	and.w	r3, r3, #8
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d041      	beq.n	8004f12 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d01c      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e96:	4b19      	ldr	r3, [pc, #100]	; (8004efc <HAL_RCC_OscConfig+0x27c>)
 8004e98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e9c:	4a17      	ldr	r2, [pc, #92]	; (8004efc <HAL_RCC_OscConfig+0x27c>)
 8004e9e:	f043 0301 	orr.w	r3, r3, #1
 8004ea2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ea6:	f7fd fa97 	bl	80023d8 <HAL_GetTick>
 8004eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004eac:	e008      	b.n	8004ec0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004eae:	f7fd fa93 	bl	80023d8 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d901      	bls.n	8004ec0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e1ef      	b.n	80052a0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ec0:	4b0e      	ldr	r3, [pc, #56]	; (8004efc <HAL_RCC_OscConfig+0x27c>)
 8004ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d0ef      	beq.n	8004eae <HAL_RCC_OscConfig+0x22e>
 8004ece:	e020      	b.n	8004f12 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ed0:	4b0a      	ldr	r3, [pc, #40]	; (8004efc <HAL_RCC_OscConfig+0x27c>)
 8004ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ed6:	4a09      	ldr	r2, [pc, #36]	; (8004efc <HAL_RCC_OscConfig+0x27c>)
 8004ed8:	f023 0301 	bic.w	r3, r3, #1
 8004edc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee0:	f7fd fa7a 	bl	80023d8 <HAL_GetTick>
 8004ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ee6:	e00d      	b.n	8004f04 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ee8:	f7fd fa76 	bl	80023d8 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d906      	bls.n	8004f04 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e1d2      	b.n	80052a0 <HAL_RCC_OscConfig+0x620>
 8004efa:	bf00      	nop
 8004efc:	40021000 	.word	0x40021000
 8004f00:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f04:	4b8c      	ldr	r3, [pc, #560]	; (8005138 <HAL_RCC_OscConfig+0x4b8>)
 8004f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f0a:	f003 0302 	and.w	r3, r3, #2
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1ea      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0304 	and.w	r3, r3, #4
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f000 80a6 	beq.w	800506c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f20:	2300      	movs	r3, #0
 8004f22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f24:	4b84      	ldr	r3, [pc, #528]	; (8005138 <HAL_RCC_OscConfig+0x4b8>)
 8004f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d101      	bne.n	8004f34 <HAL_RCC_OscConfig+0x2b4>
 8004f30:	2301      	movs	r3, #1
 8004f32:	e000      	b.n	8004f36 <HAL_RCC_OscConfig+0x2b6>
 8004f34:	2300      	movs	r3, #0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00d      	beq.n	8004f56 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f3a:	4b7f      	ldr	r3, [pc, #508]	; (8005138 <HAL_RCC_OscConfig+0x4b8>)
 8004f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f3e:	4a7e      	ldr	r2, [pc, #504]	; (8005138 <HAL_RCC_OscConfig+0x4b8>)
 8004f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f44:	6593      	str	r3, [r2, #88]	; 0x58
 8004f46:	4b7c      	ldr	r3, [pc, #496]	; (8005138 <HAL_RCC_OscConfig+0x4b8>)
 8004f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f4e:	60fb      	str	r3, [r7, #12]
 8004f50:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004f52:	2301      	movs	r3, #1
 8004f54:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f56:	4b79      	ldr	r3, [pc, #484]	; (800513c <HAL_RCC_OscConfig+0x4bc>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d118      	bne.n	8004f94 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f62:	4b76      	ldr	r3, [pc, #472]	; (800513c <HAL_RCC_OscConfig+0x4bc>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a75      	ldr	r2, [pc, #468]	; (800513c <HAL_RCC_OscConfig+0x4bc>)
 8004f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f6e:	f7fd fa33 	bl	80023d8 <HAL_GetTick>
 8004f72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f74:	e008      	b.n	8004f88 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f76:	f7fd fa2f 	bl	80023d8 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d901      	bls.n	8004f88 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e18b      	b.n	80052a0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f88:	4b6c      	ldr	r3, [pc, #432]	; (800513c <HAL_RCC_OscConfig+0x4bc>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d0f0      	beq.n	8004f76 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d108      	bne.n	8004fae <HAL_RCC_OscConfig+0x32e>
 8004f9c:	4b66      	ldr	r3, [pc, #408]	; (8005138 <HAL_RCC_OscConfig+0x4b8>)
 8004f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa2:	4a65      	ldr	r2, [pc, #404]	; (8005138 <HAL_RCC_OscConfig+0x4b8>)
 8004fa4:	f043 0301 	orr.w	r3, r3, #1
 8004fa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fac:	e024      	b.n	8004ff8 <HAL_RCC_OscConfig+0x378>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	2b05      	cmp	r3, #5
 8004fb4:	d110      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x358>
 8004fb6:	4b60      	ldr	r3, [pc, #384]	; (8005138 <HAL_RCC_OscConfig+0x4b8>)
 8004fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fbc:	4a5e      	ldr	r2, [pc, #376]	; (8005138 <HAL_RCC_OscConfig+0x4b8>)
 8004fbe:	f043 0304 	orr.w	r3, r3, #4
 8004fc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fc6:	4b5c      	ldr	r3, [pc, #368]	; (8005138 <HAL_RCC_OscConfig+0x4b8>)
 8004fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fcc:	4a5a      	ldr	r2, [pc, #360]	; (8005138 <HAL_RCC_OscConfig+0x4b8>)
 8004fce:	f043 0301 	orr.w	r3, r3, #1
 8004fd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fd6:	e00f      	b.n	8004ff8 <HAL_RCC_OscConfig+0x378>
 8004fd8:	4b57      	ldr	r3, [pc, #348]	; (8005138 <HAL_RCC_OscConfig+0x4b8>)
 8004fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fde:	4a56      	ldr	r2, [pc, #344]	; (8005138 <HAL_RCC_OscConfig+0x4b8>)
 8004fe0:	f023 0301 	bic.w	r3, r3, #1
 8004fe4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fe8:	4b53      	ldr	r3, [pc, #332]	; (8005138 <HAL_RCC_OscConfig+0x4b8>)
 8004fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fee:	4a52      	ldr	r2, [pc, #328]	; (8005138 <HAL_RCC_OscConfig+0x4b8>)
 8004ff0:	f023 0304 	bic.w	r3, r3, #4
 8004ff4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d016      	beq.n	800502e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005000:	f7fd f9ea 	bl	80023d8 <HAL_GetTick>
 8005004:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005006:	e00a      	b.n	800501e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005008:	f7fd f9e6 	bl	80023d8 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	f241 3288 	movw	r2, #5000	; 0x1388
 8005016:	4293      	cmp	r3, r2
 8005018:	d901      	bls.n	800501e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e140      	b.n	80052a0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800501e:	4b46      	ldr	r3, [pc, #280]	; (8005138 <HAL_RCC_OscConfig+0x4b8>)
 8005020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005024:	f003 0302 	and.w	r3, r3, #2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d0ed      	beq.n	8005008 <HAL_RCC_OscConfig+0x388>
 800502c:	e015      	b.n	800505a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800502e:	f7fd f9d3 	bl	80023d8 <HAL_GetTick>
 8005032:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005034:	e00a      	b.n	800504c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005036:	f7fd f9cf 	bl	80023d8 <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	f241 3288 	movw	r2, #5000	; 0x1388
 8005044:	4293      	cmp	r3, r2
 8005046:	d901      	bls.n	800504c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e129      	b.n	80052a0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800504c:	4b3a      	ldr	r3, [pc, #232]	; (8005138 <HAL_RCC_OscConfig+0x4b8>)
 800504e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1ed      	bne.n	8005036 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800505a:	7ffb      	ldrb	r3, [r7, #31]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d105      	bne.n	800506c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005060:	4b35      	ldr	r3, [pc, #212]	; (8005138 <HAL_RCC_OscConfig+0x4b8>)
 8005062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005064:	4a34      	ldr	r2, [pc, #208]	; (8005138 <HAL_RCC_OscConfig+0x4b8>)
 8005066:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800506a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0320 	and.w	r3, r3, #32
 8005074:	2b00      	cmp	r3, #0
 8005076:	d03c      	beq.n	80050f2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d01c      	beq.n	80050ba <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005080:	4b2d      	ldr	r3, [pc, #180]	; (8005138 <HAL_RCC_OscConfig+0x4b8>)
 8005082:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005086:	4a2c      	ldr	r2, [pc, #176]	; (8005138 <HAL_RCC_OscConfig+0x4b8>)
 8005088:	f043 0301 	orr.w	r3, r3, #1
 800508c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005090:	f7fd f9a2 	bl	80023d8 <HAL_GetTick>
 8005094:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005096:	e008      	b.n	80050aa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005098:	f7fd f99e 	bl	80023d8 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e0fa      	b.n	80052a0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80050aa:	4b23      	ldr	r3, [pc, #140]	; (8005138 <HAL_RCC_OscConfig+0x4b8>)
 80050ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d0ef      	beq.n	8005098 <HAL_RCC_OscConfig+0x418>
 80050b8:	e01b      	b.n	80050f2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80050ba:	4b1f      	ldr	r3, [pc, #124]	; (8005138 <HAL_RCC_OscConfig+0x4b8>)
 80050bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050c0:	4a1d      	ldr	r2, [pc, #116]	; (8005138 <HAL_RCC_OscConfig+0x4b8>)
 80050c2:	f023 0301 	bic.w	r3, r3, #1
 80050c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ca:	f7fd f985 	bl	80023d8 <HAL_GetTick>
 80050ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80050d0:	e008      	b.n	80050e4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050d2:	f7fd f981 	bl	80023d8 <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d901      	bls.n	80050e4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e0dd      	b.n	80052a0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80050e4:	4b14      	ldr	r3, [pc, #80]	; (8005138 <HAL_RCC_OscConfig+0x4b8>)
 80050e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1ef      	bne.n	80050d2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f000 80d1 	beq.w	800529e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050fc:	4b0e      	ldr	r3, [pc, #56]	; (8005138 <HAL_RCC_OscConfig+0x4b8>)
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f003 030c 	and.w	r3, r3, #12
 8005104:	2b0c      	cmp	r3, #12
 8005106:	f000 808b 	beq.w	8005220 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	69db      	ldr	r3, [r3, #28]
 800510e:	2b02      	cmp	r3, #2
 8005110:	d15e      	bne.n	80051d0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005112:	4b09      	ldr	r3, [pc, #36]	; (8005138 <HAL_RCC_OscConfig+0x4b8>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a08      	ldr	r2, [pc, #32]	; (8005138 <HAL_RCC_OscConfig+0x4b8>)
 8005118:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800511c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800511e:	f7fd f95b 	bl	80023d8 <HAL_GetTick>
 8005122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005124:	e00c      	b.n	8005140 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005126:	f7fd f957 	bl	80023d8 <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	2b02      	cmp	r3, #2
 8005132:	d905      	bls.n	8005140 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e0b3      	b.n	80052a0 <HAL_RCC_OscConfig+0x620>
 8005138:	40021000 	.word	0x40021000
 800513c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005140:	4b59      	ldr	r3, [pc, #356]	; (80052a8 <HAL_RCC_OscConfig+0x628>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1ec      	bne.n	8005126 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800514c:	4b56      	ldr	r3, [pc, #344]	; (80052a8 <HAL_RCC_OscConfig+0x628>)
 800514e:	68da      	ldr	r2, [r3, #12]
 8005150:	4b56      	ldr	r3, [pc, #344]	; (80052ac <HAL_RCC_OscConfig+0x62c>)
 8005152:	4013      	ands	r3, r2
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6a11      	ldr	r1, [r2, #32]
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800515c:	3a01      	subs	r2, #1
 800515e:	0112      	lsls	r2, r2, #4
 8005160:	4311      	orrs	r1, r2
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005166:	0212      	lsls	r2, r2, #8
 8005168:	4311      	orrs	r1, r2
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800516e:	0852      	lsrs	r2, r2, #1
 8005170:	3a01      	subs	r2, #1
 8005172:	0552      	lsls	r2, r2, #21
 8005174:	4311      	orrs	r1, r2
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800517a:	0852      	lsrs	r2, r2, #1
 800517c:	3a01      	subs	r2, #1
 800517e:	0652      	lsls	r2, r2, #25
 8005180:	4311      	orrs	r1, r2
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005186:	06d2      	lsls	r2, r2, #27
 8005188:	430a      	orrs	r2, r1
 800518a:	4947      	ldr	r1, [pc, #284]	; (80052a8 <HAL_RCC_OscConfig+0x628>)
 800518c:	4313      	orrs	r3, r2
 800518e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005190:	4b45      	ldr	r3, [pc, #276]	; (80052a8 <HAL_RCC_OscConfig+0x628>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a44      	ldr	r2, [pc, #272]	; (80052a8 <HAL_RCC_OscConfig+0x628>)
 8005196:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800519a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800519c:	4b42      	ldr	r3, [pc, #264]	; (80052a8 <HAL_RCC_OscConfig+0x628>)
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	4a41      	ldr	r2, [pc, #260]	; (80052a8 <HAL_RCC_OscConfig+0x628>)
 80051a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a8:	f7fd f916 	bl	80023d8 <HAL_GetTick>
 80051ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051ae:	e008      	b.n	80051c2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051b0:	f7fd f912 	bl	80023d8 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d901      	bls.n	80051c2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e06e      	b.n	80052a0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051c2:	4b39      	ldr	r3, [pc, #228]	; (80052a8 <HAL_RCC_OscConfig+0x628>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d0f0      	beq.n	80051b0 <HAL_RCC_OscConfig+0x530>
 80051ce:	e066      	b.n	800529e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051d0:	4b35      	ldr	r3, [pc, #212]	; (80052a8 <HAL_RCC_OscConfig+0x628>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a34      	ldr	r2, [pc, #208]	; (80052a8 <HAL_RCC_OscConfig+0x628>)
 80051d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051da:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80051dc:	4b32      	ldr	r3, [pc, #200]	; (80052a8 <HAL_RCC_OscConfig+0x628>)
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	4a31      	ldr	r2, [pc, #196]	; (80052a8 <HAL_RCC_OscConfig+0x628>)
 80051e2:	f023 0303 	bic.w	r3, r3, #3
 80051e6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80051e8:	4b2f      	ldr	r3, [pc, #188]	; (80052a8 <HAL_RCC_OscConfig+0x628>)
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	4a2e      	ldr	r2, [pc, #184]	; (80052a8 <HAL_RCC_OscConfig+0x628>)
 80051ee:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80051f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f8:	f7fd f8ee 	bl	80023d8 <HAL_GetTick>
 80051fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051fe:	e008      	b.n	8005212 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005200:	f7fd f8ea 	bl	80023d8 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b02      	cmp	r3, #2
 800520c:	d901      	bls.n	8005212 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e046      	b.n	80052a0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005212:	4b25      	ldr	r3, [pc, #148]	; (80052a8 <HAL_RCC_OscConfig+0x628>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1f0      	bne.n	8005200 <HAL_RCC_OscConfig+0x580>
 800521e:	e03e      	b.n	800529e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	69db      	ldr	r3, [r3, #28]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d101      	bne.n	800522c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e039      	b.n	80052a0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800522c:	4b1e      	ldr	r3, [pc, #120]	; (80052a8 <HAL_RCC_OscConfig+0x628>)
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f003 0203 	and.w	r2, r3, #3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	429a      	cmp	r2, r3
 800523e:	d12c      	bne.n	800529a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	3b01      	subs	r3, #1
 800524c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800524e:	429a      	cmp	r2, r3
 8005250:	d123      	bne.n	800529a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800525e:	429a      	cmp	r2, r3
 8005260:	d11b      	bne.n	800529a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800526e:	429a      	cmp	r2, r3
 8005270:	d113      	bne.n	800529a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527c:	085b      	lsrs	r3, r3, #1
 800527e:	3b01      	subs	r3, #1
 8005280:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005282:	429a      	cmp	r2, r3
 8005284:	d109      	bne.n	800529a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005290:	085b      	lsrs	r3, r3, #1
 8005292:	3b01      	subs	r3, #1
 8005294:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005296:	429a      	cmp	r2, r3
 8005298:	d001      	beq.n	800529e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e000      	b.n	80052a0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3720      	adds	r7, #32
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	40021000 	.word	0x40021000
 80052ac:	019f800c 	.word	0x019f800c

080052b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80052ba:	2300      	movs	r3, #0
 80052bc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d101      	bne.n	80052c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e11e      	b.n	8005506 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052c8:	4b91      	ldr	r3, [pc, #580]	; (8005510 <HAL_RCC_ClockConfig+0x260>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 030f 	and.w	r3, r3, #15
 80052d0:	683a      	ldr	r2, [r7, #0]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d910      	bls.n	80052f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052d6:	4b8e      	ldr	r3, [pc, #568]	; (8005510 <HAL_RCC_ClockConfig+0x260>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f023 020f 	bic.w	r2, r3, #15
 80052de:	498c      	ldr	r1, [pc, #560]	; (8005510 <HAL_RCC_ClockConfig+0x260>)
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052e6:	4b8a      	ldr	r3, [pc, #552]	; (8005510 <HAL_RCC_ClockConfig+0x260>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 030f 	and.w	r3, r3, #15
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d001      	beq.n	80052f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e106      	b.n	8005506 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0301 	and.w	r3, r3, #1
 8005300:	2b00      	cmp	r3, #0
 8005302:	d073      	beq.n	80053ec <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	2b03      	cmp	r3, #3
 800530a:	d129      	bne.n	8005360 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800530c:	4b81      	ldr	r3, [pc, #516]	; (8005514 <HAL_RCC_ClockConfig+0x264>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d101      	bne.n	800531c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e0f4      	b.n	8005506 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800531c:	f000 f99e 	bl	800565c <RCC_GetSysClockFreqFromPLLSource>
 8005320:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	4a7c      	ldr	r2, [pc, #496]	; (8005518 <HAL_RCC_ClockConfig+0x268>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d93f      	bls.n	80053aa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800532a:	4b7a      	ldr	r3, [pc, #488]	; (8005514 <HAL_RCC_ClockConfig+0x264>)
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d009      	beq.n	800534a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800533e:	2b00      	cmp	r3, #0
 8005340:	d033      	beq.n	80053aa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005346:	2b00      	cmp	r3, #0
 8005348:	d12f      	bne.n	80053aa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800534a:	4b72      	ldr	r3, [pc, #456]	; (8005514 <HAL_RCC_ClockConfig+0x264>)
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005352:	4a70      	ldr	r2, [pc, #448]	; (8005514 <HAL_RCC_ClockConfig+0x264>)
 8005354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005358:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800535a:	2380      	movs	r3, #128	; 0x80
 800535c:	617b      	str	r3, [r7, #20]
 800535e:	e024      	b.n	80053aa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	2b02      	cmp	r3, #2
 8005366:	d107      	bne.n	8005378 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005368:	4b6a      	ldr	r3, [pc, #424]	; (8005514 <HAL_RCC_ClockConfig+0x264>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d109      	bne.n	8005388 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e0c6      	b.n	8005506 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005378:	4b66      	ldr	r3, [pc, #408]	; (8005514 <HAL_RCC_ClockConfig+0x264>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005380:	2b00      	cmp	r3, #0
 8005382:	d101      	bne.n	8005388 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e0be      	b.n	8005506 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005388:	f000 f8ce 	bl	8005528 <HAL_RCC_GetSysClockFreq>
 800538c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	4a61      	ldr	r2, [pc, #388]	; (8005518 <HAL_RCC_ClockConfig+0x268>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d909      	bls.n	80053aa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005396:	4b5f      	ldr	r3, [pc, #380]	; (8005514 <HAL_RCC_ClockConfig+0x264>)
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800539e:	4a5d      	ldr	r2, [pc, #372]	; (8005514 <HAL_RCC_ClockConfig+0x264>)
 80053a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053a4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80053a6:	2380      	movs	r3, #128	; 0x80
 80053a8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80053aa:	4b5a      	ldr	r3, [pc, #360]	; (8005514 <HAL_RCC_ClockConfig+0x264>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f023 0203 	bic.w	r2, r3, #3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	4957      	ldr	r1, [pc, #348]	; (8005514 <HAL_RCC_ClockConfig+0x264>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053bc:	f7fd f80c 	bl	80023d8 <HAL_GetTick>
 80053c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053c2:	e00a      	b.n	80053da <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053c4:	f7fd f808 	bl	80023d8 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d901      	bls.n	80053da <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e095      	b.n	8005506 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053da:	4b4e      	ldr	r3, [pc, #312]	; (8005514 <HAL_RCC_ClockConfig+0x264>)
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f003 020c 	and.w	r2, r3, #12
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d1eb      	bne.n	80053c4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0302 	and.w	r3, r3, #2
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d023      	beq.n	8005440 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0304 	and.w	r3, r3, #4
 8005400:	2b00      	cmp	r3, #0
 8005402:	d005      	beq.n	8005410 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005404:	4b43      	ldr	r3, [pc, #268]	; (8005514 <HAL_RCC_ClockConfig+0x264>)
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	4a42      	ldr	r2, [pc, #264]	; (8005514 <HAL_RCC_ClockConfig+0x264>)
 800540a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800540e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0308 	and.w	r3, r3, #8
 8005418:	2b00      	cmp	r3, #0
 800541a:	d007      	beq.n	800542c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800541c:	4b3d      	ldr	r3, [pc, #244]	; (8005514 <HAL_RCC_ClockConfig+0x264>)
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005424:	4a3b      	ldr	r2, [pc, #236]	; (8005514 <HAL_RCC_ClockConfig+0x264>)
 8005426:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800542a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800542c:	4b39      	ldr	r3, [pc, #228]	; (8005514 <HAL_RCC_ClockConfig+0x264>)
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	4936      	ldr	r1, [pc, #216]	; (8005514 <HAL_RCC_ClockConfig+0x264>)
 800543a:	4313      	orrs	r3, r2
 800543c:	608b      	str	r3, [r1, #8]
 800543e:	e008      	b.n	8005452 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	2b80      	cmp	r3, #128	; 0x80
 8005444:	d105      	bne.n	8005452 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005446:	4b33      	ldr	r3, [pc, #204]	; (8005514 <HAL_RCC_ClockConfig+0x264>)
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	4a32      	ldr	r2, [pc, #200]	; (8005514 <HAL_RCC_ClockConfig+0x264>)
 800544c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005450:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005452:	4b2f      	ldr	r3, [pc, #188]	; (8005510 <HAL_RCC_ClockConfig+0x260>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 030f 	and.w	r3, r3, #15
 800545a:	683a      	ldr	r2, [r7, #0]
 800545c:	429a      	cmp	r2, r3
 800545e:	d21d      	bcs.n	800549c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005460:	4b2b      	ldr	r3, [pc, #172]	; (8005510 <HAL_RCC_ClockConfig+0x260>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f023 020f 	bic.w	r2, r3, #15
 8005468:	4929      	ldr	r1, [pc, #164]	; (8005510 <HAL_RCC_ClockConfig+0x260>)
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	4313      	orrs	r3, r2
 800546e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005470:	f7fc ffb2 	bl	80023d8 <HAL_GetTick>
 8005474:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005476:	e00a      	b.n	800548e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005478:	f7fc ffae 	bl	80023d8 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	f241 3288 	movw	r2, #5000	; 0x1388
 8005486:	4293      	cmp	r3, r2
 8005488:	d901      	bls.n	800548e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e03b      	b.n	8005506 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800548e:	4b20      	ldr	r3, [pc, #128]	; (8005510 <HAL_RCC_ClockConfig+0x260>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 030f 	and.w	r3, r3, #15
 8005496:	683a      	ldr	r2, [r7, #0]
 8005498:	429a      	cmp	r2, r3
 800549a:	d1ed      	bne.n	8005478 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0304 	and.w	r3, r3, #4
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d008      	beq.n	80054ba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054a8:	4b1a      	ldr	r3, [pc, #104]	; (8005514 <HAL_RCC_ClockConfig+0x264>)
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	4917      	ldr	r1, [pc, #92]	; (8005514 <HAL_RCC_ClockConfig+0x264>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0308 	and.w	r3, r3, #8
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d009      	beq.n	80054da <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054c6:	4b13      	ldr	r3, [pc, #76]	; (8005514 <HAL_RCC_ClockConfig+0x264>)
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	00db      	lsls	r3, r3, #3
 80054d4:	490f      	ldr	r1, [pc, #60]	; (8005514 <HAL_RCC_ClockConfig+0x264>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054da:	f000 f825 	bl	8005528 <HAL_RCC_GetSysClockFreq>
 80054de:	4602      	mov	r2, r0
 80054e0:	4b0c      	ldr	r3, [pc, #48]	; (8005514 <HAL_RCC_ClockConfig+0x264>)
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	091b      	lsrs	r3, r3, #4
 80054e6:	f003 030f 	and.w	r3, r3, #15
 80054ea:	490c      	ldr	r1, [pc, #48]	; (800551c <HAL_RCC_ClockConfig+0x26c>)
 80054ec:	5ccb      	ldrb	r3, [r1, r3]
 80054ee:	f003 031f 	and.w	r3, r3, #31
 80054f2:	fa22 f303 	lsr.w	r3, r2, r3
 80054f6:	4a0a      	ldr	r2, [pc, #40]	; (8005520 <HAL_RCC_ClockConfig+0x270>)
 80054f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80054fa:	4b0a      	ldr	r3, [pc, #40]	; (8005524 <HAL_RCC_ClockConfig+0x274>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4618      	mov	r0, r3
 8005500:	f7fc ff1e 	bl	8002340 <HAL_InitTick>
 8005504:	4603      	mov	r3, r0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3718      	adds	r7, #24
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	40022000 	.word	0x40022000
 8005514:	40021000 	.word	0x40021000
 8005518:	04c4b400 	.word	0x04c4b400
 800551c:	0800a9dc 	.word	0x0800a9dc
 8005520:	20000010 	.word	0x20000010
 8005524:	20000014 	.word	0x20000014

08005528 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005528:	b480      	push	{r7}
 800552a:	b087      	sub	sp, #28
 800552c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800552e:	4b2c      	ldr	r3, [pc, #176]	; (80055e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f003 030c 	and.w	r3, r3, #12
 8005536:	2b04      	cmp	r3, #4
 8005538:	d102      	bne.n	8005540 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800553a:	4b2a      	ldr	r3, [pc, #168]	; (80055e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800553c:	613b      	str	r3, [r7, #16]
 800553e:	e047      	b.n	80055d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005540:	4b27      	ldr	r3, [pc, #156]	; (80055e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f003 030c 	and.w	r3, r3, #12
 8005548:	2b08      	cmp	r3, #8
 800554a:	d102      	bne.n	8005552 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800554c:	4b26      	ldr	r3, [pc, #152]	; (80055e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800554e:	613b      	str	r3, [r7, #16]
 8005550:	e03e      	b.n	80055d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005552:	4b23      	ldr	r3, [pc, #140]	; (80055e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f003 030c 	and.w	r3, r3, #12
 800555a:	2b0c      	cmp	r3, #12
 800555c:	d136      	bne.n	80055cc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800555e:	4b20      	ldr	r3, [pc, #128]	; (80055e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	f003 0303 	and.w	r3, r3, #3
 8005566:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005568:	4b1d      	ldr	r3, [pc, #116]	; (80055e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	091b      	lsrs	r3, r3, #4
 800556e:	f003 030f 	and.w	r3, r3, #15
 8005572:	3301      	adds	r3, #1
 8005574:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2b03      	cmp	r3, #3
 800557a:	d10c      	bne.n	8005596 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800557c:	4a1a      	ldr	r2, [pc, #104]	; (80055e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	fbb2 f3f3 	udiv	r3, r2, r3
 8005584:	4a16      	ldr	r2, [pc, #88]	; (80055e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005586:	68d2      	ldr	r2, [r2, #12]
 8005588:	0a12      	lsrs	r2, r2, #8
 800558a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800558e:	fb02 f303 	mul.w	r3, r2, r3
 8005592:	617b      	str	r3, [r7, #20]
      break;
 8005594:	e00c      	b.n	80055b0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005596:	4a13      	ldr	r2, [pc, #76]	; (80055e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	fbb2 f3f3 	udiv	r3, r2, r3
 800559e:	4a10      	ldr	r2, [pc, #64]	; (80055e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055a0:	68d2      	ldr	r2, [r2, #12]
 80055a2:	0a12      	lsrs	r2, r2, #8
 80055a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80055a8:	fb02 f303 	mul.w	r3, r2, r3
 80055ac:	617b      	str	r3, [r7, #20]
      break;
 80055ae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055b0:	4b0b      	ldr	r3, [pc, #44]	; (80055e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	0e5b      	lsrs	r3, r3, #25
 80055b6:	f003 0303 	and.w	r3, r3, #3
 80055ba:	3301      	adds	r3, #1
 80055bc:	005b      	lsls	r3, r3, #1
 80055be:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c8:	613b      	str	r3, [r7, #16]
 80055ca:	e001      	b.n	80055d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80055cc:	2300      	movs	r3, #0
 80055ce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80055d0:	693b      	ldr	r3, [r7, #16]
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	371c      	adds	r7, #28
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	40021000 	.word	0x40021000
 80055e4:	00f42400 	.word	0x00f42400
 80055e8:	016e3600 	.word	0x016e3600

080055ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055ec:	b480      	push	{r7}
 80055ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055f0:	4b03      	ldr	r3, [pc, #12]	; (8005600 <HAL_RCC_GetHCLKFreq+0x14>)
 80055f2:	681b      	ldr	r3, [r3, #0]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	20000010 	.word	0x20000010

08005604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005608:	f7ff fff0 	bl	80055ec <HAL_RCC_GetHCLKFreq>
 800560c:	4602      	mov	r2, r0
 800560e:	4b06      	ldr	r3, [pc, #24]	; (8005628 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	0a1b      	lsrs	r3, r3, #8
 8005614:	f003 0307 	and.w	r3, r3, #7
 8005618:	4904      	ldr	r1, [pc, #16]	; (800562c <HAL_RCC_GetPCLK1Freq+0x28>)
 800561a:	5ccb      	ldrb	r3, [r1, r3]
 800561c:	f003 031f 	and.w	r3, r3, #31
 8005620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005624:	4618      	mov	r0, r3
 8005626:	bd80      	pop	{r7, pc}
 8005628:	40021000 	.word	0x40021000
 800562c:	0800a9ec 	.word	0x0800a9ec

08005630 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005634:	f7ff ffda 	bl	80055ec <HAL_RCC_GetHCLKFreq>
 8005638:	4602      	mov	r2, r0
 800563a:	4b06      	ldr	r3, [pc, #24]	; (8005654 <HAL_RCC_GetPCLK2Freq+0x24>)
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	0adb      	lsrs	r3, r3, #11
 8005640:	f003 0307 	and.w	r3, r3, #7
 8005644:	4904      	ldr	r1, [pc, #16]	; (8005658 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005646:	5ccb      	ldrb	r3, [r1, r3]
 8005648:	f003 031f 	and.w	r3, r3, #31
 800564c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005650:	4618      	mov	r0, r3
 8005652:	bd80      	pop	{r7, pc}
 8005654:	40021000 	.word	0x40021000
 8005658:	0800a9ec 	.word	0x0800a9ec

0800565c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800565c:	b480      	push	{r7}
 800565e:	b087      	sub	sp, #28
 8005660:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005662:	4b1e      	ldr	r3, [pc, #120]	; (80056dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	f003 0303 	and.w	r3, r3, #3
 800566a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800566c:	4b1b      	ldr	r3, [pc, #108]	; (80056dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	091b      	lsrs	r3, r3, #4
 8005672:	f003 030f 	and.w	r3, r3, #15
 8005676:	3301      	adds	r3, #1
 8005678:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	2b03      	cmp	r3, #3
 800567e:	d10c      	bne.n	800569a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005680:	4a17      	ldr	r2, [pc, #92]	; (80056e0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	fbb2 f3f3 	udiv	r3, r2, r3
 8005688:	4a14      	ldr	r2, [pc, #80]	; (80056dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800568a:	68d2      	ldr	r2, [r2, #12]
 800568c:	0a12      	lsrs	r2, r2, #8
 800568e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005692:	fb02 f303 	mul.w	r3, r2, r3
 8005696:	617b      	str	r3, [r7, #20]
    break;
 8005698:	e00c      	b.n	80056b4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800569a:	4a12      	ldr	r2, [pc, #72]	; (80056e4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a2:	4a0e      	ldr	r2, [pc, #56]	; (80056dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056a4:	68d2      	ldr	r2, [r2, #12]
 80056a6:	0a12      	lsrs	r2, r2, #8
 80056a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80056ac:	fb02 f303 	mul.w	r3, r2, r3
 80056b0:	617b      	str	r3, [r7, #20]
    break;
 80056b2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80056b4:	4b09      	ldr	r3, [pc, #36]	; (80056dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	0e5b      	lsrs	r3, r3, #25
 80056ba:	f003 0303 	and.w	r3, r3, #3
 80056be:	3301      	adds	r3, #1
 80056c0:	005b      	lsls	r3, r3, #1
 80056c2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056cc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80056ce:	687b      	ldr	r3, [r7, #4]
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	371c      	adds	r7, #28
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr
 80056dc:	40021000 	.word	0x40021000
 80056e0:	016e3600 	.word	0x016e3600
 80056e4:	00f42400 	.word	0x00f42400

080056e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80056f0:	2300      	movs	r3, #0
 80056f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80056f4:	2300      	movs	r3, #0
 80056f6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005700:	2b00      	cmp	r3, #0
 8005702:	f000 8098 	beq.w	8005836 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005706:	2300      	movs	r3, #0
 8005708:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800570a:	4b43      	ldr	r3, [pc, #268]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800570c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800570e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d10d      	bne.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005716:	4b40      	ldr	r3, [pc, #256]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800571a:	4a3f      	ldr	r2, [pc, #252]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800571c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005720:	6593      	str	r3, [r2, #88]	; 0x58
 8005722:	4b3d      	ldr	r3, [pc, #244]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800572a:	60bb      	str	r3, [r7, #8]
 800572c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800572e:	2301      	movs	r3, #1
 8005730:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005732:	4b3a      	ldr	r3, [pc, #232]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a39      	ldr	r2, [pc, #228]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800573c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800573e:	f7fc fe4b 	bl	80023d8 <HAL_GetTick>
 8005742:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005744:	e009      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005746:	f7fc fe47 	bl	80023d8 <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	2b02      	cmp	r3, #2
 8005752:	d902      	bls.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	74fb      	strb	r3, [r7, #19]
        break;
 8005758:	e005      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800575a:	4b30      	ldr	r3, [pc, #192]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005762:	2b00      	cmp	r3, #0
 8005764:	d0ef      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005766:	7cfb      	ldrb	r3, [r7, #19]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d159      	bne.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800576c:	4b2a      	ldr	r3, [pc, #168]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800576e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005776:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d01e      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	429a      	cmp	r2, r3
 8005786:	d019      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005788:	4b23      	ldr	r3, [pc, #140]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800578a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800578e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005792:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005794:	4b20      	ldr	r3, [pc, #128]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800579a:	4a1f      	ldr	r2, [pc, #124]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800579c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80057a4:	4b1c      	ldr	r3, [pc, #112]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057aa:	4a1b      	ldr	r2, [pc, #108]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80057b4:	4a18      	ldr	r2, [pc, #96]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d016      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c6:	f7fc fe07 	bl	80023d8 <HAL_GetTick>
 80057ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057cc:	e00b      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057ce:	f7fc fe03 	bl	80023d8 <HAL_GetTick>
 80057d2:	4602      	mov	r2, r0
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80057dc:	4293      	cmp	r3, r2
 80057de:	d902      	bls.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	74fb      	strb	r3, [r7, #19]
            break;
 80057e4:	e006      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057e6:	4b0c      	ldr	r3, [pc, #48]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ec:	f003 0302 	and.w	r3, r3, #2
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d0ec      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80057f4:	7cfb      	ldrb	r3, [r7, #19]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d10b      	bne.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057fa:	4b07      	ldr	r3, [pc, #28]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005800:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005808:	4903      	ldr	r1, [pc, #12]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800580a:	4313      	orrs	r3, r2
 800580c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005810:	e008      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005812:	7cfb      	ldrb	r3, [r7, #19]
 8005814:	74bb      	strb	r3, [r7, #18]
 8005816:	e005      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005818:	40021000 	.word	0x40021000
 800581c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005820:	7cfb      	ldrb	r3, [r7, #19]
 8005822:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005824:	7c7b      	ldrb	r3, [r7, #17]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d105      	bne.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800582a:	4ba6      	ldr	r3, [pc, #664]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800582c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800582e:	4aa5      	ldr	r2, [pc, #660]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005830:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005834:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0301 	and.w	r3, r3, #1
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00a      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005842:	4ba0      	ldr	r3, [pc, #640]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005848:	f023 0203 	bic.w	r2, r3, #3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	499c      	ldr	r1, [pc, #624]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005852:	4313      	orrs	r3, r2
 8005854:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0302 	and.w	r3, r3, #2
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00a      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005864:	4b97      	ldr	r3, [pc, #604]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800586a:	f023 020c 	bic.w	r2, r3, #12
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	4994      	ldr	r1, [pc, #592]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005874:	4313      	orrs	r3, r2
 8005876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0304 	and.w	r3, r3, #4
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00a      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005886:	4b8f      	ldr	r3, [pc, #572]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800588c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	498b      	ldr	r1, [pc, #556]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005896:	4313      	orrs	r3, r2
 8005898:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0308 	and.w	r3, r3, #8
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00a      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80058a8:	4b86      	ldr	r3, [pc, #536]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	4983      	ldr	r1, [pc, #524]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0320 	and.w	r3, r3, #32
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00a      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80058ca:	4b7e      	ldr	r3, [pc, #504]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	695b      	ldr	r3, [r3, #20]
 80058d8:	497a      	ldr	r1, [pc, #488]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00a      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058ec:	4b75      	ldr	r3, [pc, #468]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	4972      	ldr	r1, [pc, #456]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00a      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800590e:	4b6d      	ldr	r3, [pc, #436]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005914:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	69db      	ldr	r3, [r3, #28]
 800591c:	4969      	ldr	r1, [pc, #420]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800591e:	4313      	orrs	r3, r2
 8005920:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00a      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005930:	4b64      	ldr	r3, [pc, #400]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005936:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	4961      	ldr	r1, [pc, #388]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005940:	4313      	orrs	r3, r2
 8005942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00a      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005952:	4b5c      	ldr	r3, [pc, #368]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005958:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005960:	4958      	ldr	r1, [pc, #352]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005962:	4313      	orrs	r3, r2
 8005964:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005970:	2b00      	cmp	r3, #0
 8005972:	d015      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005974:	4b53      	ldr	r3, [pc, #332]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800597a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005982:	4950      	ldr	r1, [pc, #320]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005984:	4313      	orrs	r3, r2
 8005986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005992:	d105      	bne.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005994:	4b4b      	ldr	r3, [pc, #300]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	4a4a      	ldr	r2, [pc, #296]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800599a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800599e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d015      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80059ac:	4b45      	ldr	r3, [pc, #276]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ba:	4942      	ldr	r1, [pc, #264]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059ca:	d105      	bne.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059cc:	4b3d      	ldr	r3, [pc, #244]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	4a3c      	ldr	r2, [pc, #240]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059d6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d015      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80059e4:	4b37      	ldr	r3, [pc, #220]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f2:	4934      	ldr	r1, [pc, #208]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a02:	d105      	bne.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a04:	4b2f      	ldr	r3, [pc, #188]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	4a2e      	ldr	r2, [pc, #184]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a0e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d015      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a1c:	4b29      	ldr	r3, [pc, #164]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a2a:	4926      	ldr	r1, [pc, #152]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a3a:	d105      	bne.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a3c:	4b21      	ldr	r3, [pc, #132]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	4a20      	ldr	r2, [pc, #128]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a46:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d015      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a54:	4b1b      	ldr	r3, [pc, #108]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a62:	4918      	ldr	r1, [pc, #96]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a64:	4313      	orrs	r3, r2
 8005a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a72:	d105      	bne.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a74:	4b13      	ldr	r3, [pc, #76]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	4a12      	ldr	r2, [pc, #72]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a7e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d015      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005a8c:	4b0d      	ldr	r3, [pc, #52]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a92:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a9a:	490a      	ldr	r1, [pc, #40]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005aaa:	d105      	bne.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005aac:	4b05      	ldr	r3, [pc, #20]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	4a04      	ldr	r2, [pc, #16]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ab6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005ab8:	7cbb      	ldrb	r3, [r7, #18]
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3718      	adds	r7, #24
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	40021000 	.word	0x40021000

08005ac8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d101      	bne.n	8005ada <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e049      	b.n	8005b6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d106      	bne.n	8005af4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f7fc fa0e 	bl	8001f10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2202      	movs	r2, #2
 8005af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	3304      	adds	r3, #4
 8005b04:	4619      	mov	r1, r3
 8005b06:	4610      	mov	r0, r2
 8005b08:	f000 fc08 	bl	800631c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3708      	adds	r7, #8
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
	...

08005b78 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d001      	beq.n	8005b90 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e042      	b.n	8005c16 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2202      	movs	r2, #2
 8005b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a21      	ldr	r2, [pc, #132]	; (8005c24 <HAL_TIM_Base_Start+0xac>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d018      	beq.n	8005bd4 <HAL_TIM_Base_Start+0x5c>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005baa:	d013      	beq.n	8005bd4 <HAL_TIM_Base_Start+0x5c>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a1d      	ldr	r2, [pc, #116]	; (8005c28 <HAL_TIM_Base_Start+0xb0>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d00e      	beq.n	8005bd4 <HAL_TIM_Base_Start+0x5c>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a1c      	ldr	r2, [pc, #112]	; (8005c2c <HAL_TIM_Base_Start+0xb4>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d009      	beq.n	8005bd4 <HAL_TIM_Base_Start+0x5c>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a1a      	ldr	r2, [pc, #104]	; (8005c30 <HAL_TIM_Base_Start+0xb8>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d004      	beq.n	8005bd4 <HAL_TIM_Base_Start+0x5c>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a19      	ldr	r2, [pc, #100]	; (8005c34 <HAL_TIM_Base_Start+0xbc>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d115      	bne.n	8005c00 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	689a      	ldr	r2, [r3, #8]
 8005bda:	4b17      	ldr	r3, [pc, #92]	; (8005c38 <HAL_TIM_Base_Start+0xc0>)
 8005bdc:	4013      	ands	r3, r2
 8005bde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2b06      	cmp	r3, #6
 8005be4:	d015      	beq.n	8005c12 <HAL_TIM_Base_Start+0x9a>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bec:	d011      	beq.n	8005c12 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f042 0201 	orr.w	r2, r2, #1
 8005bfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bfe:	e008      	b.n	8005c12 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f042 0201 	orr.w	r2, r2, #1
 8005c0e:	601a      	str	r2, [r3, #0]
 8005c10:	e000      	b.n	8005c14 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3714      	adds	r7, #20
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	40012c00 	.word	0x40012c00
 8005c28:	40000400 	.word	0x40000400
 8005c2c:	40000800 	.word	0x40000800
 8005c30:	40013400 	.word	0x40013400
 8005c34:	40014000 	.word	0x40014000
 8005c38:	00010007 	.word	0x00010007

08005c3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d101      	bne.n	8005c4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e049      	b.n	8005ce2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d106      	bne.n	8005c68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 f841 	bl	8005cea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	3304      	adds	r3, #4
 8005c78:	4619      	mov	r1, r3
 8005c7a:	4610      	mov	r0, r2
 8005c7c:	f000 fb4e 	bl	800631c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3708      	adds	r7, #8
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005cea:	b480      	push	{r7}
 8005cec:	b083      	sub	sp, #12
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005cf2:	bf00      	nop
 8005cf4:	370c      	adds	r7, #12
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
	...

08005d00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d109      	bne.n	8005d24 <HAL_TIM_PWM_Start+0x24>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	bf14      	ite	ne
 8005d1c:	2301      	movne	r3, #1
 8005d1e:	2300      	moveq	r3, #0
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	e03c      	b.n	8005d9e <HAL_TIM_PWM_Start+0x9e>
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	2b04      	cmp	r3, #4
 8005d28:	d109      	bne.n	8005d3e <HAL_TIM_PWM_Start+0x3e>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	bf14      	ite	ne
 8005d36:	2301      	movne	r3, #1
 8005d38:	2300      	moveq	r3, #0
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	e02f      	b.n	8005d9e <HAL_TIM_PWM_Start+0x9e>
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	2b08      	cmp	r3, #8
 8005d42:	d109      	bne.n	8005d58 <HAL_TIM_PWM_Start+0x58>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	bf14      	ite	ne
 8005d50:	2301      	movne	r3, #1
 8005d52:	2300      	moveq	r3, #0
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	e022      	b.n	8005d9e <HAL_TIM_PWM_Start+0x9e>
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	2b0c      	cmp	r3, #12
 8005d5c:	d109      	bne.n	8005d72 <HAL_TIM_PWM_Start+0x72>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	bf14      	ite	ne
 8005d6a:	2301      	movne	r3, #1
 8005d6c:	2300      	moveq	r3, #0
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	e015      	b.n	8005d9e <HAL_TIM_PWM_Start+0x9e>
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	2b10      	cmp	r3, #16
 8005d76:	d109      	bne.n	8005d8c <HAL_TIM_PWM_Start+0x8c>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	bf14      	ite	ne
 8005d84:	2301      	movne	r3, #1
 8005d86:	2300      	moveq	r3, #0
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	e008      	b.n	8005d9e <HAL_TIM_PWM_Start+0x9e>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	bf14      	ite	ne
 8005d98:	2301      	movne	r3, #1
 8005d9a:	2300      	moveq	r3, #0
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d001      	beq.n	8005da6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e097      	b.n	8005ed6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d104      	bne.n	8005db6 <HAL_TIM_PWM_Start+0xb6>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2202      	movs	r2, #2
 8005db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005db4:	e023      	b.n	8005dfe <HAL_TIM_PWM_Start+0xfe>
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	2b04      	cmp	r3, #4
 8005dba:	d104      	bne.n	8005dc6 <HAL_TIM_PWM_Start+0xc6>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dc4:	e01b      	b.n	8005dfe <HAL_TIM_PWM_Start+0xfe>
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	2b08      	cmp	r3, #8
 8005dca:	d104      	bne.n	8005dd6 <HAL_TIM_PWM_Start+0xd6>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2202      	movs	r2, #2
 8005dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dd4:	e013      	b.n	8005dfe <HAL_TIM_PWM_Start+0xfe>
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	2b0c      	cmp	r3, #12
 8005dda:	d104      	bne.n	8005de6 <HAL_TIM_PWM_Start+0xe6>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2202      	movs	r2, #2
 8005de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005de4:	e00b      	b.n	8005dfe <HAL_TIM_PWM_Start+0xfe>
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	2b10      	cmp	r3, #16
 8005dea:	d104      	bne.n	8005df6 <HAL_TIM_PWM_Start+0xf6>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2202      	movs	r2, #2
 8005df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005df4:	e003      	b.n	8005dfe <HAL_TIM_PWM_Start+0xfe>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2202      	movs	r2, #2
 8005dfa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2201      	movs	r2, #1
 8005e04:	6839      	ldr	r1, [r7, #0]
 8005e06:	4618      	mov	r0, r3
 8005e08:	f000 feaa 	bl	8006b60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a33      	ldr	r2, [pc, #204]	; (8005ee0 <HAL_TIM_PWM_Start+0x1e0>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d013      	beq.n	8005e3e <HAL_TIM_PWM_Start+0x13e>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a32      	ldr	r2, [pc, #200]	; (8005ee4 <HAL_TIM_PWM_Start+0x1e4>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d00e      	beq.n	8005e3e <HAL_TIM_PWM_Start+0x13e>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a30      	ldr	r2, [pc, #192]	; (8005ee8 <HAL_TIM_PWM_Start+0x1e8>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d009      	beq.n	8005e3e <HAL_TIM_PWM_Start+0x13e>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a2f      	ldr	r2, [pc, #188]	; (8005eec <HAL_TIM_PWM_Start+0x1ec>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d004      	beq.n	8005e3e <HAL_TIM_PWM_Start+0x13e>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a2d      	ldr	r2, [pc, #180]	; (8005ef0 <HAL_TIM_PWM_Start+0x1f0>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d101      	bne.n	8005e42 <HAL_TIM_PWM_Start+0x142>
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e000      	b.n	8005e44 <HAL_TIM_PWM_Start+0x144>
 8005e42:	2300      	movs	r3, #0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d007      	beq.n	8005e58 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e56:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a20      	ldr	r2, [pc, #128]	; (8005ee0 <HAL_TIM_PWM_Start+0x1e0>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d018      	beq.n	8005e94 <HAL_TIM_PWM_Start+0x194>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e6a:	d013      	beq.n	8005e94 <HAL_TIM_PWM_Start+0x194>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a20      	ldr	r2, [pc, #128]	; (8005ef4 <HAL_TIM_PWM_Start+0x1f4>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d00e      	beq.n	8005e94 <HAL_TIM_PWM_Start+0x194>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a1f      	ldr	r2, [pc, #124]	; (8005ef8 <HAL_TIM_PWM_Start+0x1f8>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d009      	beq.n	8005e94 <HAL_TIM_PWM_Start+0x194>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a17      	ldr	r2, [pc, #92]	; (8005ee4 <HAL_TIM_PWM_Start+0x1e4>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d004      	beq.n	8005e94 <HAL_TIM_PWM_Start+0x194>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a16      	ldr	r2, [pc, #88]	; (8005ee8 <HAL_TIM_PWM_Start+0x1e8>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d115      	bne.n	8005ec0 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	689a      	ldr	r2, [r3, #8]
 8005e9a:	4b18      	ldr	r3, [pc, #96]	; (8005efc <HAL_TIM_PWM_Start+0x1fc>)
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2b06      	cmp	r3, #6
 8005ea4:	d015      	beq.n	8005ed2 <HAL_TIM_PWM_Start+0x1d2>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eac:	d011      	beq.n	8005ed2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f042 0201 	orr.w	r2, r2, #1
 8005ebc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ebe:	e008      	b.n	8005ed2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f042 0201 	orr.w	r2, r2, #1
 8005ece:	601a      	str	r2, [r3, #0]
 8005ed0:	e000      	b.n	8005ed4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ed2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	40012c00 	.word	0x40012c00
 8005ee4:	40013400 	.word	0x40013400
 8005ee8:	40014000 	.word	0x40014000
 8005eec:	40014400 	.word	0x40014400
 8005ef0:	40014800 	.word	0x40014800
 8005ef4:	40000400 	.word	0x40000400
 8005ef8:	40000800 	.word	0x40000800
 8005efc:	00010007 	.word	0x00010007

08005f00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b086      	sub	sp, #24
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d101      	bne.n	8005f1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f1a:	2302      	movs	r3, #2
 8005f1c:	e0ff      	b.n	800611e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2b14      	cmp	r3, #20
 8005f2a:	f200 80f0 	bhi.w	800610e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005f2e:	a201      	add	r2, pc, #4	; (adr r2, 8005f34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f34:	08005f89 	.word	0x08005f89
 8005f38:	0800610f 	.word	0x0800610f
 8005f3c:	0800610f 	.word	0x0800610f
 8005f40:	0800610f 	.word	0x0800610f
 8005f44:	08005fc9 	.word	0x08005fc9
 8005f48:	0800610f 	.word	0x0800610f
 8005f4c:	0800610f 	.word	0x0800610f
 8005f50:	0800610f 	.word	0x0800610f
 8005f54:	0800600b 	.word	0x0800600b
 8005f58:	0800610f 	.word	0x0800610f
 8005f5c:	0800610f 	.word	0x0800610f
 8005f60:	0800610f 	.word	0x0800610f
 8005f64:	0800604b 	.word	0x0800604b
 8005f68:	0800610f 	.word	0x0800610f
 8005f6c:	0800610f 	.word	0x0800610f
 8005f70:	0800610f 	.word	0x0800610f
 8005f74:	0800608d 	.word	0x0800608d
 8005f78:	0800610f 	.word	0x0800610f
 8005f7c:	0800610f 	.word	0x0800610f
 8005f80:	0800610f 	.word	0x0800610f
 8005f84:	080060cd 	.word	0x080060cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68b9      	ldr	r1, [r7, #8]
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f000 fa54 	bl	800643c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	699a      	ldr	r2, [r3, #24]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f042 0208 	orr.w	r2, r2, #8
 8005fa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	699a      	ldr	r2, [r3, #24]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f022 0204 	bic.w	r2, r2, #4
 8005fb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	6999      	ldr	r1, [r3, #24]
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	691a      	ldr	r2, [r3, #16]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	619a      	str	r2, [r3, #24]
      break;
 8005fc6:	e0a5      	b.n	8006114 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68b9      	ldr	r1, [r7, #8]
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f000 fac4 	bl	800655c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	699a      	ldr	r2, [r3, #24]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	699a      	ldr	r2, [r3, #24]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	6999      	ldr	r1, [r3, #24]
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	021a      	lsls	r2, r3, #8
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	430a      	orrs	r2, r1
 8006006:	619a      	str	r2, [r3, #24]
      break;
 8006008:	e084      	b.n	8006114 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68b9      	ldr	r1, [r7, #8]
 8006010:	4618      	mov	r0, r3
 8006012:	f000 fb2d 	bl	8006670 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	69da      	ldr	r2, [r3, #28]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f042 0208 	orr.w	r2, r2, #8
 8006024:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	69da      	ldr	r2, [r3, #28]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f022 0204 	bic.w	r2, r2, #4
 8006034:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	69d9      	ldr	r1, [r3, #28]
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	691a      	ldr	r2, [r3, #16]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	430a      	orrs	r2, r1
 8006046:	61da      	str	r2, [r3, #28]
      break;
 8006048:	e064      	b.n	8006114 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68b9      	ldr	r1, [r7, #8]
 8006050:	4618      	mov	r0, r3
 8006052:	f000 fb95 	bl	8006780 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	69da      	ldr	r2, [r3, #28]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006064:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	69da      	ldr	r2, [r3, #28]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006074:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	69d9      	ldr	r1, [r3, #28]
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	021a      	lsls	r2, r3, #8
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	430a      	orrs	r2, r1
 8006088:	61da      	str	r2, [r3, #28]
      break;
 800608a:	e043      	b.n	8006114 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68b9      	ldr	r1, [r7, #8]
 8006092:	4618      	mov	r0, r3
 8006094:	f000 fbfe 	bl	8006894 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f042 0208 	orr.w	r2, r2, #8
 80060a6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f022 0204 	bic.w	r2, r2, #4
 80060b6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	691a      	ldr	r2, [r3, #16]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	430a      	orrs	r2, r1
 80060c8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80060ca:	e023      	b.n	8006114 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68b9      	ldr	r1, [r7, #8]
 80060d2:	4618      	mov	r0, r3
 80060d4:	f000 fc42 	bl	800695c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060e6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060f6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	021a      	lsls	r2, r3, #8
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	430a      	orrs	r2, r1
 800610a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800610c:	e002      	b.n	8006114 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	75fb      	strb	r3, [r7, #23]
      break;
 8006112:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800611c:	7dfb      	ldrb	r3, [r7, #23]
}
 800611e:	4618      	mov	r0, r3
 8006120:	3718      	adds	r7, #24
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop

08006128 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006132:	2300      	movs	r3, #0
 8006134:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800613c:	2b01      	cmp	r3, #1
 800613e:	d101      	bne.n	8006144 <HAL_TIM_ConfigClockSource+0x1c>
 8006140:	2302      	movs	r3, #2
 8006142:	e0de      	b.n	8006302 <HAL_TIM_ConfigClockSource+0x1da>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2202      	movs	r2, #2
 8006150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006162:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006166:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800616e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68ba      	ldr	r2, [r7, #8]
 8006176:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a63      	ldr	r2, [pc, #396]	; (800630c <HAL_TIM_ConfigClockSource+0x1e4>)
 800617e:	4293      	cmp	r3, r2
 8006180:	f000 80a9 	beq.w	80062d6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006184:	4a61      	ldr	r2, [pc, #388]	; (800630c <HAL_TIM_ConfigClockSource+0x1e4>)
 8006186:	4293      	cmp	r3, r2
 8006188:	f200 80ae 	bhi.w	80062e8 <HAL_TIM_ConfigClockSource+0x1c0>
 800618c:	4a60      	ldr	r2, [pc, #384]	; (8006310 <HAL_TIM_ConfigClockSource+0x1e8>)
 800618e:	4293      	cmp	r3, r2
 8006190:	f000 80a1 	beq.w	80062d6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006194:	4a5e      	ldr	r2, [pc, #376]	; (8006310 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006196:	4293      	cmp	r3, r2
 8006198:	f200 80a6 	bhi.w	80062e8 <HAL_TIM_ConfigClockSource+0x1c0>
 800619c:	4a5d      	ldr	r2, [pc, #372]	; (8006314 <HAL_TIM_ConfigClockSource+0x1ec>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	f000 8099 	beq.w	80062d6 <HAL_TIM_ConfigClockSource+0x1ae>
 80061a4:	4a5b      	ldr	r2, [pc, #364]	; (8006314 <HAL_TIM_ConfigClockSource+0x1ec>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	f200 809e 	bhi.w	80062e8 <HAL_TIM_ConfigClockSource+0x1c0>
 80061ac:	4a5a      	ldr	r2, [pc, #360]	; (8006318 <HAL_TIM_ConfigClockSource+0x1f0>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	f000 8091 	beq.w	80062d6 <HAL_TIM_ConfigClockSource+0x1ae>
 80061b4:	4a58      	ldr	r2, [pc, #352]	; (8006318 <HAL_TIM_ConfigClockSource+0x1f0>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	f200 8096 	bhi.w	80062e8 <HAL_TIM_ConfigClockSource+0x1c0>
 80061bc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80061c0:	f000 8089 	beq.w	80062d6 <HAL_TIM_ConfigClockSource+0x1ae>
 80061c4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80061c8:	f200 808e 	bhi.w	80062e8 <HAL_TIM_ConfigClockSource+0x1c0>
 80061cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061d0:	d03e      	beq.n	8006250 <HAL_TIM_ConfigClockSource+0x128>
 80061d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061d6:	f200 8087 	bhi.w	80062e8 <HAL_TIM_ConfigClockSource+0x1c0>
 80061da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061de:	f000 8086 	beq.w	80062ee <HAL_TIM_ConfigClockSource+0x1c6>
 80061e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061e6:	d87f      	bhi.n	80062e8 <HAL_TIM_ConfigClockSource+0x1c0>
 80061e8:	2b70      	cmp	r3, #112	; 0x70
 80061ea:	d01a      	beq.n	8006222 <HAL_TIM_ConfigClockSource+0xfa>
 80061ec:	2b70      	cmp	r3, #112	; 0x70
 80061ee:	d87b      	bhi.n	80062e8 <HAL_TIM_ConfigClockSource+0x1c0>
 80061f0:	2b60      	cmp	r3, #96	; 0x60
 80061f2:	d050      	beq.n	8006296 <HAL_TIM_ConfigClockSource+0x16e>
 80061f4:	2b60      	cmp	r3, #96	; 0x60
 80061f6:	d877      	bhi.n	80062e8 <HAL_TIM_ConfigClockSource+0x1c0>
 80061f8:	2b50      	cmp	r3, #80	; 0x50
 80061fa:	d03c      	beq.n	8006276 <HAL_TIM_ConfigClockSource+0x14e>
 80061fc:	2b50      	cmp	r3, #80	; 0x50
 80061fe:	d873      	bhi.n	80062e8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006200:	2b40      	cmp	r3, #64	; 0x40
 8006202:	d058      	beq.n	80062b6 <HAL_TIM_ConfigClockSource+0x18e>
 8006204:	2b40      	cmp	r3, #64	; 0x40
 8006206:	d86f      	bhi.n	80062e8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006208:	2b30      	cmp	r3, #48	; 0x30
 800620a:	d064      	beq.n	80062d6 <HAL_TIM_ConfigClockSource+0x1ae>
 800620c:	2b30      	cmp	r3, #48	; 0x30
 800620e:	d86b      	bhi.n	80062e8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006210:	2b20      	cmp	r3, #32
 8006212:	d060      	beq.n	80062d6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006214:	2b20      	cmp	r3, #32
 8006216:	d867      	bhi.n	80062e8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006218:	2b00      	cmp	r3, #0
 800621a:	d05c      	beq.n	80062d6 <HAL_TIM_ConfigClockSource+0x1ae>
 800621c:	2b10      	cmp	r3, #16
 800621e:	d05a      	beq.n	80062d6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006220:	e062      	b.n	80062e8 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6818      	ldr	r0, [r3, #0]
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	6899      	ldr	r1, [r3, #8]
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	685a      	ldr	r2, [r3, #4]
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	f000 fc75 	bl	8006b20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006244:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68ba      	ldr	r2, [r7, #8]
 800624c:	609a      	str	r2, [r3, #8]
      break;
 800624e:	e04f      	b.n	80062f0 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6818      	ldr	r0, [r3, #0]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	6899      	ldr	r1, [r3, #8]
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	685a      	ldr	r2, [r3, #4]
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	f000 fc5e 	bl	8006b20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	689a      	ldr	r2, [r3, #8]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006272:	609a      	str	r2, [r3, #8]
      break;
 8006274:	e03c      	b.n	80062f0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6818      	ldr	r0, [r3, #0]
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	6859      	ldr	r1, [r3, #4]
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	461a      	mov	r2, r3
 8006284:	f000 fbd0 	bl	8006a28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2150      	movs	r1, #80	; 0x50
 800628e:	4618      	mov	r0, r3
 8006290:	f000 fc29 	bl	8006ae6 <TIM_ITRx_SetConfig>
      break;
 8006294:	e02c      	b.n	80062f0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6818      	ldr	r0, [r3, #0]
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	6859      	ldr	r1, [r3, #4]
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	461a      	mov	r2, r3
 80062a4:	f000 fbef 	bl	8006a86 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2160      	movs	r1, #96	; 0x60
 80062ae:	4618      	mov	r0, r3
 80062b0:	f000 fc19 	bl	8006ae6 <TIM_ITRx_SetConfig>
      break;
 80062b4:	e01c      	b.n	80062f0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6818      	ldr	r0, [r3, #0]
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	6859      	ldr	r1, [r3, #4]
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	461a      	mov	r2, r3
 80062c4:	f000 fbb0 	bl	8006a28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2140      	movs	r1, #64	; 0x40
 80062ce:	4618      	mov	r0, r3
 80062d0:	f000 fc09 	bl	8006ae6 <TIM_ITRx_SetConfig>
      break;
 80062d4:	e00c      	b.n	80062f0 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4619      	mov	r1, r3
 80062e0:	4610      	mov	r0, r2
 80062e2:	f000 fc00 	bl	8006ae6 <TIM_ITRx_SetConfig>
      break;
 80062e6:	e003      	b.n	80062f0 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	73fb      	strb	r3, [r7, #15]
      break;
 80062ec:	e000      	b.n	80062f0 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80062ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006300:	7bfb      	ldrb	r3, [r7, #15]
}
 8006302:	4618      	mov	r0, r3
 8006304:	3710      	adds	r7, #16
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	00100070 	.word	0x00100070
 8006310:	00100040 	.word	0x00100040
 8006314:	00100030 	.word	0x00100030
 8006318:	00100020 	.word	0x00100020

0800631c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a3c      	ldr	r2, [pc, #240]	; (8006420 <TIM_Base_SetConfig+0x104>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d00f      	beq.n	8006354 <TIM_Base_SetConfig+0x38>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800633a:	d00b      	beq.n	8006354 <TIM_Base_SetConfig+0x38>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a39      	ldr	r2, [pc, #228]	; (8006424 <TIM_Base_SetConfig+0x108>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d007      	beq.n	8006354 <TIM_Base_SetConfig+0x38>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a38      	ldr	r2, [pc, #224]	; (8006428 <TIM_Base_SetConfig+0x10c>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d003      	beq.n	8006354 <TIM_Base_SetConfig+0x38>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a37      	ldr	r2, [pc, #220]	; (800642c <TIM_Base_SetConfig+0x110>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d108      	bne.n	8006366 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800635a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	4313      	orrs	r3, r2
 8006364:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a2d      	ldr	r2, [pc, #180]	; (8006420 <TIM_Base_SetConfig+0x104>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d01b      	beq.n	80063a6 <TIM_Base_SetConfig+0x8a>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006374:	d017      	beq.n	80063a6 <TIM_Base_SetConfig+0x8a>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a2a      	ldr	r2, [pc, #168]	; (8006424 <TIM_Base_SetConfig+0x108>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d013      	beq.n	80063a6 <TIM_Base_SetConfig+0x8a>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a29      	ldr	r2, [pc, #164]	; (8006428 <TIM_Base_SetConfig+0x10c>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d00f      	beq.n	80063a6 <TIM_Base_SetConfig+0x8a>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a28      	ldr	r2, [pc, #160]	; (800642c <TIM_Base_SetConfig+0x110>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d00b      	beq.n	80063a6 <TIM_Base_SetConfig+0x8a>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a27      	ldr	r2, [pc, #156]	; (8006430 <TIM_Base_SetConfig+0x114>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d007      	beq.n	80063a6 <TIM_Base_SetConfig+0x8a>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a26      	ldr	r2, [pc, #152]	; (8006434 <TIM_Base_SetConfig+0x118>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d003      	beq.n	80063a6 <TIM_Base_SetConfig+0x8a>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a25      	ldr	r2, [pc, #148]	; (8006438 <TIM_Base_SetConfig+0x11c>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d108      	bne.n	80063b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	695b      	ldr	r3, [r3, #20]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	689a      	ldr	r2, [r3, #8]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a10      	ldr	r2, [pc, #64]	; (8006420 <TIM_Base_SetConfig+0x104>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d00f      	beq.n	8006404 <TIM_Base_SetConfig+0xe8>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a11      	ldr	r2, [pc, #68]	; (800642c <TIM_Base_SetConfig+0x110>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d00b      	beq.n	8006404 <TIM_Base_SetConfig+0xe8>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a10      	ldr	r2, [pc, #64]	; (8006430 <TIM_Base_SetConfig+0x114>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d007      	beq.n	8006404 <TIM_Base_SetConfig+0xe8>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a0f      	ldr	r2, [pc, #60]	; (8006434 <TIM_Base_SetConfig+0x118>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d003      	beq.n	8006404 <TIM_Base_SetConfig+0xe8>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a0e      	ldr	r2, [pc, #56]	; (8006438 <TIM_Base_SetConfig+0x11c>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d103      	bne.n	800640c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	691a      	ldr	r2, [r3, #16]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	615a      	str	r2, [r3, #20]
}
 8006412:	bf00      	nop
 8006414:	3714      	adds	r7, #20
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	40012c00 	.word	0x40012c00
 8006424:	40000400 	.word	0x40000400
 8006428:	40000800 	.word	0x40000800
 800642c:	40013400 	.word	0x40013400
 8006430:	40014000 	.word	0x40014000
 8006434:	40014400 	.word	0x40014400
 8006438:	40014800 	.word	0x40014800

0800643c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800643c:	b480      	push	{r7}
 800643e:	b087      	sub	sp, #28
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	f023 0201 	bic.w	r2, r3, #1
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800646a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800646e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f023 0303 	bic.w	r3, r3, #3
 8006476:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	4313      	orrs	r3, r2
 8006480:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	f023 0302 	bic.w	r3, r3, #2
 8006488:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	4313      	orrs	r3, r2
 8006492:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a2c      	ldr	r2, [pc, #176]	; (8006548 <TIM_OC1_SetConfig+0x10c>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d00f      	beq.n	80064bc <TIM_OC1_SetConfig+0x80>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a2b      	ldr	r2, [pc, #172]	; (800654c <TIM_OC1_SetConfig+0x110>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d00b      	beq.n	80064bc <TIM_OC1_SetConfig+0x80>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a2a      	ldr	r2, [pc, #168]	; (8006550 <TIM_OC1_SetConfig+0x114>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d007      	beq.n	80064bc <TIM_OC1_SetConfig+0x80>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a29      	ldr	r2, [pc, #164]	; (8006554 <TIM_OC1_SetConfig+0x118>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d003      	beq.n	80064bc <TIM_OC1_SetConfig+0x80>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a28      	ldr	r2, [pc, #160]	; (8006558 <TIM_OC1_SetConfig+0x11c>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d10c      	bne.n	80064d6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	f023 0308 	bic.w	r3, r3, #8
 80064c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f023 0304 	bic.w	r3, r3, #4
 80064d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a1b      	ldr	r2, [pc, #108]	; (8006548 <TIM_OC1_SetConfig+0x10c>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d00f      	beq.n	80064fe <TIM_OC1_SetConfig+0xc2>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a1a      	ldr	r2, [pc, #104]	; (800654c <TIM_OC1_SetConfig+0x110>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d00b      	beq.n	80064fe <TIM_OC1_SetConfig+0xc2>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a19      	ldr	r2, [pc, #100]	; (8006550 <TIM_OC1_SetConfig+0x114>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d007      	beq.n	80064fe <TIM_OC1_SetConfig+0xc2>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a18      	ldr	r2, [pc, #96]	; (8006554 <TIM_OC1_SetConfig+0x118>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d003      	beq.n	80064fe <TIM_OC1_SetConfig+0xc2>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a17      	ldr	r2, [pc, #92]	; (8006558 <TIM_OC1_SetConfig+0x11c>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d111      	bne.n	8006522 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006504:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800650c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	693a      	ldr	r2, [r7, #16]
 8006514:	4313      	orrs	r3, r2
 8006516:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	699b      	ldr	r3, [r3, #24]
 800651c:	693a      	ldr	r2, [r7, #16]
 800651e:	4313      	orrs	r3, r2
 8006520:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	685a      	ldr	r2, [r3, #4]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	697a      	ldr	r2, [r7, #20]
 800653a:	621a      	str	r2, [r3, #32]
}
 800653c:	bf00      	nop
 800653e:	371c      	adds	r7, #28
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr
 8006548:	40012c00 	.word	0x40012c00
 800654c:	40013400 	.word	0x40013400
 8006550:	40014000 	.word	0x40014000
 8006554:	40014400 	.word	0x40014400
 8006558:	40014800 	.word	0x40014800

0800655c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800655c:	b480      	push	{r7}
 800655e:	b087      	sub	sp, #28
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	f023 0210 	bic.w	r2, r3, #16
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a1b      	ldr	r3, [r3, #32]
 8006576:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800658a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800658e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006596:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	021b      	lsls	r3, r3, #8
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	f023 0320 	bic.w	r3, r3, #32
 80065aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	011b      	lsls	r3, r3, #4
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a28      	ldr	r2, [pc, #160]	; (800665c <TIM_OC2_SetConfig+0x100>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d003      	beq.n	80065c8 <TIM_OC2_SetConfig+0x6c>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a27      	ldr	r2, [pc, #156]	; (8006660 <TIM_OC2_SetConfig+0x104>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d10d      	bne.n	80065e4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	011b      	lsls	r3, r3, #4
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	4313      	orrs	r3, r2
 80065da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a1d      	ldr	r2, [pc, #116]	; (800665c <TIM_OC2_SetConfig+0x100>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d00f      	beq.n	800660c <TIM_OC2_SetConfig+0xb0>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a1c      	ldr	r2, [pc, #112]	; (8006660 <TIM_OC2_SetConfig+0x104>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d00b      	beq.n	800660c <TIM_OC2_SetConfig+0xb0>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a1b      	ldr	r2, [pc, #108]	; (8006664 <TIM_OC2_SetConfig+0x108>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d007      	beq.n	800660c <TIM_OC2_SetConfig+0xb0>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a1a      	ldr	r2, [pc, #104]	; (8006668 <TIM_OC2_SetConfig+0x10c>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d003      	beq.n	800660c <TIM_OC2_SetConfig+0xb0>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a19      	ldr	r2, [pc, #100]	; (800666c <TIM_OC2_SetConfig+0x110>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d113      	bne.n	8006634 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006612:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800661a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	695b      	ldr	r3, [r3, #20]
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	693a      	ldr	r2, [r7, #16]
 8006624:	4313      	orrs	r3, r2
 8006626:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	693a      	ldr	r2, [r7, #16]
 8006630:	4313      	orrs	r3, r2
 8006632:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	693a      	ldr	r2, [r7, #16]
 8006638:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	685a      	ldr	r2, [r3, #4]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	621a      	str	r2, [r3, #32]
}
 800664e:	bf00      	nop
 8006650:	371c      	adds	r7, #28
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	40012c00 	.word	0x40012c00
 8006660:	40013400 	.word	0x40013400
 8006664:	40014000 	.word	0x40014000
 8006668:	40014400 	.word	0x40014400
 800666c:	40014800 	.word	0x40014800

08006670 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006670:	b480      	push	{r7}
 8006672:	b087      	sub	sp, #28
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a1b      	ldr	r3, [r3, #32]
 800668a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800669e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f023 0303 	bic.w	r3, r3, #3
 80066aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	021b      	lsls	r3, r3, #8
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a27      	ldr	r2, [pc, #156]	; (800676c <TIM_OC3_SetConfig+0xfc>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d003      	beq.n	80066da <TIM_OC3_SetConfig+0x6a>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a26      	ldr	r2, [pc, #152]	; (8006770 <TIM_OC3_SetConfig+0x100>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d10d      	bne.n	80066f6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	021b      	lsls	r3, r3, #8
 80066e8:	697a      	ldr	r2, [r7, #20]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a1c      	ldr	r2, [pc, #112]	; (800676c <TIM_OC3_SetConfig+0xfc>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d00f      	beq.n	800671e <TIM_OC3_SetConfig+0xae>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a1b      	ldr	r2, [pc, #108]	; (8006770 <TIM_OC3_SetConfig+0x100>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d00b      	beq.n	800671e <TIM_OC3_SetConfig+0xae>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a1a      	ldr	r2, [pc, #104]	; (8006774 <TIM_OC3_SetConfig+0x104>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d007      	beq.n	800671e <TIM_OC3_SetConfig+0xae>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a19      	ldr	r2, [pc, #100]	; (8006778 <TIM_OC3_SetConfig+0x108>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d003      	beq.n	800671e <TIM_OC3_SetConfig+0xae>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a18      	ldr	r2, [pc, #96]	; (800677c <TIM_OC3_SetConfig+0x10c>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d113      	bne.n	8006746 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006724:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800672c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	011b      	lsls	r3, r3, #4
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	4313      	orrs	r3, r2
 8006738:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	011b      	lsls	r3, r3, #4
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	4313      	orrs	r3, r2
 8006744:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	685a      	ldr	r2, [r3, #4]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	697a      	ldr	r2, [r7, #20]
 800675e:	621a      	str	r2, [r3, #32]
}
 8006760:	bf00      	nop
 8006762:	371c      	adds	r7, #28
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr
 800676c:	40012c00 	.word	0x40012c00
 8006770:	40013400 	.word	0x40013400
 8006774:	40014000 	.word	0x40014000
 8006778:	40014400 	.word	0x40014400
 800677c:	40014800 	.word	0x40014800

08006780 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006780:	b480      	push	{r7}
 8006782:	b087      	sub	sp, #28
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	69db      	ldr	r3, [r3, #28]
 80067a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	021b      	lsls	r3, r3, #8
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	031b      	lsls	r3, r3, #12
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	4313      	orrs	r3, r2
 80067da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a28      	ldr	r2, [pc, #160]	; (8006880 <TIM_OC4_SetConfig+0x100>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d003      	beq.n	80067ec <TIM_OC4_SetConfig+0x6c>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a27      	ldr	r2, [pc, #156]	; (8006884 <TIM_OC4_SetConfig+0x104>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d10d      	bne.n	8006808 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	031b      	lsls	r3, r3, #12
 80067fa:	697a      	ldr	r2, [r7, #20]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006806:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a1d      	ldr	r2, [pc, #116]	; (8006880 <TIM_OC4_SetConfig+0x100>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d00f      	beq.n	8006830 <TIM_OC4_SetConfig+0xb0>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a1c      	ldr	r2, [pc, #112]	; (8006884 <TIM_OC4_SetConfig+0x104>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d00b      	beq.n	8006830 <TIM_OC4_SetConfig+0xb0>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a1b      	ldr	r2, [pc, #108]	; (8006888 <TIM_OC4_SetConfig+0x108>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d007      	beq.n	8006830 <TIM_OC4_SetConfig+0xb0>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4a1a      	ldr	r2, [pc, #104]	; (800688c <TIM_OC4_SetConfig+0x10c>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d003      	beq.n	8006830 <TIM_OC4_SetConfig+0xb0>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4a19      	ldr	r2, [pc, #100]	; (8006890 <TIM_OC4_SetConfig+0x110>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d113      	bne.n	8006858 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006836:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800683e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	695b      	ldr	r3, [r3, #20]
 8006844:	019b      	lsls	r3, r3, #6
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	4313      	orrs	r3, r2
 800684a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	019b      	lsls	r3, r3, #6
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	4313      	orrs	r3, r2
 8006856:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	693a      	ldr	r2, [r7, #16]
 800685c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	685a      	ldr	r2, [r3, #4]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	697a      	ldr	r2, [r7, #20]
 8006870:	621a      	str	r2, [r3, #32]
}
 8006872:	bf00      	nop
 8006874:	371c      	adds	r7, #28
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	40012c00 	.word	0x40012c00
 8006884:	40013400 	.word	0x40013400
 8006888:	40014000 	.word	0x40014000
 800688c:	40014400 	.word	0x40014400
 8006890:	40014800 	.word	0x40014800

08006894 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006894:	b480      	push	{r7}
 8006896:	b087      	sub	sp, #28
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a1b      	ldr	r3, [r3, #32]
 80068ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80068d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	041b      	lsls	r3, r3, #16
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a17      	ldr	r2, [pc, #92]	; (8006948 <TIM_OC5_SetConfig+0xb4>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d00f      	beq.n	800690e <TIM_OC5_SetConfig+0x7a>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a16      	ldr	r2, [pc, #88]	; (800694c <TIM_OC5_SetConfig+0xb8>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d00b      	beq.n	800690e <TIM_OC5_SetConfig+0x7a>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a15      	ldr	r2, [pc, #84]	; (8006950 <TIM_OC5_SetConfig+0xbc>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d007      	beq.n	800690e <TIM_OC5_SetConfig+0x7a>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a14      	ldr	r2, [pc, #80]	; (8006954 <TIM_OC5_SetConfig+0xc0>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d003      	beq.n	800690e <TIM_OC5_SetConfig+0x7a>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a13      	ldr	r2, [pc, #76]	; (8006958 <TIM_OC5_SetConfig+0xc4>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d109      	bne.n	8006922 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006914:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	695b      	ldr	r3, [r3, #20]
 800691a:	021b      	lsls	r3, r3, #8
 800691c:	697a      	ldr	r2, [r7, #20]
 800691e:	4313      	orrs	r3, r2
 8006920:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	697a      	ldr	r2, [r7, #20]
 8006926:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	685a      	ldr	r2, [r3, #4]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	693a      	ldr	r2, [r7, #16]
 800693a:	621a      	str	r2, [r3, #32]
}
 800693c:	bf00      	nop
 800693e:	371c      	adds	r7, #28
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr
 8006948:	40012c00 	.word	0x40012c00
 800694c:	40013400 	.word	0x40013400
 8006950:	40014000 	.word	0x40014000
 8006954:	40014400 	.word	0x40014400
 8006958:	40014800 	.word	0x40014800

0800695c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800695c:	b480      	push	{r7}
 800695e:	b087      	sub	sp, #28
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a1b      	ldr	r3, [r3, #32]
 8006976:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800698a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800698e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	021b      	lsls	r3, r3, #8
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	4313      	orrs	r3, r2
 800699a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80069a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	051b      	lsls	r3, r3, #20
 80069aa:	693a      	ldr	r2, [r7, #16]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a18      	ldr	r2, [pc, #96]	; (8006a14 <TIM_OC6_SetConfig+0xb8>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d00f      	beq.n	80069d8 <TIM_OC6_SetConfig+0x7c>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a17      	ldr	r2, [pc, #92]	; (8006a18 <TIM_OC6_SetConfig+0xbc>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d00b      	beq.n	80069d8 <TIM_OC6_SetConfig+0x7c>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a16      	ldr	r2, [pc, #88]	; (8006a1c <TIM_OC6_SetConfig+0xc0>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d007      	beq.n	80069d8 <TIM_OC6_SetConfig+0x7c>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a15      	ldr	r2, [pc, #84]	; (8006a20 <TIM_OC6_SetConfig+0xc4>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d003      	beq.n	80069d8 <TIM_OC6_SetConfig+0x7c>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a14      	ldr	r2, [pc, #80]	; (8006a24 <TIM_OC6_SetConfig+0xc8>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d109      	bne.n	80069ec <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	695b      	ldr	r3, [r3, #20]
 80069e4:	029b      	lsls	r3, r3, #10
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	697a      	ldr	r2, [r7, #20]
 80069f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	685a      	ldr	r2, [r3, #4]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	693a      	ldr	r2, [r7, #16]
 8006a04:	621a      	str	r2, [r3, #32]
}
 8006a06:	bf00      	nop
 8006a08:	371c      	adds	r7, #28
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	40012c00 	.word	0x40012c00
 8006a18:	40013400 	.word	0x40013400
 8006a1c:	40014000 	.word	0x40014000
 8006a20:	40014400 	.word	0x40014400
 8006a24:	40014800 	.word	0x40014800

08006a28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b087      	sub	sp, #28
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6a1b      	ldr	r3, [r3, #32]
 8006a38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6a1b      	ldr	r3, [r3, #32]
 8006a3e:	f023 0201 	bic.w	r2, r3, #1
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	699b      	ldr	r3, [r3, #24]
 8006a4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	011b      	lsls	r3, r3, #4
 8006a58:	693a      	ldr	r2, [r7, #16]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	f023 030a 	bic.w	r3, r3, #10
 8006a64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a66:	697a      	ldr	r2, [r7, #20]
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	693a      	ldr	r2, [r7, #16]
 8006a72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	621a      	str	r2, [r3, #32]
}
 8006a7a:	bf00      	nop
 8006a7c:	371c      	adds	r7, #28
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr

08006a86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a86:	b480      	push	{r7}
 8006a88:	b087      	sub	sp, #28
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	60f8      	str	r0, [r7, #12]
 8006a8e:	60b9      	str	r1, [r7, #8]
 8006a90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	f023 0210 	bic.w	r2, r3, #16
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6a1b      	ldr	r3, [r3, #32]
 8006aa8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ab0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	031b      	lsls	r3, r3, #12
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ac2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	011b      	lsls	r3, r3, #4
 8006ac8:	693a      	ldr	r2, [r7, #16]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	697a      	ldr	r2, [r7, #20]
 8006ad2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	621a      	str	r2, [r3, #32]
}
 8006ada:	bf00      	nop
 8006adc:	371c      	adds	r7, #28
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr

08006ae6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	b085      	sub	sp, #20
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
 8006aee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006afc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b02:	683a      	ldr	r2, [r7, #0]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	f043 0307 	orr.w	r3, r3, #7
 8006b0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	609a      	str	r2, [r3, #8]
}
 8006b14:	bf00      	nop
 8006b16:	3714      	adds	r7, #20
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b087      	sub	sp, #28
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
 8006b2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	021a      	lsls	r2, r3, #8
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	431a      	orrs	r2, r3
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	697a      	ldr	r2, [r7, #20]
 8006b52:	609a      	str	r2, [r3, #8]
}
 8006b54:	bf00      	nop
 8006b56:	371c      	adds	r7, #28
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b087      	sub	sp, #28
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	f003 031f 	and.w	r3, r3, #31
 8006b72:	2201      	movs	r2, #1
 8006b74:	fa02 f303 	lsl.w	r3, r2, r3
 8006b78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6a1a      	ldr	r2, [r3, #32]
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	43db      	mvns	r3, r3
 8006b82:	401a      	ands	r2, r3
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6a1a      	ldr	r2, [r3, #32]
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	f003 031f 	and.w	r3, r3, #31
 8006b92:	6879      	ldr	r1, [r7, #4]
 8006b94:	fa01 f303 	lsl.w	r3, r1, r3
 8006b98:	431a      	orrs	r2, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	621a      	str	r2, [r3, #32]
}
 8006b9e:	bf00      	nop
 8006ba0:	371c      	adds	r7, #28
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
	...

08006bac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b085      	sub	sp, #20
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d101      	bne.n	8006bc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bc0:	2302      	movs	r3, #2
 8006bc2:	e065      	b.n	8006c90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2202      	movs	r2, #2
 8006bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a2c      	ldr	r2, [pc, #176]	; (8006c9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d004      	beq.n	8006bf8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a2b      	ldr	r2, [pc, #172]	; (8006ca0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d108      	bne.n	8006c0a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006bfe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c14:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68fa      	ldr	r2, [r7, #12]
 8006c26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a1b      	ldr	r2, [pc, #108]	; (8006c9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d018      	beq.n	8006c64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c3a:	d013      	beq.n	8006c64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a18      	ldr	r2, [pc, #96]	; (8006ca4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d00e      	beq.n	8006c64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a17      	ldr	r2, [pc, #92]	; (8006ca8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d009      	beq.n	8006c64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a12      	ldr	r2, [pc, #72]	; (8006ca0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d004      	beq.n	8006c64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a13      	ldr	r2, [pc, #76]	; (8006cac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d10c      	bne.n	8006c7e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	68ba      	ldr	r2, [r7, #8]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2201      	movs	r2, #1
 8006c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3714      	adds	r7, #20
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr
 8006c9c:	40012c00 	.word	0x40012c00
 8006ca0:	40013400 	.word	0x40013400
 8006ca4:	40000400 	.word	0x40000400
 8006ca8:	40000800 	.word	0x40000800
 8006cac:	40014000 	.word	0x40014000

08006cb0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d101      	bne.n	8006ccc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006cc8:	2302      	movs	r3, #2
 8006cca:	e087      	b.n	8006ddc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	695b      	ldr	r3, [r3, #20]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d32:	4313      	orrs	r3, r2
 8006d34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	699b      	ldr	r3, [r3, #24]
 8006d40:	041b      	lsls	r3, r3, #16
 8006d42:	4313      	orrs	r3, r2
 8006d44:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a27      	ldr	r2, [pc, #156]	; (8006de8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d004      	beq.n	8006d5a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a25      	ldr	r2, [pc, #148]	; (8006dec <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d106      	bne.n	8006d68 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	69db      	ldr	r3, [r3, #28]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a1e      	ldr	r2, [pc, #120]	; (8006de8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d004      	beq.n	8006d7c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a1d      	ldr	r2, [pc, #116]	; (8006dec <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d126      	bne.n	8006dca <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d86:	051b      	lsls	r3, r3, #20
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	6a1b      	ldr	r3, [r3, #32]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da4:	4313      	orrs	r3, r2
 8006da6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a0e      	ldr	r2, [pc, #56]	; (8006de8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d004      	beq.n	8006dbc <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a0d      	ldr	r2, [pc, #52]	; (8006dec <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d106      	bne.n	8006dca <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68fa      	ldr	r2, [r7, #12]
 8006dd0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3714      	adds	r7, #20
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr
 8006de8:	40012c00 	.word	0x40012c00
 8006dec:	40013400 	.word	0x40013400

08006df0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d101      	bne.n	8006e02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e042      	b.n	8006e88 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d106      	bne.n	8006e1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f7fb f8e5 	bl	8001fe4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2224      	movs	r2, #36	; 0x24
 8006e1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f022 0201 	bic.w	r2, r2, #1
 8006e30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 f8c2 	bl	8006fbc <UART_SetConfig>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d101      	bne.n	8006e42 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e022      	b.n	8006e88 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d002      	beq.n	8006e50 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 fb82 	bl	8007554 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	685a      	ldr	r2, [r3, #4]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689a      	ldr	r2, [r3, #8]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f042 0201 	orr.w	r2, r2, #1
 8006e7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 fc09 	bl	8007698 <UART_CheckIdleState>
 8006e86:	4603      	mov	r3, r0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3708      	adds	r7, #8
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b08a      	sub	sp, #40	; 0x28
 8006e94:	af02      	add	r7, sp, #8
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	603b      	str	r3, [r7, #0]
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ea6:	2b20      	cmp	r3, #32
 8006ea8:	f040 8083 	bne.w	8006fb2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d002      	beq.n	8006eb8 <HAL_UART_Transmit+0x28>
 8006eb2:	88fb      	ldrh	r3, [r7, #6]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d101      	bne.n	8006ebc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e07b      	b.n	8006fb4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d101      	bne.n	8006eca <HAL_UART_Transmit+0x3a>
 8006ec6:	2302      	movs	r3, #2
 8006ec8:	e074      	b.n	8006fb4 <HAL_UART_Transmit+0x124>
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2221      	movs	r2, #33	; 0x21
 8006ede:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ee2:	f7fb fa79 	bl	80023d8 <HAL_GetTick>
 8006ee6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	88fa      	ldrh	r2, [r7, #6]
 8006eec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	88fa      	ldrh	r2, [r7, #6]
 8006ef4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f00:	d108      	bne.n	8006f14 <HAL_UART_Transmit+0x84>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d104      	bne.n	8006f14 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	61bb      	str	r3, [r7, #24]
 8006f12:	e003      	b.n	8006f1c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006f24:	e02c      	b.n	8006f80 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	9300      	str	r3, [sp, #0]
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	2180      	movs	r1, #128	; 0x80
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	f000 fbfc 	bl	800772e <UART_WaitOnFlagUntilTimeout>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d001      	beq.n	8006f40 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	e039      	b.n	8006fb4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10b      	bne.n	8006f5e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	881b      	ldrh	r3, [r3, #0]
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f54:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	3302      	adds	r3, #2
 8006f5a:	61bb      	str	r3, [r7, #24]
 8006f5c:	e007      	b.n	8006f6e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	781a      	ldrb	r2, [r3, #0]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	3b01      	subs	r3, #1
 8006f78:	b29a      	uxth	r2, r3
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d1cc      	bne.n	8006f26 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	9300      	str	r3, [sp, #0]
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	2200      	movs	r2, #0
 8006f94:	2140      	movs	r1, #64	; 0x40
 8006f96:	68f8      	ldr	r0, [r7, #12]
 8006f98:	f000 fbc9 	bl	800772e <UART_WaitOnFlagUntilTimeout>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d001      	beq.n	8006fa6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	e006      	b.n	8006fb4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2220      	movs	r2, #32
 8006faa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	e000      	b.n	8006fb4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006fb2:	2302      	movs	r3, #2
  }
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3720      	adds	r7, #32
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fc0:	b08c      	sub	sp, #48	; 0x30
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	689a      	ldr	r2, [r3, #8]
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	431a      	orrs	r2, r3
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	695b      	ldr	r3, [r3, #20]
 8006fda:	431a      	orrs	r2, r3
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	69db      	ldr	r3, [r3, #28]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	4bab      	ldr	r3, [pc, #684]	; (8007298 <UART_SetConfig+0x2dc>)
 8006fec:	4013      	ands	r3, r2
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	6812      	ldr	r2, [r2, #0]
 8006ff2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ff4:	430b      	orrs	r3, r1
 8006ff6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	68da      	ldr	r2, [r3, #12]
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	430a      	orrs	r2, r1
 800700c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	699b      	ldr	r3, [r3, #24]
 8007012:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4aa0      	ldr	r2, [pc, #640]	; (800729c <UART_SetConfig+0x2e0>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d004      	beq.n	8007028 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007024:	4313      	orrs	r3, r2
 8007026:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007032:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	6812      	ldr	r2, [r2, #0]
 800703a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800703c:	430b      	orrs	r3, r1
 800703e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007046:	f023 010f 	bic.w	r1, r3, #15
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	430a      	orrs	r2, r1
 8007054:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a91      	ldr	r2, [pc, #580]	; (80072a0 <UART_SetConfig+0x2e4>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d125      	bne.n	80070ac <UART_SetConfig+0xf0>
 8007060:	4b90      	ldr	r3, [pc, #576]	; (80072a4 <UART_SetConfig+0x2e8>)
 8007062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007066:	f003 0303 	and.w	r3, r3, #3
 800706a:	2b03      	cmp	r3, #3
 800706c:	d81a      	bhi.n	80070a4 <UART_SetConfig+0xe8>
 800706e:	a201      	add	r2, pc, #4	; (adr r2, 8007074 <UART_SetConfig+0xb8>)
 8007070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007074:	08007085 	.word	0x08007085
 8007078:	08007095 	.word	0x08007095
 800707c:	0800708d 	.word	0x0800708d
 8007080:	0800709d 	.word	0x0800709d
 8007084:	2301      	movs	r3, #1
 8007086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800708a:	e0d6      	b.n	800723a <UART_SetConfig+0x27e>
 800708c:	2302      	movs	r3, #2
 800708e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007092:	e0d2      	b.n	800723a <UART_SetConfig+0x27e>
 8007094:	2304      	movs	r3, #4
 8007096:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800709a:	e0ce      	b.n	800723a <UART_SetConfig+0x27e>
 800709c:	2308      	movs	r3, #8
 800709e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070a2:	e0ca      	b.n	800723a <UART_SetConfig+0x27e>
 80070a4:	2310      	movs	r3, #16
 80070a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070aa:	e0c6      	b.n	800723a <UART_SetConfig+0x27e>
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a7d      	ldr	r2, [pc, #500]	; (80072a8 <UART_SetConfig+0x2ec>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d138      	bne.n	8007128 <UART_SetConfig+0x16c>
 80070b6:	4b7b      	ldr	r3, [pc, #492]	; (80072a4 <UART_SetConfig+0x2e8>)
 80070b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070bc:	f003 030c 	and.w	r3, r3, #12
 80070c0:	2b0c      	cmp	r3, #12
 80070c2:	d82d      	bhi.n	8007120 <UART_SetConfig+0x164>
 80070c4:	a201      	add	r2, pc, #4	; (adr r2, 80070cc <UART_SetConfig+0x110>)
 80070c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ca:	bf00      	nop
 80070cc:	08007101 	.word	0x08007101
 80070d0:	08007121 	.word	0x08007121
 80070d4:	08007121 	.word	0x08007121
 80070d8:	08007121 	.word	0x08007121
 80070dc:	08007111 	.word	0x08007111
 80070e0:	08007121 	.word	0x08007121
 80070e4:	08007121 	.word	0x08007121
 80070e8:	08007121 	.word	0x08007121
 80070ec:	08007109 	.word	0x08007109
 80070f0:	08007121 	.word	0x08007121
 80070f4:	08007121 	.word	0x08007121
 80070f8:	08007121 	.word	0x08007121
 80070fc:	08007119 	.word	0x08007119
 8007100:	2300      	movs	r3, #0
 8007102:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007106:	e098      	b.n	800723a <UART_SetConfig+0x27e>
 8007108:	2302      	movs	r3, #2
 800710a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800710e:	e094      	b.n	800723a <UART_SetConfig+0x27e>
 8007110:	2304      	movs	r3, #4
 8007112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007116:	e090      	b.n	800723a <UART_SetConfig+0x27e>
 8007118:	2308      	movs	r3, #8
 800711a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800711e:	e08c      	b.n	800723a <UART_SetConfig+0x27e>
 8007120:	2310      	movs	r3, #16
 8007122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007126:	e088      	b.n	800723a <UART_SetConfig+0x27e>
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a5f      	ldr	r2, [pc, #380]	; (80072ac <UART_SetConfig+0x2f0>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d125      	bne.n	800717e <UART_SetConfig+0x1c2>
 8007132:	4b5c      	ldr	r3, [pc, #368]	; (80072a4 <UART_SetConfig+0x2e8>)
 8007134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007138:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800713c:	2b30      	cmp	r3, #48	; 0x30
 800713e:	d016      	beq.n	800716e <UART_SetConfig+0x1b2>
 8007140:	2b30      	cmp	r3, #48	; 0x30
 8007142:	d818      	bhi.n	8007176 <UART_SetConfig+0x1ba>
 8007144:	2b20      	cmp	r3, #32
 8007146:	d00a      	beq.n	800715e <UART_SetConfig+0x1a2>
 8007148:	2b20      	cmp	r3, #32
 800714a:	d814      	bhi.n	8007176 <UART_SetConfig+0x1ba>
 800714c:	2b00      	cmp	r3, #0
 800714e:	d002      	beq.n	8007156 <UART_SetConfig+0x19a>
 8007150:	2b10      	cmp	r3, #16
 8007152:	d008      	beq.n	8007166 <UART_SetConfig+0x1aa>
 8007154:	e00f      	b.n	8007176 <UART_SetConfig+0x1ba>
 8007156:	2300      	movs	r3, #0
 8007158:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800715c:	e06d      	b.n	800723a <UART_SetConfig+0x27e>
 800715e:	2302      	movs	r3, #2
 8007160:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007164:	e069      	b.n	800723a <UART_SetConfig+0x27e>
 8007166:	2304      	movs	r3, #4
 8007168:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800716c:	e065      	b.n	800723a <UART_SetConfig+0x27e>
 800716e:	2308      	movs	r3, #8
 8007170:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007174:	e061      	b.n	800723a <UART_SetConfig+0x27e>
 8007176:	2310      	movs	r3, #16
 8007178:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800717c:	e05d      	b.n	800723a <UART_SetConfig+0x27e>
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a4b      	ldr	r2, [pc, #300]	; (80072b0 <UART_SetConfig+0x2f4>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d125      	bne.n	80071d4 <UART_SetConfig+0x218>
 8007188:	4b46      	ldr	r3, [pc, #280]	; (80072a4 <UART_SetConfig+0x2e8>)
 800718a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800718e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007192:	2bc0      	cmp	r3, #192	; 0xc0
 8007194:	d016      	beq.n	80071c4 <UART_SetConfig+0x208>
 8007196:	2bc0      	cmp	r3, #192	; 0xc0
 8007198:	d818      	bhi.n	80071cc <UART_SetConfig+0x210>
 800719a:	2b80      	cmp	r3, #128	; 0x80
 800719c:	d00a      	beq.n	80071b4 <UART_SetConfig+0x1f8>
 800719e:	2b80      	cmp	r3, #128	; 0x80
 80071a0:	d814      	bhi.n	80071cc <UART_SetConfig+0x210>
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d002      	beq.n	80071ac <UART_SetConfig+0x1f0>
 80071a6:	2b40      	cmp	r3, #64	; 0x40
 80071a8:	d008      	beq.n	80071bc <UART_SetConfig+0x200>
 80071aa:	e00f      	b.n	80071cc <UART_SetConfig+0x210>
 80071ac:	2300      	movs	r3, #0
 80071ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071b2:	e042      	b.n	800723a <UART_SetConfig+0x27e>
 80071b4:	2302      	movs	r3, #2
 80071b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071ba:	e03e      	b.n	800723a <UART_SetConfig+0x27e>
 80071bc:	2304      	movs	r3, #4
 80071be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071c2:	e03a      	b.n	800723a <UART_SetConfig+0x27e>
 80071c4:	2308      	movs	r3, #8
 80071c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071ca:	e036      	b.n	800723a <UART_SetConfig+0x27e>
 80071cc:	2310      	movs	r3, #16
 80071ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071d2:	e032      	b.n	800723a <UART_SetConfig+0x27e>
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a30      	ldr	r2, [pc, #192]	; (800729c <UART_SetConfig+0x2e0>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d12a      	bne.n	8007234 <UART_SetConfig+0x278>
 80071de:	4b31      	ldr	r3, [pc, #196]	; (80072a4 <UART_SetConfig+0x2e8>)
 80071e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80071e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071ec:	d01a      	beq.n	8007224 <UART_SetConfig+0x268>
 80071ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071f2:	d81b      	bhi.n	800722c <UART_SetConfig+0x270>
 80071f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071f8:	d00c      	beq.n	8007214 <UART_SetConfig+0x258>
 80071fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071fe:	d815      	bhi.n	800722c <UART_SetConfig+0x270>
 8007200:	2b00      	cmp	r3, #0
 8007202:	d003      	beq.n	800720c <UART_SetConfig+0x250>
 8007204:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007208:	d008      	beq.n	800721c <UART_SetConfig+0x260>
 800720a:	e00f      	b.n	800722c <UART_SetConfig+0x270>
 800720c:	2300      	movs	r3, #0
 800720e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007212:	e012      	b.n	800723a <UART_SetConfig+0x27e>
 8007214:	2302      	movs	r3, #2
 8007216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800721a:	e00e      	b.n	800723a <UART_SetConfig+0x27e>
 800721c:	2304      	movs	r3, #4
 800721e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007222:	e00a      	b.n	800723a <UART_SetConfig+0x27e>
 8007224:	2308      	movs	r3, #8
 8007226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800722a:	e006      	b.n	800723a <UART_SetConfig+0x27e>
 800722c:	2310      	movs	r3, #16
 800722e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007232:	e002      	b.n	800723a <UART_SetConfig+0x27e>
 8007234:	2310      	movs	r3, #16
 8007236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a17      	ldr	r2, [pc, #92]	; (800729c <UART_SetConfig+0x2e0>)
 8007240:	4293      	cmp	r3, r2
 8007242:	f040 80a8 	bne.w	8007396 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007246:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800724a:	2b08      	cmp	r3, #8
 800724c:	d834      	bhi.n	80072b8 <UART_SetConfig+0x2fc>
 800724e:	a201      	add	r2, pc, #4	; (adr r2, 8007254 <UART_SetConfig+0x298>)
 8007250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007254:	08007279 	.word	0x08007279
 8007258:	080072b9 	.word	0x080072b9
 800725c:	08007281 	.word	0x08007281
 8007260:	080072b9 	.word	0x080072b9
 8007264:	08007287 	.word	0x08007287
 8007268:	080072b9 	.word	0x080072b9
 800726c:	080072b9 	.word	0x080072b9
 8007270:	080072b9 	.word	0x080072b9
 8007274:	0800728f 	.word	0x0800728f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007278:	f7fe f9c4 	bl	8005604 <HAL_RCC_GetPCLK1Freq>
 800727c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800727e:	e021      	b.n	80072c4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007280:	4b0c      	ldr	r3, [pc, #48]	; (80072b4 <UART_SetConfig+0x2f8>)
 8007282:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007284:	e01e      	b.n	80072c4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007286:	f7fe f94f 	bl	8005528 <HAL_RCC_GetSysClockFreq>
 800728a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800728c:	e01a      	b.n	80072c4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800728e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007292:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007294:	e016      	b.n	80072c4 <UART_SetConfig+0x308>
 8007296:	bf00      	nop
 8007298:	cfff69f3 	.word	0xcfff69f3
 800729c:	40008000 	.word	0x40008000
 80072a0:	40013800 	.word	0x40013800
 80072a4:	40021000 	.word	0x40021000
 80072a8:	40004400 	.word	0x40004400
 80072ac:	40004800 	.word	0x40004800
 80072b0:	40004c00 	.word	0x40004c00
 80072b4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80072b8:	2300      	movs	r3, #0
 80072ba:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80072c2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80072c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	f000 812a 	beq.w	8007520 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d0:	4a9e      	ldr	r2, [pc, #632]	; (800754c <UART_SetConfig+0x590>)
 80072d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072d6:	461a      	mov	r2, r3
 80072d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072da:	fbb3 f3f2 	udiv	r3, r3, r2
 80072de:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	685a      	ldr	r2, [r3, #4]
 80072e4:	4613      	mov	r3, r2
 80072e6:	005b      	lsls	r3, r3, #1
 80072e8:	4413      	add	r3, r2
 80072ea:	69ba      	ldr	r2, [r7, #24]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d305      	bcc.n	80072fc <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072f6:	69ba      	ldr	r2, [r7, #24]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d903      	bls.n	8007304 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007302:	e10d      	b.n	8007520 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007306:	2200      	movs	r2, #0
 8007308:	60bb      	str	r3, [r7, #8]
 800730a:	60fa      	str	r2, [r7, #12]
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007310:	4a8e      	ldr	r2, [pc, #568]	; (800754c <UART_SetConfig+0x590>)
 8007312:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007316:	b29b      	uxth	r3, r3
 8007318:	2200      	movs	r2, #0
 800731a:	603b      	str	r3, [r7, #0]
 800731c:	607a      	str	r2, [r7, #4]
 800731e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007322:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007326:	f7f9 fc67 	bl	8000bf8 <__aeabi_uldivmod>
 800732a:	4602      	mov	r2, r0
 800732c:	460b      	mov	r3, r1
 800732e:	4610      	mov	r0, r2
 8007330:	4619      	mov	r1, r3
 8007332:	f04f 0200 	mov.w	r2, #0
 8007336:	f04f 0300 	mov.w	r3, #0
 800733a:	020b      	lsls	r3, r1, #8
 800733c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007340:	0202      	lsls	r2, r0, #8
 8007342:	6979      	ldr	r1, [r7, #20]
 8007344:	6849      	ldr	r1, [r1, #4]
 8007346:	0849      	lsrs	r1, r1, #1
 8007348:	2000      	movs	r0, #0
 800734a:	460c      	mov	r4, r1
 800734c:	4605      	mov	r5, r0
 800734e:	eb12 0804 	adds.w	r8, r2, r4
 8007352:	eb43 0905 	adc.w	r9, r3, r5
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	469a      	mov	sl, r3
 800735e:	4693      	mov	fp, r2
 8007360:	4652      	mov	r2, sl
 8007362:	465b      	mov	r3, fp
 8007364:	4640      	mov	r0, r8
 8007366:	4649      	mov	r1, r9
 8007368:	f7f9 fc46 	bl	8000bf8 <__aeabi_uldivmod>
 800736c:	4602      	mov	r2, r0
 800736e:	460b      	mov	r3, r1
 8007370:	4613      	mov	r3, r2
 8007372:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007374:	6a3b      	ldr	r3, [r7, #32]
 8007376:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800737a:	d308      	bcc.n	800738e <UART_SetConfig+0x3d2>
 800737c:	6a3b      	ldr	r3, [r7, #32]
 800737e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007382:	d204      	bcs.n	800738e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	6a3a      	ldr	r2, [r7, #32]
 800738a:	60da      	str	r2, [r3, #12]
 800738c:	e0c8      	b.n	8007520 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007394:	e0c4      	b.n	8007520 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	69db      	ldr	r3, [r3, #28]
 800739a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800739e:	d167      	bne.n	8007470 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80073a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80073a4:	2b08      	cmp	r3, #8
 80073a6:	d828      	bhi.n	80073fa <UART_SetConfig+0x43e>
 80073a8:	a201      	add	r2, pc, #4	; (adr r2, 80073b0 <UART_SetConfig+0x3f4>)
 80073aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ae:	bf00      	nop
 80073b0:	080073d5 	.word	0x080073d5
 80073b4:	080073dd 	.word	0x080073dd
 80073b8:	080073e5 	.word	0x080073e5
 80073bc:	080073fb 	.word	0x080073fb
 80073c0:	080073eb 	.word	0x080073eb
 80073c4:	080073fb 	.word	0x080073fb
 80073c8:	080073fb 	.word	0x080073fb
 80073cc:	080073fb 	.word	0x080073fb
 80073d0:	080073f3 	.word	0x080073f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073d4:	f7fe f916 	bl	8005604 <HAL_RCC_GetPCLK1Freq>
 80073d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80073da:	e014      	b.n	8007406 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073dc:	f7fe f928 	bl	8005630 <HAL_RCC_GetPCLK2Freq>
 80073e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80073e2:	e010      	b.n	8007406 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073e4:	4b5a      	ldr	r3, [pc, #360]	; (8007550 <UART_SetConfig+0x594>)
 80073e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80073e8:	e00d      	b.n	8007406 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073ea:	f7fe f89d 	bl	8005528 <HAL_RCC_GetSysClockFreq>
 80073ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80073f0:	e009      	b.n	8007406 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80073f8:	e005      	b.n	8007406 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80073fa:	2300      	movs	r3, #0
 80073fc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007404:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007408:	2b00      	cmp	r3, #0
 800740a:	f000 8089 	beq.w	8007520 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007412:	4a4e      	ldr	r2, [pc, #312]	; (800754c <UART_SetConfig+0x590>)
 8007414:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007418:	461a      	mov	r2, r3
 800741a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007420:	005a      	lsls	r2, r3, #1
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	085b      	lsrs	r3, r3, #1
 8007428:	441a      	add	r2, r3
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007432:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007434:	6a3b      	ldr	r3, [r7, #32]
 8007436:	2b0f      	cmp	r3, #15
 8007438:	d916      	bls.n	8007468 <UART_SetConfig+0x4ac>
 800743a:	6a3b      	ldr	r3, [r7, #32]
 800743c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007440:	d212      	bcs.n	8007468 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007442:	6a3b      	ldr	r3, [r7, #32]
 8007444:	b29b      	uxth	r3, r3
 8007446:	f023 030f 	bic.w	r3, r3, #15
 800744a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800744c:	6a3b      	ldr	r3, [r7, #32]
 800744e:	085b      	lsrs	r3, r3, #1
 8007450:	b29b      	uxth	r3, r3
 8007452:	f003 0307 	and.w	r3, r3, #7
 8007456:	b29a      	uxth	r2, r3
 8007458:	8bfb      	ldrh	r3, [r7, #30]
 800745a:	4313      	orrs	r3, r2
 800745c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	8bfa      	ldrh	r2, [r7, #30]
 8007464:	60da      	str	r2, [r3, #12]
 8007466:	e05b      	b.n	8007520 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800746e:	e057      	b.n	8007520 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007470:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007474:	2b08      	cmp	r3, #8
 8007476:	d828      	bhi.n	80074ca <UART_SetConfig+0x50e>
 8007478:	a201      	add	r2, pc, #4	; (adr r2, 8007480 <UART_SetConfig+0x4c4>)
 800747a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800747e:	bf00      	nop
 8007480:	080074a5 	.word	0x080074a5
 8007484:	080074ad 	.word	0x080074ad
 8007488:	080074b5 	.word	0x080074b5
 800748c:	080074cb 	.word	0x080074cb
 8007490:	080074bb 	.word	0x080074bb
 8007494:	080074cb 	.word	0x080074cb
 8007498:	080074cb 	.word	0x080074cb
 800749c:	080074cb 	.word	0x080074cb
 80074a0:	080074c3 	.word	0x080074c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074a4:	f7fe f8ae 	bl	8005604 <HAL_RCC_GetPCLK1Freq>
 80074a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80074aa:	e014      	b.n	80074d6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074ac:	f7fe f8c0 	bl	8005630 <HAL_RCC_GetPCLK2Freq>
 80074b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80074b2:	e010      	b.n	80074d6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074b4:	4b26      	ldr	r3, [pc, #152]	; (8007550 <UART_SetConfig+0x594>)
 80074b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80074b8:	e00d      	b.n	80074d6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074ba:	f7fe f835 	bl	8005528 <HAL_RCC_GetSysClockFreq>
 80074be:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80074c0:	e009      	b.n	80074d6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80074c8:	e005      	b.n	80074d6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80074ca:	2300      	movs	r3, #0
 80074cc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80074d4:	bf00      	nop
    }

    if (pclk != 0U)
 80074d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d021      	beq.n	8007520 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e0:	4a1a      	ldr	r2, [pc, #104]	; (800754c <UART_SetConfig+0x590>)
 80074e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074e6:	461a      	mov	r2, r3
 80074e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	085b      	lsrs	r3, r3, #1
 80074f4:	441a      	add	r2, r3
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80074fe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007500:	6a3b      	ldr	r3, [r7, #32]
 8007502:	2b0f      	cmp	r3, #15
 8007504:	d909      	bls.n	800751a <UART_SetConfig+0x55e>
 8007506:	6a3b      	ldr	r3, [r7, #32]
 8007508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800750c:	d205      	bcs.n	800751a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800750e:	6a3b      	ldr	r3, [r7, #32]
 8007510:	b29a      	uxth	r2, r3
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	60da      	str	r2, [r3, #12]
 8007518:	e002      	b.n	8007520 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	2201      	movs	r2, #1
 8007524:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	2201      	movs	r2, #1
 800752c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	2200      	movs	r2, #0
 8007534:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	2200      	movs	r2, #0
 800753a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800753c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007540:	4618      	mov	r0, r3
 8007542:	3730      	adds	r7, #48	; 0x30
 8007544:	46bd      	mov	sp, r7
 8007546:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800754a:	bf00      	nop
 800754c:	0800a9f4 	.word	0x0800a9f4
 8007550:	00f42400 	.word	0x00f42400

08007554 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007560:	f003 0301 	and.w	r3, r3, #1
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00a      	beq.n	800757e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	430a      	orrs	r2, r1
 800757c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007582:	f003 0302 	and.w	r3, r3, #2
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00a      	beq.n	80075a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	430a      	orrs	r2, r1
 800759e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a4:	f003 0304 	and.w	r3, r3, #4
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00a      	beq.n	80075c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	430a      	orrs	r2, r1
 80075c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c6:	f003 0308 	and.w	r3, r3, #8
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00a      	beq.n	80075e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	430a      	orrs	r2, r1
 80075e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e8:	f003 0310 	and.w	r3, r3, #16
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00a      	beq.n	8007606 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	430a      	orrs	r2, r1
 8007604:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800760a:	f003 0320 	and.w	r3, r3, #32
 800760e:	2b00      	cmp	r3, #0
 8007610:	d00a      	beq.n	8007628 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	430a      	orrs	r2, r1
 8007626:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800762c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007630:	2b00      	cmp	r3, #0
 8007632:	d01a      	beq.n	800766a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	430a      	orrs	r2, r1
 8007648:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800764e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007652:	d10a      	bne.n	800766a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	430a      	orrs	r2, r1
 8007668:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800766e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00a      	beq.n	800768c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	430a      	orrs	r2, r1
 800768a:	605a      	str	r2, [r3, #4]
  }
}
 800768c:	bf00      	nop
 800768e:	370c      	adds	r7, #12
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b086      	sub	sp, #24
 800769c:	af02      	add	r7, sp, #8
 800769e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80076a8:	f7fa fe96 	bl	80023d8 <HAL_GetTick>
 80076ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 0308 	and.w	r3, r3, #8
 80076b8:	2b08      	cmp	r3, #8
 80076ba:	d10e      	bne.n	80076da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80076c0:	9300      	str	r3, [sp, #0]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 f82f 	bl	800772e <UART_WaitOnFlagUntilTimeout>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d001      	beq.n	80076da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076d6:	2303      	movs	r3, #3
 80076d8:	e025      	b.n	8007726 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 0304 	and.w	r3, r3, #4
 80076e4:	2b04      	cmp	r3, #4
 80076e6:	d10e      	bne.n	8007706 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80076ec:	9300      	str	r3, [sp, #0]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 f819 	bl	800772e <UART_WaitOnFlagUntilTimeout>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d001      	beq.n	8007706 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007702:	2303      	movs	r3, #3
 8007704:	e00f      	b.n	8007726 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2220      	movs	r2, #32
 800770a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2220      	movs	r2, #32
 8007712:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b09c      	sub	sp, #112	; 0x70
 8007732:	af00      	add	r7, sp, #0
 8007734:	60f8      	str	r0, [r7, #12]
 8007736:	60b9      	str	r1, [r7, #8]
 8007738:	603b      	str	r3, [r7, #0]
 800773a:	4613      	mov	r3, r2
 800773c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800773e:	e0a9      	b.n	8007894 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007740:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007746:	f000 80a5 	beq.w	8007894 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800774a:	f7fa fe45 	bl	80023d8 <HAL_GetTick>
 800774e:	4602      	mov	r2, r0
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	1ad3      	subs	r3, r2, r3
 8007754:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007756:	429a      	cmp	r2, r3
 8007758:	d302      	bcc.n	8007760 <UART_WaitOnFlagUntilTimeout+0x32>
 800775a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800775c:	2b00      	cmp	r3, #0
 800775e:	d140      	bne.n	80077e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007768:	e853 3f00 	ldrex	r3, [r3]
 800776c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800776e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007770:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007774:	667b      	str	r3, [r7, #100]	; 0x64
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	461a      	mov	r2, r3
 800777c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800777e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007780:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007782:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007784:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007786:	e841 2300 	strex	r3, r2, [r1]
 800778a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800778c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800778e:	2b00      	cmp	r3, #0
 8007790:	d1e6      	bne.n	8007760 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	3308      	adds	r3, #8
 8007798:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800779c:	e853 3f00 	ldrex	r3, [r3]
 80077a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a4:	f023 0301 	bic.w	r3, r3, #1
 80077a8:	663b      	str	r3, [r7, #96]	; 0x60
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	3308      	adds	r3, #8
 80077b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80077b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80077b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80077b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077ba:	e841 2300 	strex	r3, r2, [r1]
 80077be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80077c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1e5      	bne.n	8007792 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2220      	movs	r2, #32
 80077ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2220      	movs	r2, #32
 80077d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2200      	movs	r2, #0
 80077da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80077de:	2303      	movs	r3, #3
 80077e0:	e069      	b.n	80078b6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 0304 	and.w	r3, r3, #4
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d051      	beq.n	8007894 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	69db      	ldr	r3, [r3, #28]
 80077f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077fe:	d149      	bne.n	8007894 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007808:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007812:	e853 3f00 	ldrex	r3, [r3]
 8007816:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800781e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	461a      	mov	r2, r3
 8007826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007828:	637b      	str	r3, [r7, #52]	; 0x34
 800782a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800782e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007830:	e841 2300 	strex	r3, r2, [r1]
 8007834:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007838:	2b00      	cmp	r3, #0
 800783a:	d1e6      	bne.n	800780a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	3308      	adds	r3, #8
 8007842:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	e853 3f00 	ldrex	r3, [r3]
 800784a:	613b      	str	r3, [r7, #16]
   return(result);
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	f023 0301 	bic.w	r3, r3, #1
 8007852:	66bb      	str	r3, [r7, #104]	; 0x68
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	3308      	adds	r3, #8
 800785a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800785c:	623a      	str	r2, [r7, #32]
 800785e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007860:	69f9      	ldr	r1, [r7, #28]
 8007862:	6a3a      	ldr	r2, [r7, #32]
 8007864:	e841 2300 	strex	r3, r2, [r1]
 8007868:	61bb      	str	r3, [r7, #24]
   return(result);
 800786a:	69bb      	ldr	r3, [r7, #24]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d1e5      	bne.n	800783c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2220      	movs	r2, #32
 8007874:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2220      	movs	r2, #32
 800787c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2220      	movs	r2, #32
 8007884:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007890:	2303      	movs	r3, #3
 8007892:	e010      	b.n	80078b6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	69da      	ldr	r2, [r3, #28]
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	4013      	ands	r3, r2
 800789e:	68ba      	ldr	r2, [r7, #8]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	bf0c      	ite	eq
 80078a4:	2301      	moveq	r3, #1
 80078a6:	2300      	movne	r3, #0
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	461a      	mov	r2, r3
 80078ac:	79fb      	ldrb	r3, [r7, #7]
 80078ae:	429a      	cmp	r2, r3
 80078b0:	f43f af46 	beq.w	8007740 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3770      	adds	r7, #112	; 0x70
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}

080078be <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80078be:	b480      	push	{r7}
 80078c0:	b085      	sub	sp, #20
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d101      	bne.n	80078d4 <HAL_UARTEx_DisableFifoMode+0x16>
 80078d0:	2302      	movs	r3, #2
 80078d2:	e027      	b.n	8007924 <HAL_UARTEx_DisableFifoMode+0x66>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2224      	movs	r2, #36	; 0x24
 80078e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f022 0201 	bic.w	r2, r2, #1
 80078fa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007902:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2220      	movs	r2, #32
 8007916:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007922:	2300      	movs	r3, #0
}
 8007924:	4618      	mov	r0, r3
 8007926:	3714      	adds	r7, #20
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007940:	2b01      	cmp	r3, #1
 8007942:	d101      	bne.n	8007948 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007944:	2302      	movs	r3, #2
 8007946:	e02d      	b.n	80079a4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2224      	movs	r2, #36	; 0x24
 8007954:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f022 0201 	bic.w	r2, r2, #1
 800796e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	683a      	ldr	r2, [r7, #0]
 8007980:	430a      	orrs	r2, r1
 8007982:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 f84f 	bl	8007a28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2220      	movs	r2, #32
 8007996:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3710      	adds	r7, #16
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d101      	bne.n	80079c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80079c0:	2302      	movs	r3, #2
 80079c2:	e02d      	b.n	8007a20 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2224      	movs	r2, #36	; 0x24
 80079d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f022 0201 	bic.w	r2, r2, #1
 80079ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	683a      	ldr	r2, [r7, #0]
 80079fc:	430a      	orrs	r2, r1
 80079fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 f811 	bl	8007a28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	68fa      	ldr	r2, [r7, #12]
 8007a0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2220      	movs	r2, #32
 8007a12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3710      	adds	r7, #16
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b085      	sub	sp, #20
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d108      	bne.n	8007a4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007a48:	e031      	b.n	8007aae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007a4a:	2308      	movs	r3, #8
 8007a4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007a4e:	2308      	movs	r3, #8
 8007a50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	0e5b      	lsrs	r3, r3, #25
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	f003 0307 	and.w	r3, r3, #7
 8007a60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	0f5b      	lsrs	r3, r3, #29
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	f003 0307 	and.w	r3, r3, #7
 8007a70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a72:	7bbb      	ldrb	r3, [r7, #14]
 8007a74:	7b3a      	ldrb	r2, [r7, #12]
 8007a76:	4911      	ldr	r1, [pc, #68]	; (8007abc <UARTEx_SetNbDataToProcess+0x94>)
 8007a78:	5c8a      	ldrb	r2, [r1, r2]
 8007a7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007a7e:	7b3a      	ldrb	r2, [r7, #12]
 8007a80:	490f      	ldr	r1, [pc, #60]	; (8007ac0 <UARTEx_SetNbDataToProcess+0x98>)
 8007a82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a84:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a90:	7bfb      	ldrb	r3, [r7, #15]
 8007a92:	7b7a      	ldrb	r2, [r7, #13]
 8007a94:	4909      	ldr	r1, [pc, #36]	; (8007abc <UARTEx_SetNbDataToProcess+0x94>)
 8007a96:	5c8a      	ldrb	r2, [r1, r2]
 8007a98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007a9c:	7b7a      	ldrb	r2, [r7, #13]
 8007a9e:	4908      	ldr	r1, [pc, #32]	; (8007ac0 <UARTEx_SetNbDataToProcess+0x98>)
 8007aa0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007aa2:	fb93 f3f2 	sdiv	r3, r3, r2
 8007aa6:	b29a      	uxth	r2, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007aae:	bf00      	nop
 8007ab0:	3714      	adds	r7, #20
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop
 8007abc:	0800aa0c 	.word	0x0800aa0c
 8007ac0:	0800aa14 	.word	0x0800aa14

08007ac4 <__errno>:
 8007ac4:	4b01      	ldr	r3, [pc, #4]	; (8007acc <__errno+0x8>)
 8007ac6:	6818      	ldr	r0, [r3, #0]
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	2000001c 	.word	0x2000001c

08007ad0 <__libc_init_array>:
 8007ad0:	b570      	push	{r4, r5, r6, lr}
 8007ad2:	4d0d      	ldr	r5, [pc, #52]	; (8007b08 <__libc_init_array+0x38>)
 8007ad4:	4c0d      	ldr	r4, [pc, #52]	; (8007b0c <__libc_init_array+0x3c>)
 8007ad6:	1b64      	subs	r4, r4, r5
 8007ad8:	10a4      	asrs	r4, r4, #2
 8007ada:	2600      	movs	r6, #0
 8007adc:	42a6      	cmp	r6, r4
 8007ade:	d109      	bne.n	8007af4 <__libc_init_array+0x24>
 8007ae0:	4d0b      	ldr	r5, [pc, #44]	; (8007b10 <__libc_init_array+0x40>)
 8007ae2:	4c0c      	ldr	r4, [pc, #48]	; (8007b14 <__libc_init_array+0x44>)
 8007ae4:	f002 ff04 	bl	800a8f0 <_init>
 8007ae8:	1b64      	subs	r4, r4, r5
 8007aea:	10a4      	asrs	r4, r4, #2
 8007aec:	2600      	movs	r6, #0
 8007aee:	42a6      	cmp	r6, r4
 8007af0:	d105      	bne.n	8007afe <__libc_init_array+0x2e>
 8007af2:	bd70      	pop	{r4, r5, r6, pc}
 8007af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007af8:	4798      	blx	r3
 8007afa:	3601      	adds	r6, #1
 8007afc:	e7ee      	b.n	8007adc <__libc_init_array+0xc>
 8007afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b02:	4798      	blx	r3
 8007b04:	3601      	adds	r6, #1
 8007b06:	e7f2      	b.n	8007aee <__libc_init_array+0x1e>
 8007b08:	0800adfc 	.word	0x0800adfc
 8007b0c:	0800adfc 	.word	0x0800adfc
 8007b10:	0800adfc 	.word	0x0800adfc
 8007b14:	0800ae00 	.word	0x0800ae00

08007b18 <memset>:
 8007b18:	4402      	add	r2, r0
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d100      	bne.n	8007b22 <memset+0xa>
 8007b20:	4770      	bx	lr
 8007b22:	f803 1b01 	strb.w	r1, [r3], #1
 8007b26:	e7f9      	b.n	8007b1c <memset+0x4>

08007b28 <__cvt>:
 8007b28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b2c:	ec55 4b10 	vmov	r4, r5, d0
 8007b30:	2d00      	cmp	r5, #0
 8007b32:	460e      	mov	r6, r1
 8007b34:	4619      	mov	r1, r3
 8007b36:	462b      	mov	r3, r5
 8007b38:	bfbb      	ittet	lt
 8007b3a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007b3e:	461d      	movlt	r5, r3
 8007b40:	2300      	movge	r3, #0
 8007b42:	232d      	movlt	r3, #45	; 0x2d
 8007b44:	700b      	strb	r3, [r1, #0]
 8007b46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b48:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007b4c:	4691      	mov	r9, r2
 8007b4e:	f023 0820 	bic.w	r8, r3, #32
 8007b52:	bfbc      	itt	lt
 8007b54:	4622      	movlt	r2, r4
 8007b56:	4614      	movlt	r4, r2
 8007b58:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b5c:	d005      	beq.n	8007b6a <__cvt+0x42>
 8007b5e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007b62:	d100      	bne.n	8007b66 <__cvt+0x3e>
 8007b64:	3601      	adds	r6, #1
 8007b66:	2102      	movs	r1, #2
 8007b68:	e000      	b.n	8007b6c <__cvt+0x44>
 8007b6a:	2103      	movs	r1, #3
 8007b6c:	ab03      	add	r3, sp, #12
 8007b6e:	9301      	str	r3, [sp, #4]
 8007b70:	ab02      	add	r3, sp, #8
 8007b72:	9300      	str	r3, [sp, #0]
 8007b74:	ec45 4b10 	vmov	d0, r4, r5
 8007b78:	4653      	mov	r3, sl
 8007b7a:	4632      	mov	r2, r6
 8007b7c:	f000 fcec 	bl	8008558 <_dtoa_r>
 8007b80:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007b84:	4607      	mov	r7, r0
 8007b86:	d102      	bne.n	8007b8e <__cvt+0x66>
 8007b88:	f019 0f01 	tst.w	r9, #1
 8007b8c:	d022      	beq.n	8007bd4 <__cvt+0xac>
 8007b8e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b92:	eb07 0906 	add.w	r9, r7, r6
 8007b96:	d110      	bne.n	8007bba <__cvt+0x92>
 8007b98:	783b      	ldrb	r3, [r7, #0]
 8007b9a:	2b30      	cmp	r3, #48	; 0x30
 8007b9c:	d10a      	bne.n	8007bb4 <__cvt+0x8c>
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	4620      	mov	r0, r4
 8007ba4:	4629      	mov	r1, r5
 8007ba6:	f7f8 ffb7 	bl	8000b18 <__aeabi_dcmpeq>
 8007baa:	b918      	cbnz	r0, 8007bb4 <__cvt+0x8c>
 8007bac:	f1c6 0601 	rsb	r6, r6, #1
 8007bb0:	f8ca 6000 	str.w	r6, [sl]
 8007bb4:	f8da 3000 	ldr.w	r3, [sl]
 8007bb8:	4499      	add	r9, r3
 8007bba:	2200      	movs	r2, #0
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	4629      	mov	r1, r5
 8007bc2:	f7f8 ffa9 	bl	8000b18 <__aeabi_dcmpeq>
 8007bc6:	b108      	cbz	r0, 8007bcc <__cvt+0xa4>
 8007bc8:	f8cd 900c 	str.w	r9, [sp, #12]
 8007bcc:	2230      	movs	r2, #48	; 0x30
 8007bce:	9b03      	ldr	r3, [sp, #12]
 8007bd0:	454b      	cmp	r3, r9
 8007bd2:	d307      	bcc.n	8007be4 <__cvt+0xbc>
 8007bd4:	9b03      	ldr	r3, [sp, #12]
 8007bd6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007bd8:	1bdb      	subs	r3, r3, r7
 8007bda:	4638      	mov	r0, r7
 8007bdc:	6013      	str	r3, [r2, #0]
 8007bde:	b004      	add	sp, #16
 8007be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007be4:	1c59      	adds	r1, r3, #1
 8007be6:	9103      	str	r1, [sp, #12]
 8007be8:	701a      	strb	r2, [r3, #0]
 8007bea:	e7f0      	b.n	8007bce <__cvt+0xa6>

08007bec <__exponent>:
 8007bec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2900      	cmp	r1, #0
 8007bf2:	bfb8      	it	lt
 8007bf4:	4249      	neglt	r1, r1
 8007bf6:	f803 2b02 	strb.w	r2, [r3], #2
 8007bfa:	bfb4      	ite	lt
 8007bfc:	222d      	movlt	r2, #45	; 0x2d
 8007bfe:	222b      	movge	r2, #43	; 0x2b
 8007c00:	2909      	cmp	r1, #9
 8007c02:	7042      	strb	r2, [r0, #1]
 8007c04:	dd2a      	ble.n	8007c5c <__exponent+0x70>
 8007c06:	f10d 0407 	add.w	r4, sp, #7
 8007c0a:	46a4      	mov	ip, r4
 8007c0c:	270a      	movs	r7, #10
 8007c0e:	46a6      	mov	lr, r4
 8007c10:	460a      	mov	r2, r1
 8007c12:	fb91 f6f7 	sdiv	r6, r1, r7
 8007c16:	fb07 1516 	mls	r5, r7, r6, r1
 8007c1a:	3530      	adds	r5, #48	; 0x30
 8007c1c:	2a63      	cmp	r2, #99	; 0x63
 8007c1e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007c22:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007c26:	4631      	mov	r1, r6
 8007c28:	dcf1      	bgt.n	8007c0e <__exponent+0x22>
 8007c2a:	3130      	adds	r1, #48	; 0x30
 8007c2c:	f1ae 0502 	sub.w	r5, lr, #2
 8007c30:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007c34:	1c44      	adds	r4, r0, #1
 8007c36:	4629      	mov	r1, r5
 8007c38:	4561      	cmp	r1, ip
 8007c3a:	d30a      	bcc.n	8007c52 <__exponent+0x66>
 8007c3c:	f10d 0209 	add.w	r2, sp, #9
 8007c40:	eba2 020e 	sub.w	r2, r2, lr
 8007c44:	4565      	cmp	r5, ip
 8007c46:	bf88      	it	hi
 8007c48:	2200      	movhi	r2, #0
 8007c4a:	4413      	add	r3, r2
 8007c4c:	1a18      	subs	r0, r3, r0
 8007c4e:	b003      	add	sp, #12
 8007c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c56:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007c5a:	e7ed      	b.n	8007c38 <__exponent+0x4c>
 8007c5c:	2330      	movs	r3, #48	; 0x30
 8007c5e:	3130      	adds	r1, #48	; 0x30
 8007c60:	7083      	strb	r3, [r0, #2]
 8007c62:	70c1      	strb	r1, [r0, #3]
 8007c64:	1d03      	adds	r3, r0, #4
 8007c66:	e7f1      	b.n	8007c4c <__exponent+0x60>

08007c68 <_printf_float>:
 8007c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c6c:	ed2d 8b02 	vpush	{d8}
 8007c70:	b08d      	sub	sp, #52	; 0x34
 8007c72:	460c      	mov	r4, r1
 8007c74:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007c78:	4616      	mov	r6, r2
 8007c7a:	461f      	mov	r7, r3
 8007c7c:	4605      	mov	r5, r0
 8007c7e:	f001 fa59 	bl	8009134 <_localeconv_r>
 8007c82:	f8d0 a000 	ldr.w	sl, [r0]
 8007c86:	4650      	mov	r0, sl
 8007c88:	f7f8 faca 	bl	8000220 <strlen>
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	930a      	str	r3, [sp, #40]	; 0x28
 8007c90:	6823      	ldr	r3, [r4, #0]
 8007c92:	9305      	str	r3, [sp, #20]
 8007c94:	f8d8 3000 	ldr.w	r3, [r8]
 8007c98:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007c9c:	3307      	adds	r3, #7
 8007c9e:	f023 0307 	bic.w	r3, r3, #7
 8007ca2:	f103 0208 	add.w	r2, r3, #8
 8007ca6:	f8c8 2000 	str.w	r2, [r8]
 8007caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007cb2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007cb6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007cba:	9307      	str	r3, [sp, #28]
 8007cbc:	f8cd 8018 	str.w	r8, [sp, #24]
 8007cc0:	ee08 0a10 	vmov	s16, r0
 8007cc4:	4b9f      	ldr	r3, [pc, #636]	; (8007f44 <_printf_float+0x2dc>)
 8007cc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007cca:	f04f 32ff 	mov.w	r2, #4294967295
 8007cce:	f7f8 ff55 	bl	8000b7c <__aeabi_dcmpun>
 8007cd2:	bb88      	cbnz	r0, 8007d38 <_printf_float+0xd0>
 8007cd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007cd8:	4b9a      	ldr	r3, [pc, #616]	; (8007f44 <_printf_float+0x2dc>)
 8007cda:	f04f 32ff 	mov.w	r2, #4294967295
 8007cde:	f7f8 ff2f 	bl	8000b40 <__aeabi_dcmple>
 8007ce2:	bb48      	cbnz	r0, 8007d38 <_printf_float+0xd0>
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	4640      	mov	r0, r8
 8007cea:	4649      	mov	r1, r9
 8007cec:	f7f8 ff1e 	bl	8000b2c <__aeabi_dcmplt>
 8007cf0:	b110      	cbz	r0, 8007cf8 <_printf_float+0x90>
 8007cf2:	232d      	movs	r3, #45	; 0x2d
 8007cf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cf8:	4b93      	ldr	r3, [pc, #588]	; (8007f48 <_printf_float+0x2e0>)
 8007cfa:	4894      	ldr	r0, [pc, #592]	; (8007f4c <_printf_float+0x2e4>)
 8007cfc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007d00:	bf94      	ite	ls
 8007d02:	4698      	movls	r8, r3
 8007d04:	4680      	movhi	r8, r0
 8007d06:	2303      	movs	r3, #3
 8007d08:	6123      	str	r3, [r4, #16]
 8007d0a:	9b05      	ldr	r3, [sp, #20]
 8007d0c:	f023 0204 	bic.w	r2, r3, #4
 8007d10:	6022      	str	r2, [r4, #0]
 8007d12:	f04f 0900 	mov.w	r9, #0
 8007d16:	9700      	str	r7, [sp, #0]
 8007d18:	4633      	mov	r3, r6
 8007d1a:	aa0b      	add	r2, sp, #44	; 0x2c
 8007d1c:	4621      	mov	r1, r4
 8007d1e:	4628      	mov	r0, r5
 8007d20:	f000 f9d8 	bl	80080d4 <_printf_common>
 8007d24:	3001      	adds	r0, #1
 8007d26:	f040 8090 	bne.w	8007e4a <_printf_float+0x1e2>
 8007d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d2e:	b00d      	add	sp, #52	; 0x34
 8007d30:	ecbd 8b02 	vpop	{d8}
 8007d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d38:	4642      	mov	r2, r8
 8007d3a:	464b      	mov	r3, r9
 8007d3c:	4640      	mov	r0, r8
 8007d3e:	4649      	mov	r1, r9
 8007d40:	f7f8 ff1c 	bl	8000b7c <__aeabi_dcmpun>
 8007d44:	b140      	cbz	r0, 8007d58 <_printf_float+0xf0>
 8007d46:	464b      	mov	r3, r9
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	bfbc      	itt	lt
 8007d4c:	232d      	movlt	r3, #45	; 0x2d
 8007d4e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007d52:	487f      	ldr	r0, [pc, #508]	; (8007f50 <_printf_float+0x2e8>)
 8007d54:	4b7f      	ldr	r3, [pc, #508]	; (8007f54 <_printf_float+0x2ec>)
 8007d56:	e7d1      	b.n	8007cfc <_printf_float+0x94>
 8007d58:	6863      	ldr	r3, [r4, #4]
 8007d5a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007d5e:	9206      	str	r2, [sp, #24]
 8007d60:	1c5a      	adds	r2, r3, #1
 8007d62:	d13f      	bne.n	8007de4 <_printf_float+0x17c>
 8007d64:	2306      	movs	r3, #6
 8007d66:	6063      	str	r3, [r4, #4]
 8007d68:	9b05      	ldr	r3, [sp, #20]
 8007d6a:	6861      	ldr	r1, [r4, #4]
 8007d6c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007d70:	2300      	movs	r3, #0
 8007d72:	9303      	str	r3, [sp, #12]
 8007d74:	ab0a      	add	r3, sp, #40	; 0x28
 8007d76:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007d7a:	ab09      	add	r3, sp, #36	; 0x24
 8007d7c:	ec49 8b10 	vmov	d0, r8, r9
 8007d80:	9300      	str	r3, [sp, #0]
 8007d82:	6022      	str	r2, [r4, #0]
 8007d84:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007d88:	4628      	mov	r0, r5
 8007d8a:	f7ff fecd 	bl	8007b28 <__cvt>
 8007d8e:	9b06      	ldr	r3, [sp, #24]
 8007d90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d92:	2b47      	cmp	r3, #71	; 0x47
 8007d94:	4680      	mov	r8, r0
 8007d96:	d108      	bne.n	8007daa <_printf_float+0x142>
 8007d98:	1cc8      	adds	r0, r1, #3
 8007d9a:	db02      	blt.n	8007da2 <_printf_float+0x13a>
 8007d9c:	6863      	ldr	r3, [r4, #4]
 8007d9e:	4299      	cmp	r1, r3
 8007da0:	dd41      	ble.n	8007e26 <_printf_float+0x1be>
 8007da2:	f1ab 0b02 	sub.w	fp, fp, #2
 8007da6:	fa5f fb8b 	uxtb.w	fp, fp
 8007daa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007dae:	d820      	bhi.n	8007df2 <_printf_float+0x18a>
 8007db0:	3901      	subs	r1, #1
 8007db2:	465a      	mov	r2, fp
 8007db4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007db8:	9109      	str	r1, [sp, #36]	; 0x24
 8007dba:	f7ff ff17 	bl	8007bec <__exponent>
 8007dbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dc0:	1813      	adds	r3, r2, r0
 8007dc2:	2a01      	cmp	r2, #1
 8007dc4:	4681      	mov	r9, r0
 8007dc6:	6123      	str	r3, [r4, #16]
 8007dc8:	dc02      	bgt.n	8007dd0 <_printf_float+0x168>
 8007dca:	6822      	ldr	r2, [r4, #0]
 8007dcc:	07d2      	lsls	r2, r2, #31
 8007dce:	d501      	bpl.n	8007dd4 <_printf_float+0x16c>
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	6123      	str	r3, [r4, #16]
 8007dd4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d09c      	beq.n	8007d16 <_printf_float+0xae>
 8007ddc:	232d      	movs	r3, #45	; 0x2d
 8007dde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007de2:	e798      	b.n	8007d16 <_printf_float+0xae>
 8007de4:	9a06      	ldr	r2, [sp, #24]
 8007de6:	2a47      	cmp	r2, #71	; 0x47
 8007de8:	d1be      	bne.n	8007d68 <_printf_float+0x100>
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1bc      	bne.n	8007d68 <_printf_float+0x100>
 8007dee:	2301      	movs	r3, #1
 8007df0:	e7b9      	b.n	8007d66 <_printf_float+0xfe>
 8007df2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007df6:	d118      	bne.n	8007e2a <_printf_float+0x1c2>
 8007df8:	2900      	cmp	r1, #0
 8007dfa:	6863      	ldr	r3, [r4, #4]
 8007dfc:	dd0b      	ble.n	8007e16 <_printf_float+0x1ae>
 8007dfe:	6121      	str	r1, [r4, #16]
 8007e00:	b913      	cbnz	r3, 8007e08 <_printf_float+0x1a0>
 8007e02:	6822      	ldr	r2, [r4, #0]
 8007e04:	07d0      	lsls	r0, r2, #31
 8007e06:	d502      	bpl.n	8007e0e <_printf_float+0x1a6>
 8007e08:	3301      	adds	r3, #1
 8007e0a:	440b      	add	r3, r1
 8007e0c:	6123      	str	r3, [r4, #16]
 8007e0e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007e10:	f04f 0900 	mov.w	r9, #0
 8007e14:	e7de      	b.n	8007dd4 <_printf_float+0x16c>
 8007e16:	b913      	cbnz	r3, 8007e1e <_printf_float+0x1b6>
 8007e18:	6822      	ldr	r2, [r4, #0]
 8007e1a:	07d2      	lsls	r2, r2, #31
 8007e1c:	d501      	bpl.n	8007e22 <_printf_float+0x1ba>
 8007e1e:	3302      	adds	r3, #2
 8007e20:	e7f4      	b.n	8007e0c <_printf_float+0x1a4>
 8007e22:	2301      	movs	r3, #1
 8007e24:	e7f2      	b.n	8007e0c <_printf_float+0x1a4>
 8007e26:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007e2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e2c:	4299      	cmp	r1, r3
 8007e2e:	db05      	blt.n	8007e3c <_printf_float+0x1d4>
 8007e30:	6823      	ldr	r3, [r4, #0]
 8007e32:	6121      	str	r1, [r4, #16]
 8007e34:	07d8      	lsls	r0, r3, #31
 8007e36:	d5ea      	bpl.n	8007e0e <_printf_float+0x1a6>
 8007e38:	1c4b      	adds	r3, r1, #1
 8007e3a:	e7e7      	b.n	8007e0c <_printf_float+0x1a4>
 8007e3c:	2900      	cmp	r1, #0
 8007e3e:	bfd4      	ite	le
 8007e40:	f1c1 0202 	rsble	r2, r1, #2
 8007e44:	2201      	movgt	r2, #1
 8007e46:	4413      	add	r3, r2
 8007e48:	e7e0      	b.n	8007e0c <_printf_float+0x1a4>
 8007e4a:	6823      	ldr	r3, [r4, #0]
 8007e4c:	055a      	lsls	r2, r3, #21
 8007e4e:	d407      	bmi.n	8007e60 <_printf_float+0x1f8>
 8007e50:	6923      	ldr	r3, [r4, #16]
 8007e52:	4642      	mov	r2, r8
 8007e54:	4631      	mov	r1, r6
 8007e56:	4628      	mov	r0, r5
 8007e58:	47b8      	blx	r7
 8007e5a:	3001      	adds	r0, #1
 8007e5c:	d12c      	bne.n	8007eb8 <_printf_float+0x250>
 8007e5e:	e764      	b.n	8007d2a <_printf_float+0xc2>
 8007e60:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e64:	f240 80e0 	bls.w	8008028 <_printf_float+0x3c0>
 8007e68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	2300      	movs	r3, #0
 8007e70:	f7f8 fe52 	bl	8000b18 <__aeabi_dcmpeq>
 8007e74:	2800      	cmp	r0, #0
 8007e76:	d034      	beq.n	8007ee2 <_printf_float+0x27a>
 8007e78:	4a37      	ldr	r2, [pc, #220]	; (8007f58 <_printf_float+0x2f0>)
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	4631      	mov	r1, r6
 8007e7e:	4628      	mov	r0, r5
 8007e80:	47b8      	blx	r7
 8007e82:	3001      	adds	r0, #1
 8007e84:	f43f af51 	beq.w	8007d2a <_printf_float+0xc2>
 8007e88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	db02      	blt.n	8007e96 <_printf_float+0x22e>
 8007e90:	6823      	ldr	r3, [r4, #0]
 8007e92:	07d8      	lsls	r0, r3, #31
 8007e94:	d510      	bpl.n	8007eb8 <_printf_float+0x250>
 8007e96:	ee18 3a10 	vmov	r3, s16
 8007e9a:	4652      	mov	r2, sl
 8007e9c:	4631      	mov	r1, r6
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	47b8      	blx	r7
 8007ea2:	3001      	adds	r0, #1
 8007ea4:	f43f af41 	beq.w	8007d2a <_printf_float+0xc2>
 8007ea8:	f04f 0800 	mov.w	r8, #0
 8007eac:	f104 091a 	add.w	r9, r4, #26
 8007eb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007eb2:	3b01      	subs	r3, #1
 8007eb4:	4543      	cmp	r3, r8
 8007eb6:	dc09      	bgt.n	8007ecc <_printf_float+0x264>
 8007eb8:	6823      	ldr	r3, [r4, #0]
 8007eba:	079b      	lsls	r3, r3, #30
 8007ebc:	f100 8105 	bmi.w	80080ca <_printf_float+0x462>
 8007ec0:	68e0      	ldr	r0, [r4, #12]
 8007ec2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ec4:	4298      	cmp	r0, r3
 8007ec6:	bfb8      	it	lt
 8007ec8:	4618      	movlt	r0, r3
 8007eca:	e730      	b.n	8007d2e <_printf_float+0xc6>
 8007ecc:	2301      	movs	r3, #1
 8007ece:	464a      	mov	r2, r9
 8007ed0:	4631      	mov	r1, r6
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	47b8      	blx	r7
 8007ed6:	3001      	adds	r0, #1
 8007ed8:	f43f af27 	beq.w	8007d2a <_printf_float+0xc2>
 8007edc:	f108 0801 	add.w	r8, r8, #1
 8007ee0:	e7e6      	b.n	8007eb0 <_printf_float+0x248>
 8007ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	dc39      	bgt.n	8007f5c <_printf_float+0x2f4>
 8007ee8:	4a1b      	ldr	r2, [pc, #108]	; (8007f58 <_printf_float+0x2f0>)
 8007eea:	2301      	movs	r3, #1
 8007eec:	4631      	mov	r1, r6
 8007eee:	4628      	mov	r0, r5
 8007ef0:	47b8      	blx	r7
 8007ef2:	3001      	adds	r0, #1
 8007ef4:	f43f af19 	beq.w	8007d2a <_printf_float+0xc2>
 8007ef8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007efc:	4313      	orrs	r3, r2
 8007efe:	d102      	bne.n	8007f06 <_printf_float+0x29e>
 8007f00:	6823      	ldr	r3, [r4, #0]
 8007f02:	07d9      	lsls	r1, r3, #31
 8007f04:	d5d8      	bpl.n	8007eb8 <_printf_float+0x250>
 8007f06:	ee18 3a10 	vmov	r3, s16
 8007f0a:	4652      	mov	r2, sl
 8007f0c:	4631      	mov	r1, r6
 8007f0e:	4628      	mov	r0, r5
 8007f10:	47b8      	blx	r7
 8007f12:	3001      	adds	r0, #1
 8007f14:	f43f af09 	beq.w	8007d2a <_printf_float+0xc2>
 8007f18:	f04f 0900 	mov.w	r9, #0
 8007f1c:	f104 0a1a 	add.w	sl, r4, #26
 8007f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f22:	425b      	negs	r3, r3
 8007f24:	454b      	cmp	r3, r9
 8007f26:	dc01      	bgt.n	8007f2c <_printf_float+0x2c4>
 8007f28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f2a:	e792      	b.n	8007e52 <_printf_float+0x1ea>
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	4652      	mov	r2, sl
 8007f30:	4631      	mov	r1, r6
 8007f32:	4628      	mov	r0, r5
 8007f34:	47b8      	blx	r7
 8007f36:	3001      	adds	r0, #1
 8007f38:	f43f aef7 	beq.w	8007d2a <_printf_float+0xc2>
 8007f3c:	f109 0901 	add.w	r9, r9, #1
 8007f40:	e7ee      	b.n	8007f20 <_printf_float+0x2b8>
 8007f42:	bf00      	nop
 8007f44:	7fefffff 	.word	0x7fefffff
 8007f48:	0800aa20 	.word	0x0800aa20
 8007f4c:	0800aa24 	.word	0x0800aa24
 8007f50:	0800aa2c 	.word	0x0800aa2c
 8007f54:	0800aa28 	.word	0x0800aa28
 8007f58:	0800aa30 	.word	0x0800aa30
 8007f5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f60:	429a      	cmp	r2, r3
 8007f62:	bfa8      	it	ge
 8007f64:	461a      	movge	r2, r3
 8007f66:	2a00      	cmp	r2, #0
 8007f68:	4691      	mov	r9, r2
 8007f6a:	dc37      	bgt.n	8007fdc <_printf_float+0x374>
 8007f6c:	f04f 0b00 	mov.w	fp, #0
 8007f70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f74:	f104 021a 	add.w	r2, r4, #26
 8007f78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f7a:	9305      	str	r3, [sp, #20]
 8007f7c:	eba3 0309 	sub.w	r3, r3, r9
 8007f80:	455b      	cmp	r3, fp
 8007f82:	dc33      	bgt.n	8007fec <_printf_float+0x384>
 8007f84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	db3b      	blt.n	8008004 <_printf_float+0x39c>
 8007f8c:	6823      	ldr	r3, [r4, #0]
 8007f8e:	07da      	lsls	r2, r3, #31
 8007f90:	d438      	bmi.n	8008004 <_printf_float+0x39c>
 8007f92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f94:	9a05      	ldr	r2, [sp, #20]
 8007f96:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f98:	1a9a      	subs	r2, r3, r2
 8007f9a:	eba3 0901 	sub.w	r9, r3, r1
 8007f9e:	4591      	cmp	r9, r2
 8007fa0:	bfa8      	it	ge
 8007fa2:	4691      	movge	r9, r2
 8007fa4:	f1b9 0f00 	cmp.w	r9, #0
 8007fa8:	dc35      	bgt.n	8008016 <_printf_float+0x3ae>
 8007faa:	f04f 0800 	mov.w	r8, #0
 8007fae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007fb2:	f104 0a1a 	add.w	sl, r4, #26
 8007fb6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fba:	1a9b      	subs	r3, r3, r2
 8007fbc:	eba3 0309 	sub.w	r3, r3, r9
 8007fc0:	4543      	cmp	r3, r8
 8007fc2:	f77f af79 	ble.w	8007eb8 <_printf_float+0x250>
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	4652      	mov	r2, sl
 8007fca:	4631      	mov	r1, r6
 8007fcc:	4628      	mov	r0, r5
 8007fce:	47b8      	blx	r7
 8007fd0:	3001      	adds	r0, #1
 8007fd2:	f43f aeaa 	beq.w	8007d2a <_printf_float+0xc2>
 8007fd6:	f108 0801 	add.w	r8, r8, #1
 8007fda:	e7ec      	b.n	8007fb6 <_printf_float+0x34e>
 8007fdc:	4613      	mov	r3, r2
 8007fde:	4631      	mov	r1, r6
 8007fe0:	4642      	mov	r2, r8
 8007fe2:	4628      	mov	r0, r5
 8007fe4:	47b8      	blx	r7
 8007fe6:	3001      	adds	r0, #1
 8007fe8:	d1c0      	bne.n	8007f6c <_printf_float+0x304>
 8007fea:	e69e      	b.n	8007d2a <_printf_float+0xc2>
 8007fec:	2301      	movs	r3, #1
 8007fee:	4631      	mov	r1, r6
 8007ff0:	4628      	mov	r0, r5
 8007ff2:	9205      	str	r2, [sp, #20]
 8007ff4:	47b8      	blx	r7
 8007ff6:	3001      	adds	r0, #1
 8007ff8:	f43f ae97 	beq.w	8007d2a <_printf_float+0xc2>
 8007ffc:	9a05      	ldr	r2, [sp, #20]
 8007ffe:	f10b 0b01 	add.w	fp, fp, #1
 8008002:	e7b9      	b.n	8007f78 <_printf_float+0x310>
 8008004:	ee18 3a10 	vmov	r3, s16
 8008008:	4652      	mov	r2, sl
 800800a:	4631      	mov	r1, r6
 800800c:	4628      	mov	r0, r5
 800800e:	47b8      	blx	r7
 8008010:	3001      	adds	r0, #1
 8008012:	d1be      	bne.n	8007f92 <_printf_float+0x32a>
 8008014:	e689      	b.n	8007d2a <_printf_float+0xc2>
 8008016:	9a05      	ldr	r2, [sp, #20]
 8008018:	464b      	mov	r3, r9
 800801a:	4442      	add	r2, r8
 800801c:	4631      	mov	r1, r6
 800801e:	4628      	mov	r0, r5
 8008020:	47b8      	blx	r7
 8008022:	3001      	adds	r0, #1
 8008024:	d1c1      	bne.n	8007faa <_printf_float+0x342>
 8008026:	e680      	b.n	8007d2a <_printf_float+0xc2>
 8008028:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800802a:	2a01      	cmp	r2, #1
 800802c:	dc01      	bgt.n	8008032 <_printf_float+0x3ca>
 800802e:	07db      	lsls	r3, r3, #31
 8008030:	d538      	bpl.n	80080a4 <_printf_float+0x43c>
 8008032:	2301      	movs	r3, #1
 8008034:	4642      	mov	r2, r8
 8008036:	4631      	mov	r1, r6
 8008038:	4628      	mov	r0, r5
 800803a:	47b8      	blx	r7
 800803c:	3001      	adds	r0, #1
 800803e:	f43f ae74 	beq.w	8007d2a <_printf_float+0xc2>
 8008042:	ee18 3a10 	vmov	r3, s16
 8008046:	4652      	mov	r2, sl
 8008048:	4631      	mov	r1, r6
 800804a:	4628      	mov	r0, r5
 800804c:	47b8      	blx	r7
 800804e:	3001      	adds	r0, #1
 8008050:	f43f ae6b 	beq.w	8007d2a <_printf_float+0xc2>
 8008054:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008058:	2200      	movs	r2, #0
 800805a:	2300      	movs	r3, #0
 800805c:	f7f8 fd5c 	bl	8000b18 <__aeabi_dcmpeq>
 8008060:	b9d8      	cbnz	r0, 800809a <_printf_float+0x432>
 8008062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008064:	f108 0201 	add.w	r2, r8, #1
 8008068:	3b01      	subs	r3, #1
 800806a:	4631      	mov	r1, r6
 800806c:	4628      	mov	r0, r5
 800806e:	47b8      	blx	r7
 8008070:	3001      	adds	r0, #1
 8008072:	d10e      	bne.n	8008092 <_printf_float+0x42a>
 8008074:	e659      	b.n	8007d2a <_printf_float+0xc2>
 8008076:	2301      	movs	r3, #1
 8008078:	4652      	mov	r2, sl
 800807a:	4631      	mov	r1, r6
 800807c:	4628      	mov	r0, r5
 800807e:	47b8      	blx	r7
 8008080:	3001      	adds	r0, #1
 8008082:	f43f ae52 	beq.w	8007d2a <_printf_float+0xc2>
 8008086:	f108 0801 	add.w	r8, r8, #1
 800808a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800808c:	3b01      	subs	r3, #1
 800808e:	4543      	cmp	r3, r8
 8008090:	dcf1      	bgt.n	8008076 <_printf_float+0x40e>
 8008092:	464b      	mov	r3, r9
 8008094:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008098:	e6dc      	b.n	8007e54 <_printf_float+0x1ec>
 800809a:	f04f 0800 	mov.w	r8, #0
 800809e:	f104 0a1a 	add.w	sl, r4, #26
 80080a2:	e7f2      	b.n	800808a <_printf_float+0x422>
 80080a4:	2301      	movs	r3, #1
 80080a6:	4642      	mov	r2, r8
 80080a8:	e7df      	b.n	800806a <_printf_float+0x402>
 80080aa:	2301      	movs	r3, #1
 80080ac:	464a      	mov	r2, r9
 80080ae:	4631      	mov	r1, r6
 80080b0:	4628      	mov	r0, r5
 80080b2:	47b8      	blx	r7
 80080b4:	3001      	adds	r0, #1
 80080b6:	f43f ae38 	beq.w	8007d2a <_printf_float+0xc2>
 80080ba:	f108 0801 	add.w	r8, r8, #1
 80080be:	68e3      	ldr	r3, [r4, #12]
 80080c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80080c2:	1a5b      	subs	r3, r3, r1
 80080c4:	4543      	cmp	r3, r8
 80080c6:	dcf0      	bgt.n	80080aa <_printf_float+0x442>
 80080c8:	e6fa      	b.n	8007ec0 <_printf_float+0x258>
 80080ca:	f04f 0800 	mov.w	r8, #0
 80080ce:	f104 0919 	add.w	r9, r4, #25
 80080d2:	e7f4      	b.n	80080be <_printf_float+0x456>

080080d4 <_printf_common>:
 80080d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080d8:	4616      	mov	r6, r2
 80080da:	4699      	mov	r9, r3
 80080dc:	688a      	ldr	r2, [r1, #8]
 80080de:	690b      	ldr	r3, [r1, #16]
 80080e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080e4:	4293      	cmp	r3, r2
 80080e6:	bfb8      	it	lt
 80080e8:	4613      	movlt	r3, r2
 80080ea:	6033      	str	r3, [r6, #0]
 80080ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80080f0:	4607      	mov	r7, r0
 80080f2:	460c      	mov	r4, r1
 80080f4:	b10a      	cbz	r2, 80080fa <_printf_common+0x26>
 80080f6:	3301      	adds	r3, #1
 80080f8:	6033      	str	r3, [r6, #0]
 80080fa:	6823      	ldr	r3, [r4, #0]
 80080fc:	0699      	lsls	r1, r3, #26
 80080fe:	bf42      	ittt	mi
 8008100:	6833      	ldrmi	r3, [r6, #0]
 8008102:	3302      	addmi	r3, #2
 8008104:	6033      	strmi	r3, [r6, #0]
 8008106:	6825      	ldr	r5, [r4, #0]
 8008108:	f015 0506 	ands.w	r5, r5, #6
 800810c:	d106      	bne.n	800811c <_printf_common+0x48>
 800810e:	f104 0a19 	add.w	sl, r4, #25
 8008112:	68e3      	ldr	r3, [r4, #12]
 8008114:	6832      	ldr	r2, [r6, #0]
 8008116:	1a9b      	subs	r3, r3, r2
 8008118:	42ab      	cmp	r3, r5
 800811a:	dc26      	bgt.n	800816a <_printf_common+0x96>
 800811c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008120:	1e13      	subs	r3, r2, #0
 8008122:	6822      	ldr	r2, [r4, #0]
 8008124:	bf18      	it	ne
 8008126:	2301      	movne	r3, #1
 8008128:	0692      	lsls	r2, r2, #26
 800812a:	d42b      	bmi.n	8008184 <_printf_common+0xb0>
 800812c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008130:	4649      	mov	r1, r9
 8008132:	4638      	mov	r0, r7
 8008134:	47c0      	blx	r8
 8008136:	3001      	adds	r0, #1
 8008138:	d01e      	beq.n	8008178 <_printf_common+0xa4>
 800813a:	6823      	ldr	r3, [r4, #0]
 800813c:	68e5      	ldr	r5, [r4, #12]
 800813e:	6832      	ldr	r2, [r6, #0]
 8008140:	f003 0306 	and.w	r3, r3, #6
 8008144:	2b04      	cmp	r3, #4
 8008146:	bf08      	it	eq
 8008148:	1aad      	subeq	r5, r5, r2
 800814a:	68a3      	ldr	r3, [r4, #8]
 800814c:	6922      	ldr	r2, [r4, #16]
 800814e:	bf0c      	ite	eq
 8008150:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008154:	2500      	movne	r5, #0
 8008156:	4293      	cmp	r3, r2
 8008158:	bfc4      	itt	gt
 800815a:	1a9b      	subgt	r3, r3, r2
 800815c:	18ed      	addgt	r5, r5, r3
 800815e:	2600      	movs	r6, #0
 8008160:	341a      	adds	r4, #26
 8008162:	42b5      	cmp	r5, r6
 8008164:	d11a      	bne.n	800819c <_printf_common+0xc8>
 8008166:	2000      	movs	r0, #0
 8008168:	e008      	b.n	800817c <_printf_common+0xa8>
 800816a:	2301      	movs	r3, #1
 800816c:	4652      	mov	r2, sl
 800816e:	4649      	mov	r1, r9
 8008170:	4638      	mov	r0, r7
 8008172:	47c0      	blx	r8
 8008174:	3001      	adds	r0, #1
 8008176:	d103      	bne.n	8008180 <_printf_common+0xac>
 8008178:	f04f 30ff 	mov.w	r0, #4294967295
 800817c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008180:	3501      	adds	r5, #1
 8008182:	e7c6      	b.n	8008112 <_printf_common+0x3e>
 8008184:	18e1      	adds	r1, r4, r3
 8008186:	1c5a      	adds	r2, r3, #1
 8008188:	2030      	movs	r0, #48	; 0x30
 800818a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800818e:	4422      	add	r2, r4
 8008190:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008194:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008198:	3302      	adds	r3, #2
 800819a:	e7c7      	b.n	800812c <_printf_common+0x58>
 800819c:	2301      	movs	r3, #1
 800819e:	4622      	mov	r2, r4
 80081a0:	4649      	mov	r1, r9
 80081a2:	4638      	mov	r0, r7
 80081a4:	47c0      	blx	r8
 80081a6:	3001      	adds	r0, #1
 80081a8:	d0e6      	beq.n	8008178 <_printf_common+0xa4>
 80081aa:	3601      	adds	r6, #1
 80081ac:	e7d9      	b.n	8008162 <_printf_common+0x8e>
	...

080081b0 <_printf_i>:
 80081b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081b4:	7e0f      	ldrb	r7, [r1, #24]
 80081b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80081b8:	2f78      	cmp	r7, #120	; 0x78
 80081ba:	4691      	mov	r9, r2
 80081bc:	4680      	mov	r8, r0
 80081be:	460c      	mov	r4, r1
 80081c0:	469a      	mov	sl, r3
 80081c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80081c6:	d807      	bhi.n	80081d8 <_printf_i+0x28>
 80081c8:	2f62      	cmp	r7, #98	; 0x62
 80081ca:	d80a      	bhi.n	80081e2 <_printf_i+0x32>
 80081cc:	2f00      	cmp	r7, #0
 80081ce:	f000 80d8 	beq.w	8008382 <_printf_i+0x1d2>
 80081d2:	2f58      	cmp	r7, #88	; 0x58
 80081d4:	f000 80a3 	beq.w	800831e <_printf_i+0x16e>
 80081d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80081e0:	e03a      	b.n	8008258 <_printf_i+0xa8>
 80081e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80081e6:	2b15      	cmp	r3, #21
 80081e8:	d8f6      	bhi.n	80081d8 <_printf_i+0x28>
 80081ea:	a101      	add	r1, pc, #4	; (adr r1, 80081f0 <_printf_i+0x40>)
 80081ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80081f0:	08008249 	.word	0x08008249
 80081f4:	0800825d 	.word	0x0800825d
 80081f8:	080081d9 	.word	0x080081d9
 80081fc:	080081d9 	.word	0x080081d9
 8008200:	080081d9 	.word	0x080081d9
 8008204:	080081d9 	.word	0x080081d9
 8008208:	0800825d 	.word	0x0800825d
 800820c:	080081d9 	.word	0x080081d9
 8008210:	080081d9 	.word	0x080081d9
 8008214:	080081d9 	.word	0x080081d9
 8008218:	080081d9 	.word	0x080081d9
 800821c:	08008369 	.word	0x08008369
 8008220:	0800828d 	.word	0x0800828d
 8008224:	0800834b 	.word	0x0800834b
 8008228:	080081d9 	.word	0x080081d9
 800822c:	080081d9 	.word	0x080081d9
 8008230:	0800838b 	.word	0x0800838b
 8008234:	080081d9 	.word	0x080081d9
 8008238:	0800828d 	.word	0x0800828d
 800823c:	080081d9 	.word	0x080081d9
 8008240:	080081d9 	.word	0x080081d9
 8008244:	08008353 	.word	0x08008353
 8008248:	682b      	ldr	r3, [r5, #0]
 800824a:	1d1a      	adds	r2, r3, #4
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	602a      	str	r2, [r5, #0]
 8008250:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008254:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008258:	2301      	movs	r3, #1
 800825a:	e0a3      	b.n	80083a4 <_printf_i+0x1f4>
 800825c:	6820      	ldr	r0, [r4, #0]
 800825e:	6829      	ldr	r1, [r5, #0]
 8008260:	0606      	lsls	r6, r0, #24
 8008262:	f101 0304 	add.w	r3, r1, #4
 8008266:	d50a      	bpl.n	800827e <_printf_i+0xce>
 8008268:	680e      	ldr	r6, [r1, #0]
 800826a:	602b      	str	r3, [r5, #0]
 800826c:	2e00      	cmp	r6, #0
 800826e:	da03      	bge.n	8008278 <_printf_i+0xc8>
 8008270:	232d      	movs	r3, #45	; 0x2d
 8008272:	4276      	negs	r6, r6
 8008274:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008278:	485e      	ldr	r0, [pc, #376]	; (80083f4 <_printf_i+0x244>)
 800827a:	230a      	movs	r3, #10
 800827c:	e019      	b.n	80082b2 <_printf_i+0x102>
 800827e:	680e      	ldr	r6, [r1, #0]
 8008280:	602b      	str	r3, [r5, #0]
 8008282:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008286:	bf18      	it	ne
 8008288:	b236      	sxthne	r6, r6
 800828a:	e7ef      	b.n	800826c <_printf_i+0xbc>
 800828c:	682b      	ldr	r3, [r5, #0]
 800828e:	6820      	ldr	r0, [r4, #0]
 8008290:	1d19      	adds	r1, r3, #4
 8008292:	6029      	str	r1, [r5, #0]
 8008294:	0601      	lsls	r1, r0, #24
 8008296:	d501      	bpl.n	800829c <_printf_i+0xec>
 8008298:	681e      	ldr	r6, [r3, #0]
 800829a:	e002      	b.n	80082a2 <_printf_i+0xf2>
 800829c:	0646      	lsls	r6, r0, #25
 800829e:	d5fb      	bpl.n	8008298 <_printf_i+0xe8>
 80082a0:	881e      	ldrh	r6, [r3, #0]
 80082a2:	4854      	ldr	r0, [pc, #336]	; (80083f4 <_printf_i+0x244>)
 80082a4:	2f6f      	cmp	r7, #111	; 0x6f
 80082a6:	bf0c      	ite	eq
 80082a8:	2308      	moveq	r3, #8
 80082aa:	230a      	movne	r3, #10
 80082ac:	2100      	movs	r1, #0
 80082ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80082b2:	6865      	ldr	r5, [r4, #4]
 80082b4:	60a5      	str	r5, [r4, #8]
 80082b6:	2d00      	cmp	r5, #0
 80082b8:	bfa2      	ittt	ge
 80082ba:	6821      	ldrge	r1, [r4, #0]
 80082bc:	f021 0104 	bicge.w	r1, r1, #4
 80082c0:	6021      	strge	r1, [r4, #0]
 80082c2:	b90e      	cbnz	r6, 80082c8 <_printf_i+0x118>
 80082c4:	2d00      	cmp	r5, #0
 80082c6:	d04d      	beq.n	8008364 <_printf_i+0x1b4>
 80082c8:	4615      	mov	r5, r2
 80082ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80082ce:	fb03 6711 	mls	r7, r3, r1, r6
 80082d2:	5dc7      	ldrb	r7, [r0, r7]
 80082d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80082d8:	4637      	mov	r7, r6
 80082da:	42bb      	cmp	r3, r7
 80082dc:	460e      	mov	r6, r1
 80082de:	d9f4      	bls.n	80082ca <_printf_i+0x11a>
 80082e0:	2b08      	cmp	r3, #8
 80082e2:	d10b      	bne.n	80082fc <_printf_i+0x14c>
 80082e4:	6823      	ldr	r3, [r4, #0]
 80082e6:	07de      	lsls	r6, r3, #31
 80082e8:	d508      	bpl.n	80082fc <_printf_i+0x14c>
 80082ea:	6923      	ldr	r3, [r4, #16]
 80082ec:	6861      	ldr	r1, [r4, #4]
 80082ee:	4299      	cmp	r1, r3
 80082f0:	bfde      	ittt	le
 80082f2:	2330      	movle	r3, #48	; 0x30
 80082f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80082f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80082fc:	1b52      	subs	r2, r2, r5
 80082fe:	6122      	str	r2, [r4, #16]
 8008300:	f8cd a000 	str.w	sl, [sp]
 8008304:	464b      	mov	r3, r9
 8008306:	aa03      	add	r2, sp, #12
 8008308:	4621      	mov	r1, r4
 800830a:	4640      	mov	r0, r8
 800830c:	f7ff fee2 	bl	80080d4 <_printf_common>
 8008310:	3001      	adds	r0, #1
 8008312:	d14c      	bne.n	80083ae <_printf_i+0x1fe>
 8008314:	f04f 30ff 	mov.w	r0, #4294967295
 8008318:	b004      	add	sp, #16
 800831a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800831e:	4835      	ldr	r0, [pc, #212]	; (80083f4 <_printf_i+0x244>)
 8008320:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008324:	6829      	ldr	r1, [r5, #0]
 8008326:	6823      	ldr	r3, [r4, #0]
 8008328:	f851 6b04 	ldr.w	r6, [r1], #4
 800832c:	6029      	str	r1, [r5, #0]
 800832e:	061d      	lsls	r5, r3, #24
 8008330:	d514      	bpl.n	800835c <_printf_i+0x1ac>
 8008332:	07df      	lsls	r7, r3, #31
 8008334:	bf44      	itt	mi
 8008336:	f043 0320 	orrmi.w	r3, r3, #32
 800833a:	6023      	strmi	r3, [r4, #0]
 800833c:	b91e      	cbnz	r6, 8008346 <_printf_i+0x196>
 800833e:	6823      	ldr	r3, [r4, #0]
 8008340:	f023 0320 	bic.w	r3, r3, #32
 8008344:	6023      	str	r3, [r4, #0]
 8008346:	2310      	movs	r3, #16
 8008348:	e7b0      	b.n	80082ac <_printf_i+0xfc>
 800834a:	6823      	ldr	r3, [r4, #0]
 800834c:	f043 0320 	orr.w	r3, r3, #32
 8008350:	6023      	str	r3, [r4, #0]
 8008352:	2378      	movs	r3, #120	; 0x78
 8008354:	4828      	ldr	r0, [pc, #160]	; (80083f8 <_printf_i+0x248>)
 8008356:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800835a:	e7e3      	b.n	8008324 <_printf_i+0x174>
 800835c:	0659      	lsls	r1, r3, #25
 800835e:	bf48      	it	mi
 8008360:	b2b6      	uxthmi	r6, r6
 8008362:	e7e6      	b.n	8008332 <_printf_i+0x182>
 8008364:	4615      	mov	r5, r2
 8008366:	e7bb      	b.n	80082e0 <_printf_i+0x130>
 8008368:	682b      	ldr	r3, [r5, #0]
 800836a:	6826      	ldr	r6, [r4, #0]
 800836c:	6961      	ldr	r1, [r4, #20]
 800836e:	1d18      	adds	r0, r3, #4
 8008370:	6028      	str	r0, [r5, #0]
 8008372:	0635      	lsls	r5, r6, #24
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	d501      	bpl.n	800837c <_printf_i+0x1cc>
 8008378:	6019      	str	r1, [r3, #0]
 800837a:	e002      	b.n	8008382 <_printf_i+0x1d2>
 800837c:	0670      	lsls	r0, r6, #25
 800837e:	d5fb      	bpl.n	8008378 <_printf_i+0x1c8>
 8008380:	8019      	strh	r1, [r3, #0]
 8008382:	2300      	movs	r3, #0
 8008384:	6123      	str	r3, [r4, #16]
 8008386:	4615      	mov	r5, r2
 8008388:	e7ba      	b.n	8008300 <_printf_i+0x150>
 800838a:	682b      	ldr	r3, [r5, #0]
 800838c:	1d1a      	adds	r2, r3, #4
 800838e:	602a      	str	r2, [r5, #0]
 8008390:	681d      	ldr	r5, [r3, #0]
 8008392:	6862      	ldr	r2, [r4, #4]
 8008394:	2100      	movs	r1, #0
 8008396:	4628      	mov	r0, r5
 8008398:	f7f7 ff4a 	bl	8000230 <memchr>
 800839c:	b108      	cbz	r0, 80083a2 <_printf_i+0x1f2>
 800839e:	1b40      	subs	r0, r0, r5
 80083a0:	6060      	str	r0, [r4, #4]
 80083a2:	6863      	ldr	r3, [r4, #4]
 80083a4:	6123      	str	r3, [r4, #16]
 80083a6:	2300      	movs	r3, #0
 80083a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083ac:	e7a8      	b.n	8008300 <_printf_i+0x150>
 80083ae:	6923      	ldr	r3, [r4, #16]
 80083b0:	462a      	mov	r2, r5
 80083b2:	4649      	mov	r1, r9
 80083b4:	4640      	mov	r0, r8
 80083b6:	47d0      	blx	sl
 80083b8:	3001      	adds	r0, #1
 80083ba:	d0ab      	beq.n	8008314 <_printf_i+0x164>
 80083bc:	6823      	ldr	r3, [r4, #0]
 80083be:	079b      	lsls	r3, r3, #30
 80083c0:	d413      	bmi.n	80083ea <_printf_i+0x23a>
 80083c2:	68e0      	ldr	r0, [r4, #12]
 80083c4:	9b03      	ldr	r3, [sp, #12]
 80083c6:	4298      	cmp	r0, r3
 80083c8:	bfb8      	it	lt
 80083ca:	4618      	movlt	r0, r3
 80083cc:	e7a4      	b.n	8008318 <_printf_i+0x168>
 80083ce:	2301      	movs	r3, #1
 80083d0:	4632      	mov	r2, r6
 80083d2:	4649      	mov	r1, r9
 80083d4:	4640      	mov	r0, r8
 80083d6:	47d0      	blx	sl
 80083d8:	3001      	adds	r0, #1
 80083da:	d09b      	beq.n	8008314 <_printf_i+0x164>
 80083dc:	3501      	adds	r5, #1
 80083de:	68e3      	ldr	r3, [r4, #12]
 80083e0:	9903      	ldr	r1, [sp, #12]
 80083e2:	1a5b      	subs	r3, r3, r1
 80083e4:	42ab      	cmp	r3, r5
 80083e6:	dcf2      	bgt.n	80083ce <_printf_i+0x21e>
 80083e8:	e7eb      	b.n	80083c2 <_printf_i+0x212>
 80083ea:	2500      	movs	r5, #0
 80083ec:	f104 0619 	add.w	r6, r4, #25
 80083f0:	e7f5      	b.n	80083de <_printf_i+0x22e>
 80083f2:	bf00      	nop
 80083f4:	0800aa32 	.word	0x0800aa32
 80083f8:	0800aa43 	.word	0x0800aa43

080083fc <siprintf>:
 80083fc:	b40e      	push	{r1, r2, r3}
 80083fe:	b500      	push	{lr}
 8008400:	b09c      	sub	sp, #112	; 0x70
 8008402:	ab1d      	add	r3, sp, #116	; 0x74
 8008404:	9002      	str	r0, [sp, #8]
 8008406:	9006      	str	r0, [sp, #24]
 8008408:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800840c:	4809      	ldr	r0, [pc, #36]	; (8008434 <siprintf+0x38>)
 800840e:	9107      	str	r1, [sp, #28]
 8008410:	9104      	str	r1, [sp, #16]
 8008412:	4909      	ldr	r1, [pc, #36]	; (8008438 <siprintf+0x3c>)
 8008414:	f853 2b04 	ldr.w	r2, [r3], #4
 8008418:	9105      	str	r1, [sp, #20]
 800841a:	6800      	ldr	r0, [r0, #0]
 800841c:	9301      	str	r3, [sp, #4]
 800841e:	a902      	add	r1, sp, #8
 8008420:	f001 fb78 	bl	8009b14 <_svfiprintf_r>
 8008424:	9b02      	ldr	r3, [sp, #8]
 8008426:	2200      	movs	r2, #0
 8008428:	701a      	strb	r2, [r3, #0]
 800842a:	b01c      	add	sp, #112	; 0x70
 800842c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008430:	b003      	add	sp, #12
 8008432:	4770      	bx	lr
 8008434:	2000001c 	.word	0x2000001c
 8008438:	ffff0208 	.word	0xffff0208

0800843c <quorem>:
 800843c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008440:	6903      	ldr	r3, [r0, #16]
 8008442:	690c      	ldr	r4, [r1, #16]
 8008444:	42a3      	cmp	r3, r4
 8008446:	4607      	mov	r7, r0
 8008448:	f2c0 8081 	blt.w	800854e <quorem+0x112>
 800844c:	3c01      	subs	r4, #1
 800844e:	f101 0814 	add.w	r8, r1, #20
 8008452:	f100 0514 	add.w	r5, r0, #20
 8008456:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800845a:	9301      	str	r3, [sp, #4]
 800845c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008460:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008464:	3301      	adds	r3, #1
 8008466:	429a      	cmp	r2, r3
 8008468:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800846c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008470:	fbb2 f6f3 	udiv	r6, r2, r3
 8008474:	d331      	bcc.n	80084da <quorem+0x9e>
 8008476:	f04f 0e00 	mov.w	lr, #0
 800847a:	4640      	mov	r0, r8
 800847c:	46ac      	mov	ip, r5
 800847e:	46f2      	mov	sl, lr
 8008480:	f850 2b04 	ldr.w	r2, [r0], #4
 8008484:	b293      	uxth	r3, r2
 8008486:	fb06 e303 	mla	r3, r6, r3, lr
 800848a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800848e:	b29b      	uxth	r3, r3
 8008490:	ebaa 0303 	sub.w	r3, sl, r3
 8008494:	f8dc a000 	ldr.w	sl, [ip]
 8008498:	0c12      	lsrs	r2, r2, #16
 800849a:	fa13 f38a 	uxtah	r3, r3, sl
 800849e:	fb06 e202 	mla	r2, r6, r2, lr
 80084a2:	9300      	str	r3, [sp, #0]
 80084a4:	9b00      	ldr	r3, [sp, #0]
 80084a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80084aa:	b292      	uxth	r2, r2
 80084ac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80084b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80084b4:	f8bd 3000 	ldrh.w	r3, [sp]
 80084b8:	4581      	cmp	r9, r0
 80084ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80084be:	f84c 3b04 	str.w	r3, [ip], #4
 80084c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80084c6:	d2db      	bcs.n	8008480 <quorem+0x44>
 80084c8:	f855 300b 	ldr.w	r3, [r5, fp]
 80084cc:	b92b      	cbnz	r3, 80084da <quorem+0x9e>
 80084ce:	9b01      	ldr	r3, [sp, #4]
 80084d0:	3b04      	subs	r3, #4
 80084d2:	429d      	cmp	r5, r3
 80084d4:	461a      	mov	r2, r3
 80084d6:	d32e      	bcc.n	8008536 <quorem+0xfa>
 80084d8:	613c      	str	r4, [r7, #16]
 80084da:	4638      	mov	r0, r7
 80084dc:	f001 f8c6 	bl	800966c <__mcmp>
 80084e0:	2800      	cmp	r0, #0
 80084e2:	db24      	blt.n	800852e <quorem+0xf2>
 80084e4:	3601      	adds	r6, #1
 80084e6:	4628      	mov	r0, r5
 80084e8:	f04f 0c00 	mov.w	ip, #0
 80084ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80084f0:	f8d0 e000 	ldr.w	lr, [r0]
 80084f4:	b293      	uxth	r3, r2
 80084f6:	ebac 0303 	sub.w	r3, ip, r3
 80084fa:	0c12      	lsrs	r2, r2, #16
 80084fc:	fa13 f38e 	uxtah	r3, r3, lr
 8008500:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008504:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008508:	b29b      	uxth	r3, r3
 800850a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800850e:	45c1      	cmp	r9, r8
 8008510:	f840 3b04 	str.w	r3, [r0], #4
 8008514:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008518:	d2e8      	bcs.n	80084ec <quorem+0xb0>
 800851a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800851e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008522:	b922      	cbnz	r2, 800852e <quorem+0xf2>
 8008524:	3b04      	subs	r3, #4
 8008526:	429d      	cmp	r5, r3
 8008528:	461a      	mov	r2, r3
 800852a:	d30a      	bcc.n	8008542 <quorem+0x106>
 800852c:	613c      	str	r4, [r7, #16]
 800852e:	4630      	mov	r0, r6
 8008530:	b003      	add	sp, #12
 8008532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008536:	6812      	ldr	r2, [r2, #0]
 8008538:	3b04      	subs	r3, #4
 800853a:	2a00      	cmp	r2, #0
 800853c:	d1cc      	bne.n	80084d8 <quorem+0x9c>
 800853e:	3c01      	subs	r4, #1
 8008540:	e7c7      	b.n	80084d2 <quorem+0x96>
 8008542:	6812      	ldr	r2, [r2, #0]
 8008544:	3b04      	subs	r3, #4
 8008546:	2a00      	cmp	r2, #0
 8008548:	d1f0      	bne.n	800852c <quorem+0xf0>
 800854a:	3c01      	subs	r4, #1
 800854c:	e7eb      	b.n	8008526 <quorem+0xea>
 800854e:	2000      	movs	r0, #0
 8008550:	e7ee      	b.n	8008530 <quorem+0xf4>
 8008552:	0000      	movs	r0, r0
 8008554:	0000      	movs	r0, r0
	...

08008558 <_dtoa_r>:
 8008558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800855c:	ed2d 8b04 	vpush	{d8-d9}
 8008560:	ec57 6b10 	vmov	r6, r7, d0
 8008564:	b093      	sub	sp, #76	; 0x4c
 8008566:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008568:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800856c:	9106      	str	r1, [sp, #24]
 800856e:	ee10 aa10 	vmov	sl, s0
 8008572:	4604      	mov	r4, r0
 8008574:	9209      	str	r2, [sp, #36]	; 0x24
 8008576:	930c      	str	r3, [sp, #48]	; 0x30
 8008578:	46bb      	mov	fp, r7
 800857a:	b975      	cbnz	r5, 800859a <_dtoa_r+0x42>
 800857c:	2010      	movs	r0, #16
 800857e:	f000 fddd 	bl	800913c <malloc>
 8008582:	4602      	mov	r2, r0
 8008584:	6260      	str	r0, [r4, #36]	; 0x24
 8008586:	b920      	cbnz	r0, 8008592 <_dtoa_r+0x3a>
 8008588:	4ba7      	ldr	r3, [pc, #668]	; (8008828 <_dtoa_r+0x2d0>)
 800858a:	21ea      	movs	r1, #234	; 0xea
 800858c:	48a7      	ldr	r0, [pc, #668]	; (800882c <_dtoa_r+0x2d4>)
 800858e:	f001 fbd1 	bl	8009d34 <__assert_func>
 8008592:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008596:	6005      	str	r5, [r0, #0]
 8008598:	60c5      	str	r5, [r0, #12]
 800859a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800859c:	6819      	ldr	r1, [r3, #0]
 800859e:	b151      	cbz	r1, 80085b6 <_dtoa_r+0x5e>
 80085a0:	685a      	ldr	r2, [r3, #4]
 80085a2:	604a      	str	r2, [r1, #4]
 80085a4:	2301      	movs	r3, #1
 80085a6:	4093      	lsls	r3, r2
 80085a8:	608b      	str	r3, [r1, #8]
 80085aa:	4620      	mov	r0, r4
 80085ac:	f000 fe1c 	bl	80091e8 <_Bfree>
 80085b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085b2:	2200      	movs	r2, #0
 80085b4:	601a      	str	r2, [r3, #0]
 80085b6:	1e3b      	subs	r3, r7, #0
 80085b8:	bfaa      	itet	ge
 80085ba:	2300      	movge	r3, #0
 80085bc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80085c0:	f8c8 3000 	strge.w	r3, [r8]
 80085c4:	4b9a      	ldr	r3, [pc, #616]	; (8008830 <_dtoa_r+0x2d8>)
 80085c6:	bfbc      	itt	lt
 80085c8:	2201      	movlt	r2, #1
 80085ca:	f8c8 2000 	strlt.w	r2, [r8]
 80085ce:	ea33 030b 	bics.w	r3, r3, fp
 80085d2:	d11b      	bne.n	800860c <_dtoa_r+0xb4>
 80085d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80085d6:	f242 730f 	movw	r3, #9999	; 0x270f
 80085da:	6013      	str	r3, [r2, #0]
 80085dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80085e0:	4333      	orrs	r3, r6
 80085e2:	f000 8592 	beq.w	800910a <_dtoa_r+0xbb2>
 80085e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085e8:	b963      	cbnz	r3, 8008604 <_dtoa_r+0xac>
 80085ea:	4b92      	ldr	r3, [pc, #584]	; (8008834 <_dtoa_r+0x2dc>)
 80085ec:	e022      	b.n	8008634 <_dtoa_r+0xdc>
 80085ee:	4b92      	ldr	r3, [pc, #584]	; (8008838 <_dtoa_r+0x2e0>)
 80085f0:	9301      	str	r3, [sp, #4]
 80085f2:	3308      	adds	r3, #8
 80085f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80085f6:	6013      	str	r3, [r2, #0]
 80085f8:	9801      	ldr	r0, [sp, #4]
 80085fa:	b013      	add	sp, #76	; 0x4c
 80085fc:	ecbd 8b04 	vpop	{d8-d9}
 8008600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008604:	4b8b      	ldr	r3, [pc, #556]	; (8008834 <_dtoa_r+0x2dc>)
 8008606:	9301      	str	r3, [sp, #4]
 8008608:	3303      	adds	r3, #3
 800860a:	e7f3      	b.n	80085f4 <_dtoa_r+0x9c>
 800860c:	2200      	movs	r2, #0
 800860e:	2300      	movs	r3, #0
 8008610:	4650      	mov	r0, sl
 8008612:	4659      	mov	r1, fp
 8008614:	f7f8 fa80 	bl	8000b18 <__aeabi_dcmpeq>
 8008618:	ec4b ab19 	vmov	d9, sl, fp
 800861c:	4680      	mov	r8, r0
 800861e:	b158      	cbz	r0, 8008638 <_dtoa_r+0xe0>
 8008620:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008622:	2301      	movs	r3, #1
 8008624:	6013      	str	r3, [r2, #0]
 8008626:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008628:	2b00      	cmp	r3, #0
 800862a:	f000 856b 	beq.w	8009104 <_dtoa_r+0xbac>
 800862e:	4883      	ldr	r0, [pc, #524]	; (800883c <_dtoa_r+0x2e4>)
 8008630:	6018      	str	r0, [r3, #0]
 8008632:	1e43      	subs	r3, r0, #1
 8008634:	9301      	str	r3, [sp, #4]
 8008636:	e7df      	b.n	80085f8 <_dtoa_r+0xa0>
 8008638:	ec4b ab10 	vmov	d0, sl, fp
 800863c:	aa10      	add	r2, sp, #64	; 0x40
 800863e:	a911      	add	r1, sp, #68	; 0x44
 8008640:	4620      	mov	r0, r4
 8008642:	f001 f8b9 	bl	80097b8 <__d2b>
 8008646:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800864a:	ee08 0a10 	vmov	s16, r0
 800864e:	2d00      	cmp	r5, #0
 8008650:	f000 8084 	beq.w	800875c <_dtoa_r+0x204>
 8008654:	ee19 3a90 	vmov	r3, s19
 8008658:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800865c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008660:	4656      	mov	r6, sl
 8008662:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008666:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800866a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800866e:	4b74      	ldr	r3, [pc, #464]	; (8008840 <_dtoa_r+0x2e8>)
 8008670:	2200      	movs	r2, #0
 8008672:	4630      	mov	r0, r6
 8008674:	4639      	mov	r1, r7
 8008676:	f7f7 fe2f 	bl	80002d8 <__aeabi_dsub>
 800867a:	a365      	add	r3, pc, #404	; (adr r3, 8008810 <_dtoa_r+0x2b8>)
 800867c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008680:	f7f7 ffe2 	bl	8000648 <__aeabi_dmul>
 8008684:	a364      	add	r3, pc, #400	; (adr r3, 8008818 <_dtoa_r+0x2c0>)
 8008686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868a:	f7f7 fe27 	bl	80002dc <__adddf3>
 800868e:	4606      	mov	r6, r0
 8008690:	4628      	mov	r0, r5
 8008692:	460f      	mov	r7, r1
 8008694:	f7f7 ff6e 	bl	8000574 <__aeabi_i2d>
 8008698:	a361      	add	r3, pc, #388	; (adr r3, 8008820 <_dtoa_r+0x2c8>)
 800869a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869e:	f7f7 ffd3 	bl	8000648 <__aeabi_dmul>
 80086a2:	4602      	mov	r2, r0
 80086a4:	460b      	mov	r3, r1
 80086a6:	4630      	mov	r0, r6
 80086a8:	4639      	mov	r1, r7
 80086aa:	f7f7 fe17 	bl	80002dc <__adddf3>
 80086ae:	4606      	mov	r6, r0
 80086b0:	460f      	mov	r7, r1
 80086b2:	f7f8 fa79 	bl	8000ba8 <__aeabi_d2iz>
 80086b6:	2200      	movs	r2, #0
 80086b8:	9000      	str	r0, [sp, #0]
 80086ba:	2300      	movs	r3, #0
 80086bc:	4630      	mov	r0, r6
 80086be:	4639      	mov	r1, r7
 80086c0:	f7f8 fa34 	bl	8000b2c <__aeabi_dcmplt>
 80086c4:	b150      	cbz	r0, 80086dc <_dtoa_r+0x184>
 80086c6:	9800      	ldr	r0, [sp, #0]
 80086c8:	f7f7 ff54 	bl	8000574 <__aeabi_i2d>
 80086cc:	4632      	mov	r2, r6
 80086ce:	463b      	mov	r3, r7
 80086d0:	f7f8 fa22 	bl	8000b18 <__aeabi_dcmpeq>
 80086d4:	b910      	cbnz	r0, 80086dc <_dtoa_r+0x184>
 80086d6:	9b00      	ldr	r3, [sp, #0]
 80086d8:	3b01      	subs	r3, #1
 80086da:	9300      	str	r3, [sp, #0]
 80086dc:	9b00      	ldr	r3, [sp, #0]
 80086de:	2b16      	cmp	r3, #22
 80086e0:	d85a      	bhi.n	8008798 <_dtoa_r+0x240>
 80086e2:	9a00      	ldr	r2, [sp, #0]
 80086e4:	4b57      	ldr	r3, [pc, #348]	; (8008844 <_dtoa_r+0x2ec>)
 80086e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ee:	ec51 0b19 	vmov	r0, r1, d9
 80086f2:	f7f8 fa1b 	bl	8000b2c <__aeabi_dcmplt>
 80086f6:	2800      	cmp	r0, #0
 80086f8:	d050      	beq.n	800879c <_dtoa_r+0x244>
 80086fa:	9b00      	ldr	r3, [sp, #0]
 80086fc:	3b01      	subs	r3, #1
 80086fe:	9300      	str	r3, [sp, #0]
 8008700:	2300      	movs	r3, #0
 8008702:	930b      	str	r3, [sp, #44]	; 0x2c
 8008704:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008706:	1b5d      	subs	r5, r3, r5
 8008708:	1e6b      	subs	r3, r5, #1
 800870a:	9305      	str	r3, [sp, #20]
 800870c:	bf45      	ittet	mi
 800870e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008712:	9304      	strmi	r3, [sp, #16]
 8008714:	2300      	movpl	r3, #0
 8008716:	2300      	movmi	r3, #0
 8008718:	bf4c      	ite	mi
 800871a:	9305      	strmi	r3, [sp, #20]
 800871c:	9304      	strpl	r3, [sp, #16]
 800871e:	9b00      	ldr	r3, [sp, #0]
 8008720:	2b00      	cmp	r3, #0
 8008722:	db3d      	blt.n	80087a0 <_dtoa_r+0x248>
 8008724:	9b05      	ldr	r3, [sp, #20]
 8008726:	9a00      	ldr	r2, [sp, #0]
 8008728:	920a      	str	r2, [sp, #40]	; 0x28
 800872a:	4413      	add	r3, r2
 800872c:	9305      	str	r3, [sp, #20]
 800872e:	2300      	movs	r3, #0
 8008730:	9307      	str	r3, [sp, #28]
 8008732:	9b06      	ldr	r3, [sp, #24]
 8008734:	2b09      	cmp	r3, #9
 8008736:	f200 8089 	bhi.w	800884c <_dtoa_r+0x2f4>
 800873a:	2b05      	cmp	r3, #5
 800873c:	bfc4      	itt	gt
 800873e:	3b04      	subgt	r3, #4
 8008740:	9306      	strgt	r3, [sp, #24]
 8008742:	9b06      	ldr	r3, [sp, #24]
 8008744:	f1a3 0302 	sub.w	r3, r3, #2
 8008748:	bfcc      	ite	gt
 800874a:	2500      	movgt	r5, #0
 800874c:	2501      	movle	r5, #1
 800874e:	2b03      	cmp	r3, #3
 8008750:	f200 8087 	bhi.w	8008862 <_dtoa_r+0x30a>
 8008754:	e8df f003 	tbb	[pc, r3]
 8008758:	59383a2d 	.word	0x59383a2d
 800875c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008760:	441d      	add	r5, r3
 8008762:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008766:	2b20      	cmp	r3, #32
 8008768:	bfc1      	itttt	gt
 800876a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800876e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008772:	fa0b f303 	lslgt.w	r3, fp, r3
 8008776:	fa26 f000 	lsrgt.w	r0, r6, r0
 800877a:	bfda      	itte	le
 800877c:	f1c3 0320 	rsble	r3, r3, #32
 8008780:	fa06 f003 	lslle.w	r0, r6, r3
 8008784:	4318      	orrgt	r0, r3
 8008786:	f7f7 fee5 	bl	8000554 <__aeabi_ui2d>
 800878a:	2301      	movs	r3, #1
 800878c:	4606      	mov	r6, r0
 800878e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008792:	3d01      	subs	r5, #1
 8008794:	930e      	str	r3, [sp, #56]	; 0x38
 8008796:	e76a      	b.n	800866e <_dtoa_r+0x116>
 8008798:	2301      	movs	r3, #1
 800879a:	e7b2      	b.n	8008702 <_dtoa_r+0x1aa>
 800879c:	900b      	str	r0, [sp, #44]	; 0x2c
 800879e:	e7b1      	b.n	8008704 <_dtoa_r+0x1ac>
 80087a0:	9b04      	ldr	r3, [sp, #16]
 80087a2:	9a00      	ldr	r2, [sp, #0]
 80087a4:	1a9b      	subs	r3, r3, r2
 80087a6:	9304      	str	r3, [sp, #16]
 80087a8:	4253      	negs	r3, r2
 80087aa:	9307      	str	r3, [sp, #28]
 80087ac:	2300      	movs	r3, #0
 80087ae:	930a      	str	r3, [sp, #40]	; 0x28
 80087b0:	e7bf      	b.n	8008732 <_dtoa_r+0x1da>
 80087b2:	2300      	movs	r3, #0
 80087b4:	9308      	str	r3, [sp, #32]
 80087b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	dc55      	bgt.n	8008868 <_dtoa_r+0x310>
 80087bc:	2301      	movs	r3, #1
 80087be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80087c2:	461a      	mov	r2, r3
 80087c4:	9209      	str	r2, [sp, #36]	; 0x24
 80087c6:	e00c      	b.n	80087e2 <_dtoa_r+0x28a>
 80087c8:	2301      	movs	r3, #1
 80087ca:	e7f3      	b.n	80087b4 <_dtoa_r+0x25c>
 80087cc:	2300      	movs	r3, #0
 80087ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087d0:	9308      	str	r3, [sp, #32]
 80087d2:	9b00      	ldr	r3, [sp, #0]
 80087d4:	4413      	add	r3, r2
 80087d6:	9302      	str	r3, [sp, #8]
 80087d8:	3301      	adds	r3, #1
 80087da:	2b01      	cmp	r3, #1
 80087dc:	9303      	str	r3, [sp, #12]
 80087de:	bfb8      	it	lt
 80087e0:	2301      	movlt	r3, #1
 80087e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80087e4:	2200      	movs	r2, #0
 80087e6:	6042      	str	r2, [r0, #4]
 80087e8:	2204      	movs	r2, #4
 80087ea:	f102 0614 	add.w	r6, r2, #20
 80087ee:	429e      	cmp	r6, r3
 80087f0:	6841      	ldr	r1, [r0, #4]
 80087f2:	d93d      	bls.n	8008870 <_dtoa_r+0x318>
 80087f4:	4620      	mov	r0, r4
 80087f6:	f000 fcb7 	bl	8009168 <_Balloc>
 80087fa:	9001      	str	r0, [sp, #4]
 80087fc:	2800      	cmp	r0, #0
 80087fe:	d13b      	bne.n	8008878 <_dtoa_r+0x320>
 8008800:	4b11      	ldr	r3, [pc, #68]	; (8008848 <_dtoa_r+0x2f0>)
 8008802:	4602      	mov	r2, r0
 8008804:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008808:	e6c0      	b.n	800858c <_dtoa_r+0x34>
 800880a:	2301      	movs	r3, #1
 800880c:	e7df      	b.n	80087ce <_dtoa_r+0x276>
 800880e:	bf00      	nop
 8008810:	636f4361 	.word	0x636f4361
 8008814:	3fd287a7 	.word	0x3fd287a7
 8008818:	8b60c8b3 	.word	0x8b60c8b3
 800881c:	3fc68a28 	.word	0x3fc68a28
 8008820:	509f79fb 	.word	0x509f79fb
 8008824:	3fd34413 	.word	0x3fd34413
 8008828:	0800aa61 	.word	0x0800aa61
 800882c:	0800aa78 	.word	0x0800aa78
 8008830:	7ff00000 	.word	0x7ff00000
 8008834:	0800aa5d 	.word	0x0800aa5d
 8008838:	0800aa54 	.word	0x0800aa54
 800883c:	0800aa31 	.word	0x0800aa31
 8008840:	3ff80000 	.word	0x3ff80000
 8008844:	0800ab68 	.word	0x0800ab68
 8008848:	0800aad3 	.word	0x0800aad3
 800884c:	2501      	movs	r5, #1
 800884e:	2300      	movs	r3, #0
 8008850:	9306      	str	r3, [sp, #24]
 8008852:	9508      	str	r5, [sp, #32]
 8008854:	f04f 33ff 	mov.w	r3, #4294967295
 8008858:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800885c:	2200      	movs	r2, #0
 800885e:	2312      	movs	r3, #18
 8008860:	e7b0      	b.n	80087c4 <_dtoa_r+0x26c>
 8008862:	2301      	movs	r3, #1
 8008864:	9308      	str	r3, [sp, #32]
 8008866:	e7f5      	b.n	8008854 <_dtoa_r+0x2fc>
 8008868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800886a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800886e:	e7b8      	b.n	80087e2 <_dtoa_r+0x28a>
 8008870:	3101      	adds	r1, #1
 8008872:	6041      	str	r1, [r0, #4]
 8008874:	0052      	lsls	r2, r2, #1
 8008876:	e7b8      	b.n	80087ea <_dtoa_r+0x292>
 8008878:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800887a:	9a01      	ldr	r2, [sp, #4]
 800887c:	601a      	str	r2, [r3, #0]
 800887e:	9b03      	ldr	r3, [sp, #12]
 8008880:	2b0e      	cmp	r3, #14
 8008882:	f200 809d 	bhi.w	80089c0 <_dtoa_r+0x468>
 8008886:	2d00      	cmp	r5, #0
 8008888:	f000 809a 	beq.w	80089c0 <_dtoa_r+0x468>
 800888c:	9b00      	ldr	r3, [sp, #0]
 800888e:	2b00      	cmp	r3, #0
 8008890:	dd32      	ble.n	80088f8 <_dtoa_r+0x3a0>
 8008892:	4ab7      	ldr	r2, [pc, #732]	; (8008b70 <_dtoa_r+0x618>)
 8008894:	f003 030f 	and.w	r3, r3, #15
 8008898:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800889c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80088a0:	9b00      	ldr	r3, [sp, #0]
 80088a2:	05d8      	lsls	r0, r3, #23
 80088a4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80088a8:	d516      	bpl.n	80088d8 <_dtoa_r+0x380>
 80088aa:	4bb2      	ldr	r3, [pc, #712]	; (8008b74 <_dtoa_r+0x61c>)
 80088ac:	ec51 0b19 	vmov	r0, r1, d9
 80088b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80088b4:	f7f7 fff2 	bl	800089c <__aeabi_ddiv>
 80088b8:	f007 070f 	and.w	r7, r7, #15
 80088bc:	4682      	mov	sl, r0
 80088be:	468b      	mov	fp, r1
 80088c0:	2503      	movs	r5, #3
 80088c2:	4eac      	ldr	r6, [pc, #688]	; (8008b74 <_dtoa_r+0x61c>)
 80088c4:	b957      	cbnz	r7, 80088dc <_dtoa_r+0x384>
 80088c6:	4642      	mov	r2, r8
 80088c8:	464b      	mov	r3, r9
 80088ca:	4650      	mov	r0, sl
 80088cc:	4659      	mov	r1, fp
 80088ce:	f7f7 ffe5 	bl	800089c <__aeabi_ddiv>
 80088d2:	4682      	mov	sl, r0
 80088d4:	468b      	mov	fp, r1
 80088d6:	e028      	b.n	800892a <_dtoa_r+0x3d2>
 80088d8:	2502      	movs	r5, #2
 80088da:	e7f2      	b.n	80088c2 <_dtoa_r+0x36a>
 80088dc:	07f9      	lsls	r1, r7, #31
 80088de:	d508      	bpl.n	80088f2 <_dtoa_r+0x39a>
 80088e0:	4640      	mov	r0, r8
 80088e2:	4649      	mov	r1, r9
 80088e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80088e8:	f7f7 feae 	bl	8000648 <__aeabi_dmul>
 80088ec:	3501      	adds	r5, #1
 80088ee:	4680      	mov	r8, r0
 80088f0:	4689      	mov	r9, r1
 80088f2:	107f      	asrs	r7, r7, #1
 80088f4:	3608      	adds	r6, #8
 80088f6:	e7e5      	b.n	80088c4 <_dtoa_r+0x36c>
 80088f8:	f000 809b 	beq.w	8008a32 <_dtoa_r+0x4da>
 80088fc:	9b00      	ldr	r3, [sp, #0]
 80088fe:	4f9d      	ldr	r7, [pc, #628]	; (8008b74 <_dtoa_r+0x61c>)
 8008900:	425e      	negs	r6, r3
 8008902:	4b9b      	ldr	r3, [pc, #620]	; (8008b70 <_dtoa_r+0x618>)
 8008904:	f006 020f 	and.w	r2, r6, #15
 8008908:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800890c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008910:	ec51 0b19 	vmov	r0, r1, d9
 8008914:	f7f7 fe98 	bl	8000648 <__aeabi_dmul>
 8008918:	1136      	asrs	r6, r6, #4
 800891a:	4682      	mov	sl, r0
 800891c:	468b      	mov	fp, r1
 800891e:	2300      	movs	r3, #0
 8008920:	2502      	movs	r5, #2
 8008922:	2e00      	cmp	r6, #0
 8008924:	d17a      	bne.n	8008a1c <_dtoa_r+0x4c4>
 8008926:	2b00      	cmp	r3, #0
 8008928:	d1d3      	bne.n	80088d2 <_dtoa_r+0x37a>
 800892a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800892c:	2b00      	cmp	r3, #0
 800892e:	f000 8082 	beq.w	8008a36 <_dtoa_r+0x4de>
 8008932:	4b91      	ldr	r3, [pc, #580]	; (8008b78 <_dtoa_r+0x620>)
 8008934:	2200      	movs	r2, #0
 8008936:	4650      	mov	r0, sl
 8008938:	4659      	mov	r1, fp
 800893a:	f7f8 f8f7 	bl	8000b2c <__aeabi_dcmplt>
 800893e:	2800      	cmp	r0, #0
 8008940:	d079      	beq.n	8008a36 <_dtoa_r+0x4de>
 8008942:	9b03      	ldr	r3, [sp, #12]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d076      	beq.n	8008a36 <_dtoa_r+0x4de>
 8008948:	9b02      	ldr	r3, [sp, #8]
 800894a:	2b00      	cmp	r3, #0
 800894c:	dd36      	ble.n	80089bc <_dtoa_r+0x464>
 800894e:	9b00      	ldr	r3, [sp, #0]
 8008950:	4650      	mov	r0, sl
 8008952:	4659      	mov	r1, fp
 8008954:	1e5f      	subs	r7, r3, #1
 8008956:	2200      	movs	r2, #0
 8008958:	4b88      	ldr	r3, [pc, #544]	; (8008b7c <_dtoa_r+0x624>)
 800895a:	f7f7 fe75 	bl	8000648 <__aeabi_dmul>
 800895e:	9e02      	ldr	r6, [sp, #8]
 8008960:	4682      	mov	sl, r0
 8008962:	468b      	mov	fp, r1
 8008964:	3501      	adds	r5, #1
 8008966:	4628      	mov	r0, r5
 8008968:	f7f7 fe04 	bl	8000574 <__aeabi_i2d>
 800896c:	4652      	mov	r2, sl
 800896e:	465b      	mov	r3, fp
 8008970:	f7f7 fe6a 	bl	8000648 <__aeabi_dmul>
 8008974:	4b82      	ldr	r3, [pc, #520]	; (8008b80 <_dtoa_r+0x628>)
 8008976:	2200      	movs	r2, #0
 8008978:	f7f7 fcb0 	bl	80002dc <__adddf3>
 800897c:	46d0      	mov	r8, sl
 800897e:	46d9      	mov	r9, fp
 8008980:	4682      	mov	sl, r0
 8008982:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008986:	2e00      	cmp	r6, #0
 8008988:	d158      	bne.n	8008a3c <_dtoa_r+0x4e4>
 800898a:	4b7e      	ldr	r3, [pc, #504]	; (8008b84 <_dtoa_r+0x62c>)
 800898c:	2200      	movs	r2, #0
 800898e:	4640      	mov	r0, r8
 8008990:	4649      	mov	r1, r9
 8008992:	f7f7 fca1 	bl	80002d8 <__aeabi_dsub>
 8008996:	4652      	mov	r2, sl
 8008998:	465b      	mov	r3, fp
 800899a:	4680      	mov	r8, r0
 800899c:	4689      	mov	r9, r1
 800899e:	f7f8 f8e3 	bl	8000b68 <__aeabi_dcmpgt>
 80089a2:	2800      	cmp	r0, #0
 80089a4:	f040 8295 	bne.w	8008ed2 <_dtoa_r+0x97a>
 80089a8:	4652      	mov	r2, sl
 80089aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80089ae:	4640      	mov	r0, r8
 80089b0:	4649      	mov	r1, r9
 80089b2:	f7f8 f8bb 	bl	8000b2c <__aeabi_dcmplt>
 80089b6:	2800      	cmp	r0, #0
 80089b8:	f040 8289 	bne.w	8008ece <_dtoa_r+0x976>
 80089bc:	ec5b ab19 	vmov	sl, fp, d9
 80089c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	f2c0 8148 	blt.w	8008c58 <_dtoa_r+0x700>
 80089c8:	9a00      	ldr	r2, [sp, #0]
 80089ca:	2a0e      	cmp	r2, #14
 80089cc:	f300 8144 	bgt.w	8008c58 <_dtoa_r+0x700>
 80089d0:	4b67      	ldr	r3, [pc, #412]	; (8008b70 <_dtoa_r+0x618>)
 80089d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80089da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089dc:	2b00      	cmp	r3, #0
 80089de:	f280 80d5 	bge.w	8008b8c <_dtoa_r+0x634>
 80089e2:	9b03      	ldr	r3, [sp, #12]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	f300 80d1 	bgt.w	8008b8c <_dtoa_r+0x634>
 80089ea:	f040 826f 	bne.w	8008ecc <_dtoa_r+0x974>
 80089ee:	4b65      	ldr	r3, [pc, #404]	; (8008b84 <_dtoa_r+0x62c>)
 80089f0:	2200      	movs	r2, #0
 80089f2:	4640      	mov	r0, r8
 80089f4:	4649      	mov	r1, r9
 80089f6:	f7f7 fe27 	bl	8000648 <__aeabi_dmul>
 80089fa:	4652      	mov	r2, sl
 80089fc:	465b      	mov	r3, fp
 80089fe:	f7f8 f8a9 	bl	8000b54 <__aeabi_dcmpge>
 8008a02:	9e03      	ldr	r6, [sp, #12]
 8008a04:	4637      	mov	r7, r6
 8008a06:	2800      	cmp	r0, #0
 8008a08:	f040 8245 	bne.w	8008e96 <_dtoa_r+0x93e>
 8008a0c:	9d01      	ldr	r5, [sp, #4]
 8008a0e:	2331      	movs	r3, #49	; 0x31
 8008a10:	f805 3b01 	strb.w	r3, [r5], #1
 8008a14:	9b00      	ldr	r3, [sp, #0]
 8008a16:	3301      	adds	r3, #1
 8008a18:	9300      	str	r3, [sp, #0]
 8008a1a:	e240      	b.n	8008e9e <_dtoa_r+0x946>
 8008a1c:	07f2      	lsls	r2, r6, #31
 8008a1e:	d505      	bpl.n	8008a2c <_dtoa_r+0x4d4>
 8008a20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a24:	f7f7 fe10 	bl	8000648 <__aeabi_dmul>
 8008a28:	3501      	adds	r5, #1
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	1076      	asrs	r6, r6, #1
 8008a2e:	3708      	adds	r7, #8
 8008a30:	e777      	b.n	8008922 <_dtoa_r+0x3ca>
 8008a32:	2502      	movs	r5, #2
 8008a34:	e779      	b.n	800892a <_dtoa_r+0x3d2>
 8008a36:	9f00      	ldr	r7, [sp, #0]
 8008a38:	9e03      	ldr	r6, [sp, #12]
 8008a3a:	e794      	b.n	8008966 <_dtoa_r+0x40e>
 8008a3c:	9901      	ldr	r1, [sp, #4]
 8008a3e:	4b4c      	ldr	r3, [pc, #304]	; (8008b70 <_dtoa_r+0x618>)
 8008a40:	4431      	add	r1, r6
 8008a42:	910d      	str	r1, [sp, #52]	; 0x34
 8008a44:	9908      	ldr	r1, [sp, #32]
 8008a46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008a4a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008a4e:	2900      	cmp	r1, #0
 8008a50:	d043      	beq.n	8008ada <_dtoa_r+0x582>
 8008a52:	494d      	ldr	r1, [pc, #308]	; (8008b88 <_dtoa_r+0x630>)
 8008a54:	2000      	movs	r0, #0
 8008a56:	f7f7 ff21 	bl	800089c <__aeabi_ddiv>
 8008a5a:	4652      	mov	r2, sl
 8008a5c:	465b      	mov	r3, fp
 8008a5e:	f7f7 fc3b 	bl	80002d8 <__aeabi_dsub>
 8008a62:	9d01      	ldr	r5, [sp, #4]
 8008a64:	4682      	mov	sl, r0
 8008a66:	468b      	mov	fp, r1
 8008a68:	4649      	mov	r1, r9
 8008a6a:	4640      	mov	r0, r8
 8008a6c:	f7f8 f89c 	bl	8000ba8 <__aeabi_d2iz>
 8008a70:	4606      	mov	r6, r0
 8008a72:	f7f7 fd7f 	bl	8000574 <__aeabi_i2d>
 8008a76:	4602      	mov	r2, r0
 8008a78:	460b      	mov	r3, r1
 8008a7a:	4640      	mov	r0, r8
 8008a7c:	4649      	mov	r1, r9
 8008a7e:	f7f7 fc2b 	bl	80002d8 <__aeabi_dsub>
 8008a82:	3630      	adds	r6, #48	; 0x30
 8008a84:	f805 6b01 	strb.w	r6, [r5], #1
 8008a88:	4652      	mov	r2, sl
 8008a8a:	465b      	mov	r3, fp
 8008a8c:	4680      	mov	r8, r0
 8008a8e:	4689      	mov	r9, r1
 8008a90:	f7f8 f84c 	bl	8000b2c <__aeabi_dcmplt>
 8008a94:	2800      	cmp	r0, #0
 8008a96:	d163      	bne.n	8008b60 <_dtoa_r+0x608>
 8008a98:	4642      	mov	r2, r8
 8008a9a:	464b      	mov	r3, r9
 8008a9c:	4936      	ldr	r1, [pc, #216]	; (8008b78 <_dtoa_r+0x620>)
 8008a9e:	2000      	movs	r0, #0
 8008aa0:	f7f7 fc1a 	bl	80002d8 <__aeabi_dsub>
 8008aa4:	4652      	mov	r2, sl
 8008aa6:	465b      	mov	r3, fp
 8008aa8:	f7f8 f840 	bl	8000b2c <__aeabi_dcmplt>
 8008aac:	2800      	cmp	r0, #0
 8008aae:	f040 80b5 	bne.w	8008c1c <_dtoa_r+0x6c4>
 8008ab2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ab4:	429d      	cmp	r5, r3
 8008ab6:	d081      	beq.n	80089bc <_dtoa_r+0x464>
 8008ab8:	4b30      	ldr	r3, [pc, #192]	; (8008b7c <_dtoa_r+0x624>)
 8008aba:	2200      	movs	r2, #0
 8008abc:	4650      	mov	r0, sl
 8008abe:	4659      	mov	r1, fp
 8008ac0:	f7f7 fdc2 	bl	8000648 <__aeabi_dmul>
 8008ac4:	4b2d      	ldr	r3, [pc, #180]	; (8008b7c <_dtoa_r+0x624>)
 8008ac6:	4682      	mov	sl, r0
 8008ac8:	468b      	mov	fp, r1
 8008aca:	4640      	mov	r0, r8
 8008acc:	4649      	mov	r1, r9
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f7f7 fdba 	bl	8000648 <__aeabi_dmul>
 8008ad4:	4680      	mov	r8, r0
 8008ad6:	4689      	mov	r9, r1
 8008ad8:	e7c6      	b.n	8008a68 <_dtoa_r+0x510>
 8008ada:	4650      	mov	r0, sl
 8008adc:	4659      	mov	r1, fp
 8008ade:	f7f7 fdb3 	bl	8000648 <__aeabi_dmul>
 8008ae2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ae4:	9d01      	ldr	r5, [sp, #4]
 8008ae6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ae8:	4682      	mov	sl, r0
 8008aea:	468b      	mov	fp, r1
 8008aec:	4649      	mov	r1, r9
 8008aee:	4640      	mov	r0, r8
 8008af0:	f7f8 f85a 	bl	8000ba8 <__aeabi_d2iz>
 8008af4:	4606      	mov	r6, r0
 8008af6:	f7f7 fd3d 	bl	8000574 <__aeabi_i2d>
 8008afa:	3630      	adds	r6, #48	; 0x30
 8008afc:	4602      	mov	r2, r0
 8008afe:	460b      	mov	r3, r1
 8008b00:	4640      	mov	r0, r8
 8008b02:	4649      	mov	r1, r9
 8008b04:	f7f7 fbe8 	bl	80002d8 <__aeabi_dsub>
 8008b08:	f805 6b01 	strb.w	r6, [r5], #1
 8008b0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b0e:	429d      	cmp	r5, r3
 8008b10:	4680      	mov	r8, r0
 8008b12:	4689      	mov	r9, r1
 8008b14:	f04f 0200 	mov.w	r2, #0
 8008b18:	d124      	bne.n	8008b64 <_dtoa_r+0x60c>
 8008b1a:	4b1b      	ldr	r3, [pc, #108]	; (8008b88 <_dtoa_r+0x630>)
 8008b1c:	4650      	mov	r0, sl
 8008b1e:	4659      	mov	r1, fp
 8008b20:	f7f7 fbdc 	bl	80002dc <__adddf3>
 8008b24:	4602      	mov	r2, r0
 8008b26:	460b      	mov	r3, r1
 8008b28:	4640      	mov	r0, r8
 8008b2a:	4649      	mov	r1, r9
 8008b2c:	f7f8 f81c 	bl	8000b68 <__aeabi_dcmpgt>
 8008b30:	2800      	cmp	r0, #0
 8008b32:	d173      	bne.n	8008c1c <_dtoa_r+0x6c4>
 8008b34:	4652      	mov	r2, sl
 8008b36:	465b      	mov	r3, fp
 8008b38:	4913      	ldr	r1, [pc, #76]	; (8008b88 <_dtoa_r+0x630>)
 8008b3a:	2000      	movs	r0, #0
 8008b3c:	f7f7 fbcc 	bl	80002d8 <__aeabi_dsub>
 8008b40:	4602      	mov	r2, r0
 8008b42:	460b      	mov	r3, r1
 8008b44:	4640      	mov	r0, r8
 8008b46:	4649      	mov	r1, r9
 8008b48:	f7f7 fff0 	bl	8000b2c <__aeabi_dcmplt>
 8008b4c:	2800      	cmp	r0, #0
 8008b4e:	f43f af35 	beq.w	80089bc <_dtoa_r+0x464>
 8008b52:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008b54:	1e6b      	subs	r3, r5, #1
 8008b56:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b58:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008b5c:	2b30      	cmp	r3, #48	; 0x30
 8008b5e:	d0f8      	beq.n	8008b52 <_dtoa_r+0x5fa>
 8008b60:	9700      	str	r7, [sp, #0]
 8008b62:	e049      	b.n	8008bf8 <_dtoa_r+0x6a0>
 8008b64:	4b05      	ldr	r3, [pc, #20]	; (8008b7c <_dtoa_r+0x624>)
 8008b66:	f7f7 fd6f 	bl	8000648 <__aeabi_dmul>
 8008b6a:	4680      	mov	r8, r0
 8008b6c:	4689      	mov	r9, r1
 8008b6e:	e7bd      	b.n	8008aec <_dtoa_r+0x594>
 8008b70:	0800ab68 	.word	0x0800ab68
 8008b74:	0800ab40 	.word	0x0800ab40
 8008b78:	3ff00000 	.word	0x3ff00000
 8008b7c:	40240000 	.word	0x40240000
 8008b80:	401c0000 	.word	0x401c0000
 8008b84:	40140000 	.word	0x40140000
 8008b88:	3fe00000 	.word	0x3fe00000
 8008b8c:	9d01      	ldr	r5, [sp, #4]
 8008b8e:	4656      	mov	r6, sl
 8008b90:	465f      	mov	r7, fp
 8008b92:	4642      	mov	r2, r8
 8008b94:	464b      	mov	r3, r9
 8008b96:	4630      	mov	r0, r6
 8008b98:	4639      	mov	r1, r7
 8008b9a:	f7f7 fe7f 	bl	800089c <__aeabi_ddiv>
 8008b9e:	f7f8 f803 	bl	8000ba8 <__aeabi_d2iz>
 8008ba2:	4682      	mov	sl, r0
 8008ba4:	f7f7 fce6 	bl	8000574 <__aeabi_i2d>
 8008ba8:	4642      	mov	r2, r8
 8008baa:	464b      	mov	r3, r9
 8008bac:	f7f7 fd4c 	bl	8000648 <__aeabi_dmul>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	4630      	mov	r0, r6
 8008bb6:	4639      	mov	r1, r7
 8008bb8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008bbc:	f7f7 fb8c 	bl	80002d8 <__aeabi_dsub>
 8008bc0:	f805 6b01 	strb.w	r6, [r5], #1
 8008bc4:	9e01      	ldr	r6, [sp, #4]
 8008bc6:	9f03      	ldr	r7, [sp, #12]
 8008bc8:	1bae      	subs	r6, r5, r6
 8008bca:	42b7      	cmp	r7, r6
 8008bcc:	4602      	mov	r2, r0
 8008bce:	460b      	mov	r3, r1
 8008bd0:	d135      	bne.n	8008c3e <_dtoa_r+0x6e6>
 8008bd2:	f7f7 fb83 	bl	80002dc <__adddf3>
 8008bd6:	4642      	mov	r2, r8
 8008bd8:	464b      	mov	r3, r9
 8008bda:	4606      	mov	r6, r0
 8008bdc:	460f      	mov	r7, r1
 8008bde:	f7f7 ffc3 	bl	8000b68 <__aeabi_dcmpgt>
 8008be2:	b9d0      	cbnz	r0, 8008c1a <_dtoa_r+0x6c2>
 8008be4:	4642      	mov	r2, r8
 8008be6:	464b      	mov	r3, r9
 8008be8:	4630      	mov	r0, r6
 8008bea:	4639      	mov	r1, r7
 8008bec:	f7f7 ff94 	bl	8000b18 <__aeabi_dcmpeq>
 8008bf0:	b110      	cbz	r0, 8008bf8 <_dtoa_r+0x6a0>
 8008bf2:	f01a 0f01 	tst.w	sl, #1
 8008bf6:	d110      	bne.n	8008c1a <_dtoa_r+0x6c2>
 8008bf8:	4620      	mov	r0, r4
 8008bfa:	ee18 1a10 	vmov	r1, s16
 8008bfe:	f000 faf3 	bl	80091e8 <_Bfree>
 8008c02:	2300      	movs	r3, #0
 8008c04:	9800      	ldr	r0, [sp, #0]
 8008c06:	702b      	strb	r3, [r5, #0]
 8008c08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c0a:	3001      	adds	r0, #1
 8008c0c:	6018      	str	r0, [r3, #0]
 8008c0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	f43f acf1 	beq.w	80085f8 <_dtoa_r+0xa0>
 8008c16:	601d      	str	r5, [r3, #0]
 8008c18:	e4ee      	b.n	80085f8 <_dtoa_r+0xa0>
 8008c1a:	9f00      	ldr	r7, [sp, #0]
 8008c1c:	462b      	mov	r3, r5
 8008c1e:	461d      	mov	r5, r3
 8008c20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c24:	2a39      	cmp	r2, #57	; 0x39
 8008c26:	d106      	bne.n	8008c36 <_dtoa_r+0x6de>
 8008c28:	9a01      	ldr	r2, [sp, #4]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d1f7      	bne.n	8008c1e <_dtoa_r+0x6c6>
 8008c2e:	9901      	ldr	r1, [sp, #4]
 8008c30:	2230      	movs	r2, #48	; 0x30
 8008c32:	3701      	adds	r7, #1
 8008c34:	700a      	strb	r2, [r1, #0]
 8008c36:	781a      	ldrb	r2, [r3, #0]
 8008c38:	3201      	adds	r2, #1
 8008c3a:	701a      	strb	r2, [r3, #0]
 8008c3c:	e790      	b.n	8008b60 <_dtoa_r+0x608>
 8008c3e:	4ba6      	ldr	r3, [pc, #664]	; (8008ed8 <_dtoa_r+0x980>)
 8008c40:	2200      	movs	r2, #0
 8008c42:	f7f7 fd01 	bl	8000648 <__aeabi_dmul>
 8008c46:	2200      	movs	r2, #0
 8008c48:	2300      	movs	r3, #0
 8008c4a:	4606      	mov	r6, r0
 8008c4c:	460f      	mov	r7, r1
 8008c4e:	f7f7 ff63 	bl	8000b18 <__aeabi_dcmpeq>
 8008c52:	2800      	cmp	r0, #0
 8008c54:	d09d      	beq.n	8008b92 <_dtoa_r+0x63a>
 8008c56:	e7cf      	b.n	8008bf8 <_dtoa_r+0x6a0>
 8008c58:	9a08      	ldr	r2, [sp, #32]
 8008c5a:	2a00      	cmp	r2, #0
 8008c5c:	f000 80d7 	beq.w	8008e0e <_dtoa_r+0x8b6>
 8008c60:	9a06      	ldr	r2, [sp, #24]
 8008c62:	2a01      	cmp	r2, #1
 8008c64:	f300 80ba 	bgt.w	8008ddc <_dtoa_r+0x884>
 8008c68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c6a:	2a00      	cmp	r2, #0
 8008c6c:	f000 80b2 	beq.w	8008dd4 <_dtoa_r+0x87c>
 8008c70:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008c74:	9e07      	ldr	r6, [sp, #28]
 8008c76:	9d04      	ldr	r5, [sp, #16]
 8008c78:	9a04      	ldr	r2, [sp, #16]
 8008c7a:	441a      	add	r2, r3
 8008c7c:	9204      	str	r2, [sp, #16]
 8008c7e:	9a05      	ldr	r2, [sp, #20]
 8008c80:	2101      	movs	r1, #1
 8008c82:	441a      	add	r2, r3
 8008c84:	4620      	mov	r0, r4
 8008c86:	9205      	str	r2, [sp, #20]
 8008c88:	f000 fb66 	bl	8009358 <__i2b>
 8008c8c:	4607      	mov	r7, r0
 8008c8e:	2d00      	cmp	r5, #0
 8008c90:	dd0c      	ble.n	8008cac <_dtoa_r+0x754>
 8008c92:	9b05      	ldr	r3, [sp, #20]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	dd09      	ble.n	8008cac <_dtoa_r+0x754>
 8008c98:	42ab      	cmp	r3, r5
 8008c9a:	9a04      	ldr	r2, [sp, #16]
 8008c9c:	bfa8      	it	ge
 8008c9e:	462b      	movge	r3, r5
 8008ca0:	1ad2      	subs	r2, r2, r3
 8008ca2:	9204      	str	r2, [sp, #16]
 8008ca4:	9a05      	ldr	r2, [sp, #20]
 8008ca6:	1aed      	subs	r5, r5, r3
 8008ca8:	1ad3      	subs	r3, r2, r3
 8008caa:	9305      	str	r3, [sp, #20]
 8008cac:	9b07      	ldr	r3, [sp, #28]
 8008cae:	b31b      	cbz	r3, 8008cf8 <_dtoa_r+0x7a0>
 8008cb0:	9b08      	ldr	r3, [sp, #32]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	f000 80af 	beq.w	8008e16 <_dtoa_r+0x8be>
 8008cb8:	2e00      	cmp	r6, #0
 8008cba:	dd13      	ble.n	8008ce4 <_dtoa_r+0x78c>
 8008cbc:	4639      	mov	r1, r7
 8008cbe:	4632      	mov	r2, r6
 8008cc0:	4620      	mov	r0, r4
 8008cc2:	f000 fc09 	bl	80094d8 <__pow5mult>
 8008cc6:	ee18 2a10 	vmov	r2, s16
 8008cca:	4601      	mov	r1, r0
 8008ccc:	4607      	mov	r7, r0
 8008cce:	4620      	mov	r0, r4
 8008cd0:	f000 fb58 	bl	8009384 <__multiply>
 8008cd4:	ee18 1a10 	vmov	r1, s16
 8008cd8:	4680      	mov	r8, r0
 8008cda:	4620      	mov	r0, r4
 8008cdc:	f000 fa84 	bl	80091e8 <_Bfree>
 8008ce0:	ee08 8a10 	vmov	s16, r8
 8008ce4:	9b07      	ldr	r3, [sp, #28]
 8008ce6:	1b9a      	subs	r2, r3, r6
 8008ce8:	d006      	beq.n	8008cf8 <_dtoa_r+0x7a0>
 8008cea:	ee18 1a10 	vmov	r1, s16
 8008cee:	4620      	mov	r0, r4
 8008cf0:	f000 fbf2 	bl	80094d8 <__pow5mult>
 8008cf4:	ee08 0a10 	vmov	s16, r0
 8008cf8:	2101      	movs	r1, #1
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	f000 fb2c 	bl	8009358 <__i2b>
 8008d00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	4606      	mov	r6, r0
 8008d06:	f340 8088 	ble.w	8008e1a <_dtoa_r+0x8c2>
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	4601      	mov	r1, r0
 8008d0e:	4620      	mov	r0, r4
 8008d10:	f000 fbe2 	bl	80094d8 <__pow5mult>
 8008d14:	9b06      	ldr	r3, [sp, #24]
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	4606      	mov	r6, r0
 8008d1a:	f340 8081 	ble.w	8008e20 <_dtoa_r+0x8c8>
 8008d1e:	f04f 0800 	mov.w	r8, #0
 8008d22:	6933      	ldr	r3, [r6, #16]
 8008d24:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008d28:	6918      	ldr	r0, [r3, #16]
 8008d2a:	f000 fac5 	bl	80092b8 <__hi0bits>
 8008d2e:	f1c0 0020 	rsb	r0, r0, #32
 8008d32:	9b05      	ldr	r3, [sp, #20]
 8008d34:	4418      	add	r0, r3
 8008d36:	f010 001f 	ands.w	r0, r0, #31
 8008d3a:	f000 8092 	beq.w	8008e62 <_dtoa_r+0x90a>
 8008d3e:	f1c0 0320 	rsb	r3, r0, #32
 8008d42:	2b04      	cmp	r3, #4
 8008d44:	f340 808a 	ble.w	8008e5c <_dtoa_r+0x904>
 8008d48:	f1c0 001c 	rsb	r0, r0, #28
 8008d4c:	9b04      	ldr	r3, [sp, #16]
 8008d4e:	4403      	add	r3, r0
 8008d50:	9304      	str	r3, [sp, #16]
 8008d52:	9b05      	ldr	r3, [sp, #20]
 8008d54:	4403      	add	r3, r0
 8008d56:	4405      	add	r5, r0
 8008d58:	9305      	str	r3, [sp, #20]
 8008d5a:	9b04      	ldr	r3, [sp, #16]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	dd07      	ble.n	8008d70 <_dtoa_r+0x818>
 8008d60:	ee18 1a10 	vmov	r1, s16
 8008d64:	461a      	mov	r2, r3
 8008d66:	4620      	mov	r0, r4
 8008d68:	f000 fc10 	bl	800958c <__lshift>
 8008d6c:	ee08 0a10 	vmov	s16, r0
 8008d70:	9b05      	ldr	r3, [sp, #20]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	dd05      	ble.n	8008d82 <_dtoa_r+0x82a>
 8008d76:	4631      	mov	r1, r6
 8008d78:	461a      	mov	r2, r3
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	f000 fc06 	bl	800958c <__lshift>
 8008d80:	4606      	mov	r6, r0
 8008d82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d06e      	beq.n	8008e66 <_dtoa_r+0x90e>
 8008d88:	ee18 0a10 	vmov	r0, s16
 8008d8c:	4631      	mov	r1, r6
 8008d8e:	f000 fc6d 	bl	800966c <__mcmp>
 8008d92:	2800      	cmp	r0, #0
 8008d94:	da67      	bge.n	8008e66 <_dtoa_r+0x90e>
 8008d96:	9b00      	ldr	r3, [sp, #0]
 8008d98:	3b01      	subs	r3, #1
 8008d9a:	ee18 1a10 	vmov	r1, s16
 8008d9e:	9300      	str	r3, [sp, #0]
 8008da0:	220a      	movs	r2, #10
 8008da2:	2300      	movs	r3, #0
 8008da4:	4620      	mov	r0, r4
 8008da6:	f000 fa41 	bl	800922c <__multadd>
 8008daa:	9b08      	ldr	r3, [sp, #32]
 8008dac:	ee08 0a10 	vmov	s16, r0
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	f000 81b1 	beq.w	8009118 <_dtoa_r+0xbc0>
 8008db6:	2300      	movs	r3, #0
 8008db8:	4639      	mov	r1, r7
 8008dba:	220a      	movs	r2, #10
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	f000 fa35 	bl	800922c <__multadd>
 8008dc2:	9b02      	ldr	r3, [sp, #8]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	4607      	mov	r7, r0
 8008dc8:	f300 808e 	bgt.w	8008ee8 <_dtoa_r+0x990>
 8008dcc:	9b06      	ldr	r3, [sp, #24]
 8008dce:	2b02      	cmp	r3, #2
 8008dd0:	dc51      	bgt.n	8008e76 <_dtoa_r+0x91e>
 8008dd2:	e089      	b.n	8008ee8 <_dtoa_r+0x990>
 8008dd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008dd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008dda:	e74b      	b.n	8008c74 <_dtoa_r+0x71c>
 8008ddc:	9b03      	ldr	r3, [sp, #12]
 8008dde:	1e5e      	subs	r6, r3, #1
 8008de0:	9b07      	ldr	r3, [sp, #28]
 8008de2:	42b3      	cmp	r3, r6
 8008de4:	bfbf      	itttt	lt
 8008de6:	9b07      	ldrlt	r3, [sp, #28]
 8008de8:	9607      	strlt	r6, [sp, #28]
 8008dea:	1af2      	sublt	r2, r6, r3
 8008dec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008dee:	bfb6      	itet	lt
 8008df0:	189b      	addlt	r3, r3, r2
 8008df2:	1b9e      	subge	r6, r3, r6
 8008df4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008df6:	9b03      	ldr	r3, [sp, #12]
 8008df8:	bfb8      	it	lt
 8008dfa:	2600      	movlt	r6, #0
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	bfb7      	itett	lt
 8008e00:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008e04:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008e08:	1a9d      	sublt	r5, r3, r2
 8008e0a:	2300      	movlt	r3, #0
 8008e0c:	e734      	b.n	8008c78 <_dtoa_r+0x720>
 8008e0e:	9e07      	ldr	r6, [sp, #28]
 8008e10:	9d04      	ldr	r5, [sp, #16]
 8008e12:	9f08      	ldr	r7, [sp, #32]
 8008e14:	e73b      	b.n	8008c8e <_dtoa_r+0x736>
 8008e16:	9a07      	ldr	r2, [sp, #28]
 8008e18:	e767      	b.n	8008cea <_dtoa_r+0x792>
 8008e1a:	9b06      	ldr	r3, [sp, #24]
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	dc18      	bgt.n	8008e52 <_dtoa_r+0x8fa>
 8008e20:	f1ba 0f00 	cmp.w	sl, #0
 8008e24:	d115      	bne.n	8008e52 <_dtoa_r+0x8fa>
 8008e26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008e2a:	b993      	cbnz	r3, 8008e52 <_dtoa_r+0x8fa>
 8008e2c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008e30:	0d1b      	lsrs	r3, r3, #20
 8008e32:	051b      	lsls	r3, r3, #20
 8008e34:	b183      	cbz	r3, 8008e58 <_dtoa_r+0x900>
 8008e36:	9b04      	ldr	r3, [sp, #16]
 8008e38:	3301      	adds	r3, #1
 8008e3a:	9304      	str	r3, [sp, #16]
 8008e3c:	9b05      	ldr	r3, [sp, #20]
 8008e3e:	3301      	adds	r3, #1
 8008e40:	9305      	str	r3, [sp, #20]
 8008e42:	f04f 0801 	mov.w	r8, #1
 8008e46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	f47f af6a 	bne.w	8008d22 <_dtoa_r+0x7ca>
 8008e4e:	2001      	movs	r0, #1
 8008e50:	e76f      	b.n	8008d32 <_dtoa_r+0x7da>
 8008e52:	f04f 0800 	mov.w	r8, #0
 8008e56:	e7f6      	b.n	8008e46 <_dtoa_r+0x8ee>
 8008e58:	4698      	mov	r8, r3
 8008e5a:	e7f4      	b.n	8008e46 <_dtoa_r+0x8ee>
 8008e5c:	f43f af7d 	beq.w	8008d5a <_dtoa_r+0x802>
 8008e60:	4618      	mov	r0, r3
 8008e62:	301c      	adds	r0, #28
 8008e64:	e772      	b.n	8008d4c <_dtoa_r+0x7f4>
 8008e66:	9b03      	ldr	r3, [sp, #12]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	dc37      	bgt.n	8008edc <_dtoa_r+0x984>
 8008e6c:	9b06      	ldr	r3, [sp, #24]
 8008e6e:	2b02      	cmp	r3, #2
 8008e70:	dd34      	ble.n	8008edc <_dtoa_r+0x984>
 8008e72:	9b03      	ldr	r3, [sp, #12]
 8008e74:	9302      	str	r3, [sp, #8]
 8008e76:	9b02      	ldr	r3, [sp, #8]
 8008e78:	b96b      	cbnz	r3, 8008e96 <_dtoa_r+0x93e>
 8008e7a:	4631      	mov	r1, r6
 8008e7c:	2205      	movs	r2, #5
 8008e7e:	4620      	mov	r0, r4
 8008e80:	f000 f9d4 	bl	800922c <__multadd>
 8008e84:	4601      	mov	r1, r0
 8008e86:	4606      	mov	r6, r0
 8008e88:	ee18 0a10 	vmov	r0, s16
 8008e8c:	f000 fbee 	bl	800966c <__mcmp>
 8008e90:	2800      	cmp	r0, #0
 8008e92:	f73f adbb 	bgt.w	8008a0c <_dtoa_r+0x4b4>
 8008e96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e98:	9d01      	ldr	r5, [sp, #4]
 8008e9a:	43db      	mvns	r3, r3
 8008e9c:	9300      	str	r3, [sp, #0]
 8008e9e:	f04f 0800 	mov.w	r8, #0
 8008ea2:	4631      	mov	r1, r6
 8008ea4:	4620      	mov	r0, r4
 8008ea6:	f000 f99f 	bl	80091e8 <_Bfree>
 8008eaa:	2f00      	cmp	r7, #0
 8008eac:	f43f aea4 	beq.w	8008bf8 <_dtoa_r+0x6a0>
 8008eb0:	f1b8 0f00 	cmp.w	r8, #0
 8008eb4:	d005      	beq.n	8008ec2 <_dtoa_r+0x96a>
 8008eb6:	45b8      	cmp	r8, r7
 8008eb8:	d003      	beq.n	8008ec2 <_dtoa_r+0x96a>
 8008eba:	4641      	mov	r1, r8
 8008ebc:	4620      	mov	r0, r4
 8008ebe:	f000 f993 	bl	80091e8 <_Bfree>
 8008ec2:	4639      	mov	r1, r7
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	f000 f98f 	bl	80091e8 <_Bfree>
 8008eca:	e695      	b.n	8008bf8 <_dtoa_r+0x6a0>
 8008ecc:	2600      	movs	r6, #0
 8008ece:	4637      	mov	r7, r6
 8008ed0:	e7e1      	b.n	8008e96 <_dtoa_r+0x93e>
 8008ed2:	9700      	str	r7, [sp, #0]
 8008ed4:	4637      	mov	r7, r6
 8008ed6:	e599      	b.n	8008a0c <_dtoa_r+0x4b4>
 8008ed8:	40240000 	.word	0x40240000
 8008edc:	9b08      	ldr	r3, [sp, #32]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	f000 80ca 	beq.w	8009078 <_dtoa_r+0xb20>
 8008ee4:	9b03      	ldr	r3, [sp, #12]
 8008ee6:	9302      	str	r3, [sp, #8]
 8008ee8:	2d00      	cmp	r5, #0
 8008eea:	dd05      	ble.n	8008ef8 <_dtoa_r+0x9a0>
 8008eec:	4639      	mov	r1, r7
 8008eee:	462a      	mov	r2, r5
 8008ef0:	4620      	mov	r0, r4
 8008ef2:	f000 fb4b 	bl	800958c <__lshift>
 8008ef6:	4607      	mov	r7, r0
 8008ef8:	f1b8 0f00 	cmp.w	r8, #0
 8008efc:	d05b      	beq.n	8008fb6 <_dtoa_r+0xa5e>
 8008efe:	6879      	ldr	r1, [r7, #4]
 8008f00:	4620      	mov	r0, r4
 8008f02:	f000 f931 	bl	8009168 <_Balloc>
 8008f06:	4605      	mov	r5, r0
 8008f08:	b928      	cbnz	r0, 8008f16 <_dtoa_r+0x9be>
 8008f0a:	4b87      	ldr	r3, [pc, #540]	; (8009128 <_dtoa_r+0xbd0>)
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008f12:	f7ff bb3b 	b.w	800858c <_dtoa_r+0x34>
 8008f16:	693a      	ldr	r2, [r7, #16]
 8008f18:	3202      	adds	r2, #2
 8008f1a:	0092      	lsls	r2, r2, #2
 8008f1c:	f107 010c 	add.w	r1, r7, #12
 8008f20:	300c      	adds	r0, #12
 8008f22:	f000 f913 	bl	800914c <memcpy>
 8008f26:	2201      	movs	r2, #1
 8008f28:	4629      	mov	r1, r5
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	f000 fb2e 	bl	800958c <__lshift>
 8008f30:	9b01      	ldr	r3, [sp, #4]
 8008f32:	f103 0901 	add.w	r9, r3, #1
 8008f36:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008f3a:	4413      	add	r3, r2
 8008f3c:	9305      	str	r3, [sp, #20]
 8008f3e:	f00a 0301 	and.w	r3, sl, #1
 8008f42:	46b8      	mov	r8, r7
 8008f44:	9304      	str	r3, [sp, #16]
 8008f46:	4607      	mov	r7, r0
 8008f48:	4631      	mov	r1, r6
 8008f4a:	ee18 0a10 	vmov	r0, s16
 8008f4e:	f7ff fa75 	bl	800843c <quorem>
 8008f52:	4641      	mov	r1, r8
 8008f54:	9002      	str	r0, [sp, #8]
 8008f56:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008f5a:	ee18 0a10 	vmov	r0, s16
 8008f5e:	f000 fb85 	bl	800966c <__mcmp>
 8008f62:	463a      	mov	r2, r7
 8008f64:	9003      	str	r0, [sp, #12]
 8008f66:	4631      	mov	r1, r6
 8008f68:	4620      	mov	r0, r4
 8008f6a:	f000 fb9b 	bl	80096a4 <__mdiff>
 8008f6e:	68c2      	ldr	r2, [r0, #12]
 8008f70:	f109 3bff 	add.w	fp, r9, #4294967295
 8008f74:	4605      	mov	r5, r0
 8008f76:	bb02      	cbnz	r2, 8008fba <_dtoa_r+0xa62>
 8008f78:	4601      	mov	r1, r0
 8008f7a:	ee18 0a10 	vmov	r0, s16
 8008f7e:	f000 fb75 	bl	800966c <__mcmp>
 8008f82:	4602      	mov	r2, r0
 8008f84:	4629      	mov	r1, r5
 8008f86:	4620      	mov	r0, r4
 8008f88:	9207      	str	r2, [sp, #28]
 8008f8a:	f000 f92d 	bl	80091e8 <_Bfree>
 8008f8e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008f92:	ea43 0102 	orr.w	r1, r3, r2
 8008f96:	9b04      	ldr	r3, [sp, #16]
 8008f98:	430b      	orrs	r3, r1
 8008f9a:	464d      	mov	r5, r9
 8008f9c:	d10f      	bne.n	8008fbe <_dtoa_r+0xa66>
 8008f9e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008fa2:	d02a      	beq.n	8008ffa <_dtoa_r+0xaa2>
 8008fa4:	9b03      	ldr	r3, [sp, #12]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	dd02      	ble.n	8008fb0 <_dtoa_r+0xa58>
 8008faa:	9b02      	ldr	r3, [sp, #8]
 8008fac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008fb0:	f88b a000 	strb.w	sl, [fp]
 8008fb4:	e775      	b.n	8008ea2 <_dtoa_r+0x94a>
 8008fb6:	4638      	mov	r0, r7
 8008fb8:	e7ba      	b.n	8008f30 <_dtoa_r+0x9d8>
 8008fba:	2201      	movs	r2, #1
 8008fbc:	e7e2      	b.n	8008f84 <_dtoa_r+0xa2c>
 8008fbe:	9b03      	ldr	r3, [sp, #12]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	db04      	blt.n	8008fce <_dtoa_r+0xa76>
 8008fc4:	9906      	ldr	r1, [sp, #24]
 8008fc6:	430b      	orrs	r3, r1
 8008fc8:	9904      	ldr	r1, [sp, #16]
 8008fca:	430b      	orrs	r3, r1
 8008fcc:	d122      	bne.n	8009014 <_dtoa_r+0xabc>
 8008fce:	2a00      	cmp	r2, #0
 8008fd0:	ddee      	ble.n	8008fb0 <_dtoa_r+0xa58>
 8008fd2:	ee18 1a10 	vmov	r1, s16
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	4620      	mov	r0, r4
 8008fda:	f000 fad7 	bl	800958c <__lshift>
 8008fde:	4631      	mov	r1, r6
 8008fe0:	ee08 0a10 	vmov	s16, r0
 8008fe4:	f000 fb42 	bl	800966c <__mcmp>
 8008fe8:	2800      	cmp	r0, #0
 8008fea:	dc03      	bgt.n	8008ff4 <_dtoa_r+0xa9c>
 8008fec:	d1e0      	bne.n	8008fb0 <_dtoa_r+0xa58>
 8008fee:	f01a 0f01 	tst.w	sl, #1
 8008ff2:	d0dd      	beq.n	8008fb0 <_dtoa_r+0xa58>
 8008ff4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008ff8:	d1d7      	bne.n	8008faa <_dtoa_r+0xa52>
 8008ffa:	2339      	movs	r3, #57	; 0x39
 8008ffc:	f88b 3000 	strb.w	r3, [fp]
 8009000:	462b      	mov	r3, r5
 8009002:	461d      	mov	r5, r3
 8009004:	3b01      	subs	r3, #1
 8009006:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800900a:	2a39      	cmp	r2, #57	; 0x39
 800900c:	d071      	beq.n	80090f2 <_dtoa_r+0xb9a>
 800900e:	3201      	adds	r2, #1
 8009010:	701a      	strb	r2, [r3, #0]
 8009012:	e746      	b.n	8008ea2 <_dtoa_r+0x94a>
 8009014:	2a00      	cmp	r2, #0
 8009016:	dd07      	ble.n	8009028 <_dtoa_r+0xad0>
 8009018:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800901c:	d0ed      	beq.n	8008ffa <_dtoa_r+0xaa2>
 800901e:	f10a 0301 	add.w	r3, sl, #1
 8009022:	f88b 3000 	strb.w	r3, [fp]
 8009026:	e73c      	b.n	8008ea2 <_dtoa_r+0x94a>
 8009028:	9b05      	ldr	r3, [sp, #20]
 800902a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800902e:	4599      	cmp	r9, r3
 8009030:	d047      	beq.n	80090c2 <_dtoa_r+0xb6a>
 8009032:	ee18 1a10 	vmov	r1, s16
 8009036:	2300      	movs	r3, #0
 8009038:	220a      	movs	r2, #10
 800903a:	4620      	mov	r0, r4
 800903c:	f000 f8f6 	bl	800922c <__multadd>
 8009040:	45b8      	cmp	r8, r7
 8009042:	ee08 0a10 	vmov	s16, r0
 8009046:	f04f 0300 	mov.w	r3, #0
 800904a:	f04f 020a 	mov.w	r2, #10
 800904e:	4641      	mov	r1, r8
 8009050:	4620      	mov	r0, r4
 8009052:	d106      	bne.n	8009062 <_dtoa_r+0xb0a>
 8009054:	f000 f8ea 	bl	800922c <__multadd>
 8009058:	4680      	mov	r8, r0
 800905a:	4607      	mov	r7, r0
 800905c:	f109 0901 	add.w	r9, r9, #1
 8009060:	e772      	b.n	8008f48 <_dtoa_r+0x9f0>
 8009062:	f000 f8e3 	bl	800922c <__multadd>
 8009066:	4639      	mov	r1, r7
 8009068:	4680      	mov	r8, r0
 800906a:	2300      	movs	r3, #0
 800906c:	220a      	movs	r2, #10
 800906e:	4620      	mov	r0, r4
 8009070:	f000 f8dc 	bl	800922c <__multadd>
 8009074:	4607      	mov	r7, r0
 8009076:	e7f1      	b.n	800905c <_dtoa_r+0xb04>
 8009078:	9b03      	ldr	r3, [sp, #12]
 800907a:	9302      	str	r3, [sp, #8]
 800907c:	9d01      	ldr	r5, [sp, #4]
 800907e:	ee18 0a10 	vmov	r0, s16
 8009082:	4631      	mov	r1, r6
 8009084:	f7ff f9da 	bl	800843c <quorem>
 8009088:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800908c:	9b01      	ldr	r3, [sp, #4]
 800908e:	f805 ab01 	strb.w	sl, [r5], #1
 8009092:	1aea      	subs	r2, r5, r3
 8009094:	9b02      	ldr	r3, [sp, #8]
 8009096:	4293      	cmp	r3, r2
 8009098:	dd09      	ble.n	80090ae <_dtoa_r+0xb56>
 800909a:	ee18 1a10 	vmov	r1, s16
 800909e:	2300      	movs	r3, #0
 80090a0:	220a      	movs	r2, #10
 80090a2:	4620      	mov	r0, r4
 80090a4:	f000 f8c2 	bl	800922c <__multadd>
 80090a8:	ee08 0a10 	vmov	s16, r0
 80090ac:	e7e7      	b.n	800907e <_dtoa_r+0xb26>
 80090ae:	9b02      	ldr	r3, [sp, #8]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	bfc8      	it	gt
 80090b4:	461d      	movgt	r5, r3
 80090b6:	9b01      	ldr	r3, [sp, #4]
 80090b8:	bfd8      	it	le
 80090ba:	2501      	movle	r5, #1
 80090bc:	441d      	add	r5, r3
 80090be:	f04f 0800 	mov.w	r8, #0
 80090c2:	ee18 1a10 	vmov	r1, s16
 80090c6:	2201      	movs	r2, #1
 80090c8:	4620      	mov	r0, r4
 80090ca:	f000 fa5f 	bl	800958c <__lshift>
 80090ce:	4631      	mov	r1, r6
 80090d0:	ee08 0a10 	vmov	s16, r0
 80090d4:	f000 faca 	bl	800966c <__mcmp>
 80090d8:	2800      	cmp	r0, #0
 80090da:	dc91      	bgt.n	8009000 <_dtoa_r+0xaa8>
 80090dc:	d102      	bne.n	80090e4 <_dtoa_r+0xb8c>
 80090de:	f01a 0f01 	tst.w	sl, #1
 80090e2:	d18d      	bne.n	8009000 <_dtoa_r+0xaa8>
 80090e4:	462b      	mov	r3, r5
 80090e6:	461d      	mov	r5, r3
 80090e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80090ec:	2a30      	cmp	r2, #48	; 0x30
 80090ee:	d0fa      	beq.n	80090e6 <_dtoa_r+0xb8e>
 80090f0:	e6d7      	b.n	8008ea2 <_dtoa_r+0x94a>
 80090f2:	9a01      	ldr	r2, [sp, #4]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d184      	bne.n	8009002 <_dtoa_r+0xaaa>
 80090f8:	9b00      	ldr	r3, [sp, #0]
 80090fa:	3301      	adds	r3, #1
 80090fc:	9300      	str	r3, [sp, #0]
 80090fe:	2331      	movs	r3, #49	; 0x31
 8009100:	7013      	strb	r3, [r2, #0]
 8009102:	e6ce      	b.n	8008ea2 <_dtoa_r+0x94a>
 8009104:	4b09      	ldr	r3, [pc, #36]	; (800912c <_dtoa_r+0xbd4>)
 8009106:	f7ff ba95 	b.w	8008634 <_dtoa_r+0xdc>
 800910a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800910c:	2b00      	cmp	r3, #0
 800910e:	f47f aa6e 	bne.w	80085ee <_dtoa_r+0x96>
 8009112:	4b07      	ldr	r3, [pc, #28]	; (8009130 <_dtoa_r+0xbd8>)
 8009114:	f7ff ba8e 	b.w	8008634 <_dtoa_r+0xdc>
 8009118:	9b02      	ldr	r3, [sp, #8]
 800911a:	2b00      	cmp	r3, #0
 800911c:	dcae      	bgt.n	800907c <_dtoa_r+0xb24>
 800911e:	9b06      	ldr	r3, [sp, #24]
 8009120:	2b02      	cmp	r3, #2
 8009122:	f73f aea8 	bgt.w	8008e76 <_dtoa_r+0x91e>
 8009126:	e7a9      	b.n	800907c <_dtoa_r+0xb24>
 8009128:	0800aad3 	.word	0x0800aad3
 800912c:	0800aa30 	.word	0x0800aa30
 8009130:	0800aa54 	.word	0x0800aa54

08009134 <_localeconv_r>:
 8009134:	4800      	ldr	r0, [pc, #0]	; (8009138 <_localeconv_r+0x4>)
 8009136:	4770      	bx	lr
 8009138:	20000170 	.word	0x20000170

0800913c <malloc>:
 800913c:	4b02      	ldr	r3, [pc, #8]	; (8009148 <malloc+0xc>)
 800913e:	4601      	mov	r1, r0
 8009140:	6818      	ldr	r0, [r3, #0]
 8009142:	f000 bc17 	b.w	8009974 <_malloc_r>
 8009146:	bf00      	nop
 8009148:	2000001c 	.word	0x2000001c

0800914c <memcpy>:
 800914c:	440a      	add	r2, r1
 800914e:	4291      	cmp	r1, r2
 8009150:	f100 33ff 	add.w	r3, r0, #4294967295
 8009154:	d100      	bne.n	8009158 <memcpy+0xc>
 8009156:	4770      	bx	lr
 8009158:	b510      	push	{r4, lr}
 800915a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800915e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009162:	4291      	cmp	r1, r2
 8009164:	d1f9      	bne.n	800915a <memcpy+0xe>
 8009166:	bd10      	pop	{r4, pc}

08009168 <_Balloc>:
 8009168:	b570      	push	{r4, r5, r6, lr}
 800916a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800916c:	4604      	mov	r4, r0
 800916e:	460d      	mov	r5, r1
 8009170:	b976      	cbnz	r6, 8009190 <_Balloc+0x28>
 8009172:	2010      	movs	r0, #16
 8009174:	f7ff ffe2 	bl	800913c <malloc>
 8009178:	4602      	mov	r2, r0
 800917a:	6260      	str	r0, [r4, #36]	; 0x24
 800917c:	b920      	cbnz	r0, 8009188 <_Balloc+0x20>
 800917e:	4b18      	ldr	r3, [pc, #96]	; (80091e0 <_Balloc+0x78>)
 8009180:	4818      	ldr	r0, [pc, #96]	; (80091e4 <_Balloc+0x7c>)
 8009182:	2166      	movs	r1, #102	; 0x66
 8009184:	f000 fdd6 	bl	8009d34 <__assert_func>
 8009188:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800918c:	6006      	str	r6, [r0, #0]
 800918e:	60c6      	str	r6, [r0, #12]
 8009190:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009192:	68f3      	ldr	r3, [r6, #12]
 8009194:	b183      	cbz	r3, 80091b8 <_Balloc+0x50>
 8009196:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009198:	68db      	ldr	r3, [r3, #12]
 800919a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800919e:	b9b8      	cbnz	r0, 80091d0 <_Balloc+0x68>
 80091a0:	2101      	movs	r1, #1
 80091a2:	fa01 f605 	lsl.w	r6, r1, r5
 80091a6:	1d72      	adds	r2, r6, #5
 80091a8:	0092      	lsls	r2, r2, #2
 80091aa:	4620      	mov	r0, r4
 80091ac:	f000 fb60 	bl	8009870 <_calloc_r>
 80091b0:	b160      	cbz	r0, 80091cc <_Balloc+0x64>
 80091b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80091b6:	e00e      	b.n	80091d6 <_Balloc+0x6e>
 80091b8:	2221      	movs	r2, #33	; 0x21
 80091ba:	2104      	movs	r1, #4
 80091bc:	4620      	mov	r0, r4
 80091be:	f000 fb57 	bl	8009870 <_calloc_r>
 80091c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091c4:	60f0      	str	r0, [r6, #12]
 80091c6:	68db      	ldr	r3, [r3, #12]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d1e4      	bne.n	8009196 <_Balloc+0x2e>
 80091cc:	2000      	movs	r0, #0
 80091ce:	bd70      	pop	{r4, r5, r6, pc}
 80091d0:	6802      	ldr	r2, [r0, #0]
 80091d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80091d6:	2300      	movs	r3, #0
 80091d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80091dc:	e7f7      	b.n	80091ce <_Balloc+0x66>
 80091de:	bf00      	nop
 80091e0:	0800aa61 	.word	0x0800aa61
 80091e4:	0800aae4 	.word	0x0800aae4

080091e8 <_Bfree>:
 80091e8:	b570      	push	{r4, r5, r6, lr}
 80091ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80091ec:	4605      	mov	r5, r0
 80091ee:	460c      	mov	r4, r1
 80091f0:	b976      	cbnz	r6, 8009210 <_Bfree+0x28>
 80091f2:	2010      	movs	r0, #16
 80091f4:	f7ff ffa2 	bl	800913c <malloc>
 80091f8:	4602      	mov	r2, r0
 80091fa:	6268      	str	r0, [r5, #36]	; 0x24
 80091fc:	b920      	cbnz	r0, 8009208 <_Bfree+0x20>
 80091fe:	4b09      	ldr	r3, [pc, #36]	; (8009224 <_Bfree+0x3c>)
 8009200:	4809      	ldr	r0, [pc, #36]	; (8009228 <_Bfree+0x40>)
 8009202:	218a      	movs	r1, #138	; 0x8a
 8009204:	f000 fd96 	bl	8009d34 <__assert_func>
 8009208:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800920c:	6006      	str	r6, [r0, #0]
 800920e:	60c6      	str	r6, [r0, #12]
 8009210:	b13c      	cbz	r4, 8009222 <_Bfree+0x3a>
 8009212:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009214:	6862      	ldr	r2, [r4, #4]
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800921c:	6021      	str	r1, [r4, #0]
 800921e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009222:	bd70      	pop	{r4, r5, r6, pc}
 8009224:	0800aa61 	.word	0x0800aa61
 8009228:	0800aae4 	.word	0x0800aae4

0800922c <__multadd>:
 800922c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009230:	690d      	ldr	r5, [r1, #16]
 8009232:	4607      	mov	r7, r0
 8009234:	460c      	mov	r4, r1
 8009236:	461e      	mov	r6, r3
 8009238:	f101 0c14 	add.w	ip, r1, #20
 800923c:	2000      	movs	r0, #0
 800923e:	f8dc 3000 	ldr.w	r3, [ip]
 8009242:	b299      	uxth	r1, r3
 8009244:	fb02 6101 	mla	r1, r2, r1, r6
 8009248:	0c1e      	lsrs	r6, r3, #16
 800924a:	0c0b      	lsrs	r3, r1, #16
 800924c:	fb02 3306 	mla	r3, r2, r6, r3
 8009250:	b289      	uxth	r1, r1
 8009252:	3001      	adds	r0, #1
 8009254:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009258:	4285      	cmp	r5, r0
 800925a:	f84c 1b04 	str.w	r1, [ip], #4
 800925e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009262:	dcec      	bgt.n	800923e <__multadd+0x12>
 8009264:	b30e      	cbz	r6, 80092aa <__multadd+0x7e>
 8009266:	68a3      	ldr	r3, [r4, #8]
 8009268:	42ab      	cmp	r3, r5
 800926a:	dc19      	bgt.n	80092a0 <__multadd+0x74>
 800926c:	6861      	ldr	r1, [r4, #4]
 800926e:	4638      	mov	r0, r7
 8009270:	3101      	adds	r1, #1
 8009272:	f7ff ff79 	bl	8009168 <_Balloc>
 8009276:	4680      	mov	r8, r0
 8009278:	b928      	cbnz	r0, 8009286 <__multadd+0x5a>
 800927a:	4602      	mov	r2, r0
 800927c:	4b0c      	ldr	r3, [pc, #48]	; (80092b0 <__multadd+0x84>)
 800927e:	480d      	ldr	r0, [pc, #52]	; (80092b4 <__multadd+0x88>)
 8009280:	21b5      	movs	r1, #181	; 0xb5
 8009282:	f000 fd57 	bl	8009d34 <__assert_func>
 8009286:	6922      	ldr	r2, [r4, #16]
 8009288:	3202      	adds	r2, #2
 800928a:	f104 010c 	add.w	r1, r4, #12
 800928e:	0092      	lsls	r2, r2, #2
 8009290:	300c      	adds	r0, #12
 8009292:	f7ff ff5b 	bl	800914c <memcpy>
 8009296:	4621      	mov	r1, r4
 8009298:	4638      	mov	r0, r7
 800929a:	f7ff ffa5 	bl	80091e8 <_Bfree>
 800929e:	4644      	mov	r4, r8
 80092a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80092a4:	3501      	adds	r5, #1
 80092a6:	615e      	str	r6, [r3, #20]
 80092a8:	6125      	str	r5, [r4, #16]
 80092aa:	4620      	mov	r0, r4
 80092ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092b0:	0800aad3 	.word	0x0800aad3
 80092b4:	0800aae4 	.word	0x0800aae4

080092b8 <__hi0bits>:
 80092b8:	0c03      	lsrs	r3, r0, #16
 80092ba:	041b      	lsls	r3, r3, #16
 80092bc:	b9d3      	cbnz	r3, 80092f4 <__hi0bits+0x3c>
 80092be:	0400      	lsls	r0, r0, #16
 80092c0:	2310      	movs	r3, #16
 80092c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80092c6:	bf04      	itt	eq
 80092c8:	0200      	lsleq	r0, r0, #8
 80092ca:	3308      	addeq	r3, #8
 80092cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80092d0:	bf04      	itt	eq
 80092d2:	0100      	lsleq	r0, r0, #4
 80092d4:	3304      	addeq	r3, #4
 80092d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80092da:	bf04      	itt	eq
 80092dc:	0080      	lsleq	r0, r0, #2
 80092de:	3302      	addeq	r3, #2
 80092e0:	2800      	cmp	r0, #0
 80092e2:	db05      	blt.n	80092f0 <__hi0bits+0x38>
 80092e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80092e8:	f103 0301 	add.w	r3, r3, #1
 80092ec:	bf08      	it	eq
 80092ee:	2320      	moveq	r3, #32
 80092f0:	4618      	mov	r0, r3
 80092f2:	4770      	bx	lr
 80092f4:	2300      	movs	r3, #0
 80092f6:	e7e4      	b.n	80092c2 <__hi0bits+0xa>

080092f8 <__lo0bits>:
 80092f8:	6803      	ldr	r3, [r0, #0]
 80092fa:	f013 0207 	ands.w	r2, r3, #7
 80092fe:	4601      	mov	r1, r0
 8009300:	d00b      	beq.n	800931a <__lo0bits+0x22>
 8009302:	07da      	lsls	r2, r3, #31
 8009304:	d423      	bmi.n	800934e <__lo0bits+0x56>
 8009306:	0798      	lsls	r0, r3, #30
 8009308:	bf49      	itett	mi
 800930a:	085b      	lsrmi	r3, r3, #1
 800930c:	089b      	lsrpl	r3, r3, #2
 800930e:	2001      	movmi	r0, #1
 8009310:	600b      	strmi	r3, [r1, #0]
 8009312:	bf5c      	itt	pl
 8009314:	600b      	strpl	r3, [r1, #0]
 8009316:	2002      	movpl	r0, #2
 8009318:	4770      	bx	lr
 800931a:	b298      	uxth	r0, r3
 800931c:	b9a8      	cbnz	r0, 800934a <__lo0bits+0x52>
 800931e:	0c1b      	lsrs	r3, r3, #16
 8009320:	2010      	movs	r0, #16
 8009322:	b2da      	uxtb	r2, r3
 8009324:	b90a      	cbnz	r2, 800932a <__lo0bits+0x32>
 8009326:	3008      	adds	r0, #8
 8009328:	0a1b      	lsrs	r3, r3, #8
 800932a:	071a      	lsls	r2, r3, #28
 800932c:	bf04      	itt	eq
 800932e:	091b      	lsreq	r3, r3, #4
 8009330:	3004      	addeq	r0, #4
 8009332:	079a      	lsls	r2, r3, #30
 8009334:	bf04      	itt	eq
 8009336:	089b      	lsreq	r3, r3, #2
 8009338:	3002      	addeq	r0, #2
 800933a:	07da      	lsls	r2, r3, #31
 800933c:	d403      	bmi.n	8009346 <__lo0bits+0x4e>
 800933e:	085b      	lsrs	r3, r3, #1
 8009340:	f100 0001 	add.w	r0, r0, #1
 8009344:	d005      	beq.n	8009352 <__lo0bits+0x5a>
 8009346:	600b      	str	r3, [r1, #0]
 8009348:	4770      	bx	lr
 800934a:	4610      	mov	r0, r2
 800934c:	e7e9      	b.n	8009322 <__lo0bits+0x2a>
 800934e:	2000      	movs	r0, #0
 8009350:	4770      	bx	lr
 8009352:	2020      	movs	r0, #32
 8009354:	4770      	bx	lr
	...

08009358 <__i2b>:
 8009358:	b510      	push	{r4, lr}
 800935a:	460c      	mov	r4, r1
 800935c:	2101      	movs	r1, #1
 800935e:	f7ff ff03 	bl	8009168 <_Balloc>
 8009362:	4602      	mov	r2, r0
 8009364:	b928      	cbnz	r0, 8009372 <__i2b+0x1a>
 8009366:	4b05      	ldr	r3, [pc, #20]	; (800937c <__i2b+0x24>)
 8009368:	4805      	ldr	r0, [pc, #20]	; (8009380 <__i2b+0x28>)
 800936a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800936e:	f000 fce1 	bl	8009d34 <__assert_func>
 8009372:	2301      	movs	r3, #1
 8009374:	6144      	str	r4, [r0, #20]
 8009376:	6103      	str	r3, [r0, #16]
 8009378:	bd10      	pop	{r4, pc}
 800937a:	bf00      	nop
 800937c:	0800aad3 	.word	0x0800aad3
 8009380:	0800aae4 	.word	0x0800aae4

08009384 <__multiply>:
 8009384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009388:	4691      	mov	r9, r2
 800938a:	690a      	ldr	r2, [r1, #16]
 800938c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009390:	429a      	cmp	r2, r3
 8009392:	bfb8      	it	lt
 8009394:	460b      	movlt	r3, r1
 8009396:	460c      	mov	r4, r1
 8009398:	bfbc      	itt	lt
 800939a:	464c      	movlt	r4, r9
 800939c:	4699      	movlt	r9, r3
 800939e:	6927      	ldr	r7, [r4, #16]
 80093a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80093a4:	68a3      	ldr	r3, [r4, #8]
 80093a6:	6861      	ldr	r1, [r4, #4]
 80093a8:	eb07 060a 	add.w	r6, r7, sl
 80093ac:	42b3      	cmp	r3, r6
 80093ae:	b085      	sub	sp, #20
 80093b0:	bfb8      	it	lt
 80093b2:	3101      	addlt	r1, #1
 80093b4:	f7ff fed8 	bl	8009168 <_Balloc>
 80093b8:	b930      	cbnz	r0, 80093c8 <__multiply+0x44>
 80093ba:	4602      	mov	r2, r0
 80093bc:	4b44      	ldr	r3, [pc, #272]	; (80094d0 <__multiply+0x14c>)
 80093be:	4845      	ldr	r0, [pc, #276]	; (80094d4 <__multiply+0x150>)
 80093c0:	f240 115d 	movw	r1, #349	; 0x15d
 80093c4:	f000 fcb6 	bl	8009d34 <__assert_func>
 80093c8:	f100 0514 	add.w	r5, r0, #20
 80093cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80093d0:	462b      	mov	r3, r5
 80093d2:	2200      	movs	r2, #0
 80093d4:	4543      	cmp	r3, r8
 80093d6:	d321      	bcc.n	800941c <__multiply+0x98>
 80093d8:	f104 0314 	add.w	r3, r4, #20
 80093dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80093e0:	f109 0314 	add.w	r3, r9, #20
 80093e4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80093e8:	9202      	str	r2, [sp, #8]
 80093ea:	1b3a      	subs	r2, r7, r4
 80093ec:	3a15      	subs	r2, #21
 80093ee:	f022 0203 	bic.w	r2, r2, #3
 80093f2:	3204      	adds	r2, #4
 80093f4:	f104 0115 	add.w	r1, r4, #21
 80093f8:	428f      	cmp	r7, r1
 80093fa:	bf38      	it	cc
 80093fc:	2204      	movcc	r2, #4
 80093fe:	9201      	str	r2, [sp, #4]
 8009400:	9a02      	ldr	r2, [sp, #8]
 8009402:	9303      	str	r3, [sp, #12]
 8009404:	429a      	cmp	r2, r3
 8009406:	d80c      	bhi.n	8009422 <__multiply+0x9e>
 8009408:	2e00      	cmp	r6, #0
 800940a:	dd03      	ble.n	8009414 <__multiply+0x90>
 800940c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009410:	2b00      	cmp	r3, #0
 8009412:	d05a      	beq.n	80094ca <__multiply+0x146>
 8009414:	6106      	str	r6, [r0, #16]
 8009416:	b005      	add	sp, #20
 8009418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800941c:	f843 2b04 	str.w	r2, [r3], #4
 8009420:	e7d8      	b.n	80093d4 <__multiply+0x50>
 8009422:	f8b3 a000 	ldrh.w	sl, [r3]
 8009426:	f1ba 0f00 	cmp.w	sl, #0
 800942a:	d024      	beq.n	8009476 <__multiply+0xf2>
 800942c:	f104 0e14 	add.w	lr, r4, #20
 8009430:	46a9      	mov	r9, r5
 8009432:	f04f 0c00 	mov.w	ip, #0
 8009436:	f85e 2b04 	ldr.w	r2, [lr], #4
 800943a:	f8d9 1000 	ldr.w	r1, [r9]
 800943e:	fa1f fb82 	uxth.w	fp, r2
 8009442:	b289      	uxth	r1, r1
 8009444:	fb0a 110b 	mla	r1, sl, fp, r1
 8009448:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800944c:	f8d9 2000 	ldr.w	r2, [r9]
 8009450:	4461      	add	r1, ip
 8009452:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009456:	fb0a c20b 	mla	r2, sl, fp, ip
 800945a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800945e:	b289      	uxth	r1, r1
 8009460:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009464:	4577      	cmp	r7, lr
 8009466:	f849 1b04 	str.w	r1, [r9], #4
 800946a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800946e:	d8e2      	bhi.n	8009436 <__multiply+0xb2>
 8009470:	9a01      	ldr	r2, [sp, #4]
 8009472:	f845 c002 	str.w	ip, [r5, r2]
 8009476:	9a03      	ldr	r2, [sp, #12]
 8009478:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800947c:	3304      	adds	r3, #4
 800947e:	f1b9 0f00 	cmp.w	r9, #0
 8009482:	d020      	beq.n	80094c6 <__multiply+0x142>
 8009484:	6829      	ldr	r1, [r5, #0]
 8009486:	f104 0c14 	add.w	ip, r4, #20
 800948a:	46ae      	mov	lr, r5
 800948c:	f04f 0a00 	mov.w	sl, #0
 8009490:	f8bc b000 	ldrh.w	fp, [ip]
 8009494:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009498:	fb09 220b 	mla	r2, r9, fp, r2
 800949c:	4492      	add	sl, r2
 800949e:	b289      	uxth	r1, r1
 80094a0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80094a4:	f84e 1b04 	str.w	r1, [lr], #4
 80094a8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80094ac:	f8be 1000 	ldrh.w	r1, [lr]
 80094b0:	0c12      	lsrs	r2, r2, #16
 80094b2:	fb09 1102 	mla	r1, r9, r2, r1
 80094b6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80094ba:	4567      	cmp	r7, ip
 80094bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80094c0:	d8e6      	bhi.n	8009490 <__multiply+0x10c>
 80094c2:	9a01      	ldr	r2, [sp, #4]
 80094c4:	50a9      	str	r1, [r5, r2]
 80094c6:	3504      	adds	r5, #4
 80094c8:	e79a      	b.n	8009400 <__multiply+0x7c>
 80094ca:	3e01      	subs	r6, #1
 80094cc:	e79c      	b.n	8009408 <__multiply+0x84>
 80094ce:	bf00      	nop
 80094d0:	0800aad3 	.word	0x0800aad3
 80094d4:	0800aae4 	.word	0x0800aae4

080094d8 <__pow5mult>:
 80094d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094dc:	4615      	mov	r5, r2
 80094de:	f012 0203 	ands.w	r2, r2, #3
 80094e2:	4606      	mov	r6, r0
 80094e4:	460f      	mov	r7, r1
 80094e6:	d007      	beq.n	80094f8 <__pow5mult+0x20>
 80094e8:	4c25      	ldr	r4, [pc, #148]	; (8009580 <__pow5mult+0xa8>)
 80094ea:	3a01      	subs	r2, #1
 80094ec:	2300      	movs	r3, #0
 80094ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80094f2:	f7ff fe9b 	bl	800922c <__multadd>
 80094f6:	4607      	mov	r7, r0
 80094f8:	10ad      	asrs	r5, r5, #2
 80094fa:	d03d      	beq.n	8009578 <__pow5mult+0xa0>
 80094fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80094fe:	b97c      	cbnz	r4, 8009520 <__pow5mult+0x48>
 8009500:	2010      	movs	r0, #16
 8009502:	f7ff fe1b 	bl	800913c <malloc>
 8009506:	4602      	mov	r2, r0
 8009508:	6270      	str	r0, [r6, #36]	; 0x24
 800950a:	b928      	cbnz	r0, 8009518 <__pow5mult+0x40>
 800950c:	4b1d      	ldr	r3, [pc, #116]	; (8009584 <__pow5mult+0xac>)
 800950e:	481e      	ldr	r0, [pc, #120]	; (8009588 <__pow5mult+0xb0>)
 8009510:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009514:	f000 fc0e 	bl	8009d34 <__assert_func>
 8009518:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800951c:	6004      	str	r4, [r0, #0]
 800951e:	60c4      	str	r4, [r0, #12]
 8009520:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009524:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009528:	b94c      	cbnz	r4, 800953e <__pow5mult+0x66>
 800952a:	f240 2171 	movw	r1, #625	; 0x271
 800952e:	4630      	mov	r0, r6
 8009530:	f7ff ff12 	bl	8009358 <__i2b>
 8009534:	2300      	movs	r3, #0
 8009536:	f8c8 0008 	str.w	r0, [r8, #8]
 800953a:	4604      	mov	r4, r0
 800953c:	6003      	str	r3, [r0, #0]
 800953e:	f04f 0900 	mov.w	r9, #0
 8009542:	07eb      	lsls	r3, r5, #31
 8009544:	d50a      	bpl.n	800955c <__pow5mult+0x84>
 8009546:	4639      	mov	r1, r7
 8009548:	4622      	mov	r2, r4
 800954a:	4630      	mov	r0, r6
 800954c:	f7ff ff1a 	bl	8009384 <__multiply>
 8009550:	4639      	mov	r1, r7
 8009552:	4680      	mov	r8, r0
 8009554:	4630      	mov	r0, r6
 8009556:	f7ff fe47 	bl	80091e8 <_Bfree>
 800955a:	4647      	mov	r7, r8
 800955c:	106d      	asrs	r5, r5, #1
 800955e:	d00b      	beq.n	8009578 <__pow5mult+0xa0>
 8009560:	6820      	ldr	r0, [r4, #0]
 8009562:	b938      	cbnz	r0, 8009574 <__pow5mult+0x9c>
 8009564:	4622      	mov	r2, r4
 8009566:	4621      	mov	r1, r4
 8009568:	4630      	mov	r0, r6
 800956a:	f7ff ff0b 	bl	8009384 <__multiply>
 800956e:	6020      	str	r0, [r4, #0]
 8009570:	f8c0 9000 	str.w	r9, [r0]
 8009574:	4604      	mov	r4, r0
 8009576:	e7e4      	b.n	8009542 <__pow5mult+0x6a>
 8009578:	4638      	mov	r0, r7
 800957a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800957e:	bf00      	nop
 8009580:	0800ac30 	.word	0x0800ac30
 8009584:	0800aa61 	.word	0x0800aa61
 8009588:	0800aae4 	.word	0x0800aae4

0800958c <__lshift>:
 800958c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009590:	460c      	mov	r4, r1
 8009592:	6849      	ldr	r1, [r1, #4]
 8009594:	6923      	ldr	r3, [r4, #16]
 8009596:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800959a:	68a3      	ldr	r3, [r4, #8]
 800959c:	4607      	mov	r7, r0
 800959e:	4691      	mov	r9, r2
 80095a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80095a4:	f108 0601 	add.w	r6, r8, #1
 80095a8:	42b3      	cmp	r3, r6
 80095aa:	db0b      	blt.n	80095c4 <__lshift+0x38>
 80095ac:	4638      	mov	r0, r7
 80095ae:	f7ff fddb 	bl	8009168 <_Balloc>
 80095b2:	4605      	mov	r5, r0
 80095b4:	b948      	cbnz	r0, 80095ca <__lshift+0x3e>
 80095b6:	4602      	mov	r2, r0
 80095b8:	4b2a      	ldr	r3, [pc, #168]	; (8009664 <__lshift+0xd8>)
 80095ba:	482b      	ldr	r0, [pc, #172]	; (8009668 <__lshift+0xdc>)
 80095bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80095c0:	f000 fbb8 	bl	8009d34 <__assert_func>
 80095c4:	3101      	adds	r1, #1
 80095c6:	005b      	lsls	r3, r3, #1
 80095c8:	e7ee      	b.n	80095a8 <__lshift+0x1c>
 80095ca:	2300      	movs	r3, #0
 80095cc:	f100 0114 	add.w	r1, r0, #20
 80095d0:	f100 0210 	add.w	r2, r0, #16
 80095d4:	4618      	mov	r0, r3
 80095d6:	4553      	cmp	r3, sl
 80095d8:	db37      	blt.n	800964a <__lshift+0xbe>
 80095da:	6920      	ldr	r0, [r4, #16]
 80095dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80095e0:	f104 0314 	add.w	r3, r4, #20
 80095e4:	f019 091f 	ands.w	r9, r9, #31
 80095e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80095ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80095f0:	d02f      	beq.n	8009652 <__lshift+0xc6>
 80095f2:	f1c9 0e20 	rsb	lr, r9, #32
 80095f6:	468a      	mov	sl, r1
 80095f8:	f04f 0c00 	mov.w	ip, #0
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	fa02 f209 	lsl.w	r2, r2, r9
 8009602:	ea42 020c 	orr.w	r2, r2, ip
 8009606:	f84a 2b04 	str.w	r2, [sl], #4
 800960a:	f853 2b04 	ldr.w	r2, [r3], #4
 800960e:	4298      	cmp	r0, r3
 8009610:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009614:	d8f2      	bhi.n	80095fc <__lshift+0x70>
 8009616:	1b03      	subs	r3, r0, r4
 8009618:	3b15      	subs	r3, #21
 800961a:	f023 0303 	bic.w	r3, r3, #3
 800961e:	3304      	adds	r3, #4
 8009620:	f104 0215 	add.w	r2, r4, #21
 8009624:	4290      	cmp	r0, r2
 8009626:	bf38      	it	cc
 8009628:	2304      	movcc	r3, #4
 800962a:	f841 c003 	str.w	ip, [r1, r3]
 800962e:	f1bc 0f00 	cmp.w	ip, #0
 8009632:	d001      	beq.n	8009638 <__lshift+0xac>
 8009634:	f108 0602 	add.w	r6, r8, #2
 8009638:	3e01      	subs	r6, #1
 800963a:	4638      	mov	r0, r7
 800963c:	612e      	str	r6, [r5, #16]
 800963e:	4621      	mov	r1, r4
 8009640:	f7ff fdd2 	bl	80091e8 <_Bfree>
 8009644:	4628      	mov	r0, r5
 8009646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800964a:	f842 0f04 	str.w	r0, [r2, #4]!
 800964e:	3301      	adds	r3, #1
 8009650:	e7c1      	b.n	80095d6 <__lshift+0x4a>
 8009652:	3904      	subs	r1, #4
 8009654:	f853 2b04 	ldr.w	r2, [r3], #4
 8009658:	f841 2f04 	str.w	r2, [r1, #4]!
 800965c:	4298      	cmp	r0, r3
 800965e:	d8f9      	bhi.n	8009654 <__lshift+0xc8>
 8009660:	e7ea      	b.n	8009638 <__lshift+0xac>
 8009662:	bf00      	nop
 8009664:	0800aad3 	.word	0x0800aad3
 8009668:	0800aae4 	.word	0x0800aae4

0800966c <__mcmp>:
 800966c:	b530      	push	{r4, r5, lr}
 800966e:	6902      	ldr	r2, [r0, #16]
 8009670:	690c      	ldr	r4, [r1, #16]
 8009672:	1b12      	subs	r2, r2, r4
 8009674:	d10e      	bne.n	8009694 <__mcmp+0x28>
 8009676:	f100 0314 	add.w	r3, r0, #20
 800967a:	3114      	adds	r1, #20
 800967c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009680:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009684:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009688:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800968c:	42a5      	cmp	r5, r4
 800968e:	d003      	beq.n	8009698 <__mcmp+0x2c>
 8009690:	d305      	bcc.n	800969e <__mcmp+0x32>
 8009692:	2201      	movs	r2, #1
 8009694:	4610      	mov	r0, r2
 8009696:	bd30      	pop	{r4, r5, pc}
 8009698:	4283      	cmp	r3, r0
 800969a:	d3f3      	bcc.n	8009684 <__mcmp+0x18>
 800969c:	e7fa      	b.n	8009694 <__mcmp+0x28>
 800969e:	f04f 32ff 	mov.w	r2, #4294967295
 80096a2:	e7f7      	b.n	8009694 <__mcmp+0x28>

080096a4 <__mdiff>:
 80096a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a8:	460c      	mov	r4, r1
 80096aa:	4606      	mov	r6, r0
 80096ac:	4611      	mov	r1, r2
 80096ae:	4620      	mov	r0, r4
 80096b0:	4690      	mov	r8, r2
 80096b2:	f7ff ffdb 	bl	800966c <__mcmp>
 80096b6:	1e05      	subs	r5, r0, #0
 80096b8:	d110      	bne.n	80096dc <__mdiff+0x38>
 80096ba:	4629      	mov	r1, r5
 80096bc:	4630      	mov	r0, r6
 80096be:	f7ff fd53 	bl	8009168 <_Balloc>
 80096c2:	b930      	cbnz	r0, 80096d2 <__mdiff+0x2e>
 80096c4:	4b3a      	ldr	r3, [pc, #232]	; (80097b0 <__mdiff+0x10c>)
 80096c6:	4602      	mov	r2, r0
 80096c8:	f240 2132 	movw	r1, #562	; 0x232
 80096cc:	4839      	ldr	r0, [pc, #228]	; (80097b4 <__mdiff+0x110>)
 80096ce:	f000 fb31 	bl	8009d34 <__assert_func>
 80096d2:	2301      	movs	r3, #1
 80096d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80096d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096dc:	bfa4      	itt	ge
 80096de:	4643      	movge	r3, r8
 80096e0:	46a0      	movge	r8, r4
 80096e2:	4630      	mov	r0, r6
 80096e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80096e8:	bfa6      	itte	ge
 80096ea:	461c      	movge	r4, r3
 80096ec:	2500      	movge	r5, #0
 80096ee:	2501      	movlt	r5, #1
 80096f0:	f7ff fd3a 	bl	8009168 <_Balloc>
 80096f4:	b920      	cbnz	r0, 8009700 <__mdiff+0x5c>
 80096f6:	4b2e      	ldr	r3, [pc, #184]	; (80097b0 <__mdiff+0x10c>)
 80096f8:	4602      	mov	r2, r0
 80096fa:	f44f 7110 	mov.w	r1, #576	; 0x240
 80096fe:	e7e5      	b.n	80096cc <__mdiff+0x28>
 8009700:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009704:	6926      	ldr	r6, [r4, #16]
 8009706:	60c5      	str	r5, [r0, #12]
 8009708:	f104 0914 	add.w	r9, r4, #20
 800970c:	f108 0514 	add.w	r5, r8, #20
 8009710:	f100 0e14 	add.w	lr, r0, #20
 8009714:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009718:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800971c:	f108 0210 	add.w	r2, r8, #16
 8009720:	46f2      	mov	sl, lr
 8009722:	2100      	movs	r1, #0
 8009724:	f859 3b04 	ldr.w	r3, [r9], #4
 8009728:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800972c:	fa1f f883 	uxth.w	r8, r3
 8009730:	fa11 f18b 	uxtah	r1, r1, fp
 8009734:	0c1b      	lsrs	r3, r3, #16
 8009736:	eba1 0808 	sub.w	r8, r1, r8
 800973a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800973e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009742:	fa1f f888 	uxth.w	r8, r8
 8009746:	1419      	asrs	r1, r3, #16
 8009748:	454e      	cmp	r6, r9
 800974a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800974e:	f84a 3b04 	str.w	r3, [sl], #4
 8009752:	d8e7      	bhi.n	8009724 <__mdiff+0x80>
 8009754:	1b33      	subs	r3, r6, r4
 8009756:	3b15      	subs	r3, #21
 8009758:	f023 0303 	bic.w	r3, r3, #3
 800975c:	3304      	adds	r3, #4
 800975e:	3415      	adds	r4, #21
 8009760:	42a6      	cmp	r6, r4
 8009762:	bf38      	it	cc
 8009764:	2304      	movcc	r3, #4
 8009766:	441d      	add	r5, r3
 8009768:	4473      	add	r3, lr
 800976a:	469e      	mov	lr, r3
 800976c:	462e      	mov	r6, r5
 800976e:	4566      	cmp	r6, ip
 8009770:	d30e      	bcc.n	8009790 <__mdiff+0xec>
 8009772:	f10c 0203 	add.w	r2, ip, #3
 8009776:	1b52      	subs	r2, r2, r5
 8009778:	f022 0203 	bic.w	r2, r2, #3
 800977c:	3d03      	subs	r5, #3
 800977e:	45ac      	cmp	ip, r5
 8009780:	bf38      	it	cc
 8009782:	2200      	movcc	r2, #0
 8009784:	441a      	add	r2, r3
 8009786:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800978a:	b17b      	cbz	r3, 80097ac <__mdiff+0x108>
 800978c:	6107      	str	r7, [r0, #16]
 800978e:	e7a3      	b.n	80096d8 <__mdiff+0x34>
 8009790:	f856 8b04 	ldr.w	r8, [r6], #4
 8009794:	fa11 f288 	uxtah	r2, r1, r8
 8009798:	1414      	asrs	r4, r2, #16
 800979a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800979e:	b292      	uxth	r2, r2
 80097a0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80097a4:	f84e 2b04 	str.w	r2, [lr], #4
 80097a8:	1421      	asrs	r1, r4, #16
 80097aa:	e7e0      	b.n	800976e <__mdiff+0xca>
 80097ac:	3f01      	subs	r7, #1
 80097ae:	e7ea      	b.n	8009786 <__mdiff+0xe2>
 80097b0:	0800aad3 	.word	0x0800aad3
 80097b4:	0800aae4 	.word	0x0800aae4

080097b8 <__d2b>:
 80097b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80097bc:	4689      	mov	r9, r1
 80097be:	2101      	movs	r1, #1
 80097c0:	ec57 6b10 	vmov	r6, r7, d0
 80097c4:	4690      	mov	r8, r2
 80097c6:	f7ff fccf 	bl	8009168 <_Balloc>
 80097ca:	4604      	mov	r4, r0
 80097cc:	b930      	cbnz	r0, 80097dc <__d2b+0x24>
 80097ce:	4602      	mov	r2, r0
 80097d0:	4b25      	ldr	r3, [pc, #148]	; (8009868 <__d2b+0xb0>)
 80097d2:	4826      	ldr	r0, [pc, #152]	; (800986c <__d2b+0xb4>)
 80097d4:	f240 310a 	movw	r1, #778	; 0x30a
 80097d8:	f000 faac 	bl	8009d34 <__assert_func>
 80097dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80097e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80097e4:	bb35      	cbnz	r5, 8009834 <__d2b+0x7c>
 80097e6:	2e00      	cmp	r6, #0
 80097e8:	9301      	str	r3, [sp, #4]
 80097ea:	d028      	beq.n	800983e <__d2b+0x86>
 80097ec:	4668      	mov	r0, sp
 80097ee:	9600      	str	r6, [sp, #0]
 80097f0:	f7ff fd82 	bl	80092f8 <__lo0bits>
 80097f4:	9900      	ldr	r1, [sp, #0]
 80097f6:	b300      	cbz	r0, 800983a <__d2b+0x82>
 80097f8:	9a01      	ldr	r2, [sp, #4]
 80097fa:	f1c0 0320 	rsb	r3, r0, #32
 80097fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009802:	430b      	orrs	r3, r1
 8009804:	40c2      	lsrs	r2, r0
 8009806:	6163      	str	r3, [r4, #20]
 8009808:	9201      	str	r2, [sp, #4]
 800980a:	9b01      	ldr	r3, [sp, #4]
 800980c:	61a3      	str	r3, [r4, #24]
 800980e:	2b00      	cmp	r3, #0
 8009810:	bf14      	ite	ne
 8009812:	2202      	movne	r2, #2
 8009814:	2201      	moveq	r2, #1
 8009816:	6122      	str	r2, [r4, #16]
 8009818:	b1d5      	cbz	r5, 8009850 <__d2b+0x98>
 800981a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800981e:	4405      	add	r5, r0
 8009820:	f8c9 5000 	str.w	r5, [r9]
 8009824:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009828:	f8c8 0000 	str.w	r0, [r8]
 800982c:	4620      	mov	r0, r4
 800982e:	b003      	add	sp, #12
 8009830:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009834:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009838:	e7d5      	b.n	80097e6 <__d2b+0x2e>
 800983a:	6161      	str	r1, [r4, #20]
 800983c:	e7e5      	b.n	800980a <__d2b+0x52>
 800983e:	a801      	add	r0, sp, #4
 8009840:	f7ff fd5a 	bl	80092f8 <__lo0bits>
 8009844:	9b01      	ldr	r3, [sp, #4]
 8009846:	6163      	str	r3, [r4, #20]
 8009848:	2201      	movs	r2, #1
 800984a:	6122      	str	r2, [r4, #16]
 800984c:	3020      	adds	r0, #32
 800984e:	e7e3      	b.n	8009818 <__d2b+0x60>
 8009850:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009854:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009858:	f8c9 0000 	str.w	r0, [r9]
 800985c:	6918      	ldr	r0, [r3, #16]
 800985e:	f7ff fd2b 	bl	80092b8 <__hi0bits>
 8009862:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009866:	e7df      	b.n	8009828 <__d2b+0x70>
 8009868:	0800aad3 	.word	0x0800aad3
 800986c:	0800aae4 	.word	0x0800aae4

08009870 <_calloc_r>:
 8009870:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009872:	fba1 2402 	umull	r2, r4, r1, r2
 8009876:	b94c      	cbnz	r4, 800988c <_calloc_r+0x1c>
 8009878:	4611      	mov	r1, r2
 800987a:	9201      	str	r2, [sp, #4]
 800987c:	f000 f87a 	bl	8009974 <_malloc_r>
 8009880:	9a01      	ldr	r2, [sp, #4]
 8009882:	4605      	mov	r5, r0
 8009884:	b930      	cbnz	r0, 8009894 <_calloc_r+0x24>
 8009886:	4628      	mov	r0, r5
 8009888:	b003      	add	sp, #12
 800988a:	bd30      	pop	{r4, r5, pc}
 800988c:	220c      	movs	r2, #12
 800988e:	6002      	str	r2, [r0, #0]
 8009890:	2500      	movs	r5, #0
 8009892:	e7f8      	b.n	8009886 <_calloc_r+0x16>
 8009894:	4621      	mov	r1, r4
 8009896:	f7fe f93f 	bl	8007b18 <memset>
 800989a:	e7f4      	b.n	8009886 <_calloc_r+0x16>

0800989c <_free_r>:
 800989c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800989e:	2900      	cmp	r1, #0
 80098a0:	d044      	beq.n	800992c <_free_r+0x90>
 80098a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098a6:	9001      	str	r0, [sp, #4]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	f1a1 0404 	sub.w	r4, r1, #4
 80098ae:	bfb8      	it	lt
 80098b0:	18e4      	addlt	r4, r4, r3
 80098b2:	f000 fa9b 	bl	8009dec <__malloc_lock>
 80098b6:	4a1e      	ldr	r2, [pc, #120]	; (8009930 <_free_r+0x94>)
 80098b8:	9801      	ldr	r0, [sp, #4]
 80098ba:	6813      	ldr	r3, [r2, #0]
 80098bc:	b933      	cbnz	r3, 80098cc <_free_r+0x30>
 80098be:	6063      	str	r3, [r4, #4]
 80098c0:	6014      	str	r4, [r2, #0]
 80098c2:	b003      	add	sp, #12
 80098c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80098c8:	f000 ba96 	b.w	8009df8 <__malloc_unlock>
 80098cc:	42a3      	cmp	r3, r4
 80098ce:	d908      	bls.n	80098e2 <_free_r+0x46>
 80098d0:	6825      	ldr	r5, [r4, #0]
 80098d2:	1961      	adds	r1, r4, r5
 80098d4:	428b      	cmp	r3, r1
 80098d6:	bf01      	itttt	eq
 80098d8:	6819      	ldreq	r1, [r3, #0]
 80098da:	685b      	ldreq	r3, [r3, #4]
 80098dc:	1949      	addeq	r1, r1, r5
 80098de:	6021      	streq	r1, [r4, #0]
 80098e0:	e7ed      	b.n	80098be <_free_r+0x22>
 80098e2:	461a      	mov	r2, r3
 80098e4:	685b      	ldr	r3, [r3, #4]
 80098e6:	b10b      	cbz	r3, 80098ec <_free_r+0x50>
 80098e8:	42a3      	cmp	r3, r4
 80098ea:	d9fa      	bls.n	80098e2 <_free_r+0x46>
 80098ec:	6811      	ldr	r1, [r2, #0]
 80098ee:	1855      	adds	r5, r2, r1
 80098f0:	42a5      	cmp	r5, r4
 80098f2:	d10b      	bne.n	800990c <_free_r+0x70>
 80098f4:	6824      	ldr	r4, [r4, #0]
 80098f6:	4421      	add	r1, r4
 80098f8:	1854      	adds	r4, r2, r1
 80098fa:	42a3      	cmp	r3, r4
 80098fc:	6011      	str	r1, [r2, #0]
 80098fe:	d1e0      	bne.n	80098c2 <_free_r+0x26>
 8009900:	681c      	ldr	r4, [r3, #0]
 8009902:	685b      	ldr	r3, [r3, #4]
 8009904:	6053      	str	r3, [r2, #4]
 8009906:	4421      	add	r1, r4
 8009908:	6011      	str	r1, [r2, #0]
 800990a:	e7da      	b.n	80098c2 <_free_r+0x26>
 800990c:	d902      	bls.n	8009914 <_free_r+0x78>
 800990e:	230c      	movs	r3, #12
 8009910:	6003      	str	r3, [r0, #0]
 8009912:	e7d6      	b.n	80098c2 <_free_r+0x26>
 8009914:	6825      	ldr	r5, [r4, #0]
 8009916:	1961      	adds	r1, r4, r5
 8009918:	428b      	cmp	r3, r1
 800991a:	bf04      	itt	eq
 800991c:	6819      	ldreq	r1, [r3, #0]
 800991e:	685b      	ldreq	r3, [r3, #4]
 8009920:	6063      	str	r3, [r4, #4]
 8009922:	bf04      	itt	eq
 8009924:	1949      	addeq	r1, r1, r5
 8009926:	6021      	streq	r1, [r4, #0]
 8009928:	6054      	str	r4, [r2, #4]
 800992a:	e7ca      	b.n	80098c2 <_free_r+0x26>
 800992c:	b003      	add	sp, #12
 800992e:	bd30      	pop	{r4, r5, pc}
 8009930:	200004b8 	.word	0x200004b8

08009934 <sbrk_aligned>:
 8009934:	b570      	push	{r4, r5, r6, lr}
 8009936:	4e0e      	ldr	r6, [pc, #56]	; (8009970 <sbrk_aligned+0x3c>)
 8009938:	460c      	mov	r4, r1
 800993a:	6831      	ldr	r1, [r6, #0]
 800993c:	4605      	mov	r5, r0
 800993e:	b911      	cbnz	r1, 8009946 <sbrk_aligned+0x12>
 8009940:	f000 f9e8 	bl	8009d14 <_sbrk_r>
 8009944:	6030      	str	r0, [r6, #0]
 8009946:	4621      	mov	r1, r4
 8009948:	4628      	mov	r0, r5
 800994a:	f000 f9e3 	bl	8009d14 <_sbrk_r>
 800994e:	1c43      	adds	r3, r0, #1
 8009950:	d00a      	beq.n	8009968 <sbrk_aligned+0x34>
 8009952:	1cc4      	adds	r4, r0, #3
 8009954:	f024 0403 	bic.w	r4, r4, #3
 8009958:	42a0      	cmp	r0, r4
 800995a:	d007      	beq.n	800996c <sbrk_aligned+0x38>
 800995c:	1a21      	subs	r1, r4, r0
 800995e:	4628      	mov	r0, r5
 8009960:	f000 f9d8 	bl	8009d14 <_sbrk_r>
 8009964:	3001      	adds	r0, #1
 8009966:	d101      	bne.n	800996c <sbrk_aligned+0x38>
 8009968:	f04f 34ff 	mov.w	r4, #4294967295
 800996c:	4620      	mov	r0, r4
 800996e:	bd70      	pop	{r4, r5, r6, pc}
 8009970:	200004bc 	.word	0x200004bc

08009974 <_malloc_r>:
 8009974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009978:	1ccd      	adds	r5, r1, #3
 800997a:	f025 0503 	bic.w	r5, r5, #3
 800997e:	3508      	adds	r5, #8
 8009980:	2d0c      	cmp	r5, #12
 8009982:	bf38      	it	cc
 8009984:	250c      	movcc	r5, #12
 8009986:	2d00      	cmp	r5, #0
 8009988:	4607      	mov	r7, r0
 800998a:	db01      	blt.n	8009990 <_malloc_r+0x1c>
 800998c:	42a9      	cmp	r1, r5
 800998e:	d905      	bls.n	800999c <_malloc_r+0x28>
 8009990:	230c      	movs	r3, #12
 8009992:	603b      	str	r3, [r7, #0]
 8009994:	2600      	movs	r6, #0
 8009996:	4630      	mov	r0, r6
 8009998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800999c:	4e2e      	ldr	r6, [pc, #184]	; (8009a58 <_malloc_r+0xe4>)
 800999e:	f000 fa25 	bl	8009dec <__malloc_lock>
 80099a2:	6833      	ldr	r3, [r6, #0]
 80099a4:	461c      	mov	r4, r3
 80099a6:	bb34      	cbnz	r4, 80099f6 <_malloc_r+0x82>
 80099a8:	4629      	mov	r1, r5
 80099aa:	4638      	mov	r0, r7
 80099ac:	f7ff ffc2 	bl	8009934 <sbrk_aligned>
 80099b0:	1c43      	adds	r3, r0, #1
 80099b2:	4604      	mov	r4, r0
 80099b4:	d14d      	bne.n	8009a52 <_malloc_r+0xde>
 80099b6:	6834      	ldr	r4, [r6, #0]
 80099b8:	4626      	mov	r6, r4
 80099ba:	2e00      	cmp	r6, #0
 80099bc:	d140      	bne.n	8009a40 <_malloc_r+0xcc>
 80099be:	6823      	ldr	r3, [r4, #0]
 80099c0:	4631      	mov	r1, r6
 80099c2:	4638      	mov	r0, r7
 80099c4:	eb04 0803 	add.w	r8, r4, r3
 80099c8:	f000 f9a4 	bl	8009d14 <_sbrk_r>
 80099cc:	4580      	cmp	r8, r0
 80099ce:	d13a      	bne.n	8009a46 <_malloc_r+0xd2>
 80099d0:	6821      	ldr	r1, [r4, #0]
 80099d2:	3503      	adds	r5, #3
 80099d4:	1a6d      	subs	r5, r5, r1
 80099d6:	f025 0503 	bic.w	r5, r5, #3
 80099da:	3508      	adds	r5, #8
 80099dc:	2d0c      	cmp	r5, #12
 80099de:	bf38      	it	cc
 80099e0:	250c      	movcc	r5, #12
 80099e2:	4629      	mov	r1, r5
 80099e4:	4638      	mov	r0, r7
 80099e6:	f7ff ffa5 	bl	8009934 <sbrk_aligned>
 80099ea:	3001      	adds	r0, #1
 80099ec:	d02b      	beq.n	8009a46 <_malloc_r+0xd2>
 80099ee:	6823      	ldr	r3, [r4, #0]
 80099f0:	442b      	add	r3, r5
 80099f2:	6023      	str	r3, [r4, #0]
 80099f4:	e00e      	b.n	8009a14 <_malloc_r+0xa0>
 80099f6:	6822      	ldr	r2, [r4, #0]
 80099f8:	1b52      	subs	r2, r2, r5
 80099fa:	d41e      	bmi.n	8009a3a <_malloc_r+0xc6>
 80099fc:	2a0b      	cmp	r2, #11
 80099fe:	d916      	bls.n	8009a2e <_malloc_r+0xba>
 8009a00:	1961      	adds	r1, r4, r5
 8009a02:	42a3      	cmp	r3, r4
 8009a04:	6025      	str	r5, [r4, #0]
 8009a06:	bf18      	it	ne
 8009a08:	6059      	strne	r1, [r3, #4]
 8009a0a:	6863      	ldr	r3, [r4, #4]
 8009a0c:	bf08      	it	eq
 8009a0e:	6031      	streq	r1, [r6, #0]
 8009a10:	5162      	str	r2, [r4, r5]
 8009a12:	604b      	str	r3, [r1, #4]
 8009a14:	4638      	mov	r0, r7
 8009a16:	f104 060b 	add.w	r6, r4, #11
 8009a1a:	f000 f9ed 	bl	8009df8 <__malloc_unlock>
 8009a1e:	f026 0607 	bic.w	r6, r6, #7
 8009a22:	1d23      	adds	r3, r4, #4
 8009a24:	1af2      	subs	r2, r6, r3
 8009a26:	d0b6      	beq.n	8009996 <_malloc_r+0x22>
 8009a28:	1b9b      	subs	r3, r3, r6
 8009a2a:	50a3      	str	r3, [r4, r2]
 8009a2c:	e7b3      	b.n	8009996 <_malloc_r+0x22>
 8009a2e:	6862      	ldr	r2, [r4, #4]
 8009a30:	42a3      	cmp	r3, r4
 8009a32:	bf0c      	ite	eq
 8009a34:	6032      	streq	r2, [r6, #0]
 8009a36:	605a      	strne	r2, [r3, #4]
 8009a38:	e7ec      	b.n	8009a14 <_malloc_r+0xa0>
 8009a3a:	4623      	mov	r3, r4
 8009a3c:	6864      	ldr	r4, [r4, #4]
 8009a3e:	e7b2      	b.n	80099a6 <_malloc_r+0x32>
 8009a40:	4634      	mov	r4, r6
 8009a42:	6876      	ldr	r6, [r6, #4]
 8009a44:	e7b9      	b.n	80099ba <_malloc_r+0x46>
 8009a46:	230c      	movs	r3, #12
 8009a48:	603b      	str	r3, [r7, #0]
 8009a4a:	4638      	mov	r0, r7
 8009a4c:	f000 f9d4 	bl	8009df8 <__malloc_unlock>
 8009a50:	e7a1      	b.n	8009996 <_malloc_r+0x22>
 8009a52:	6025      	str	r5, [r4, #0]
 8009a54:	e7de      	b.n	8009a14 <_malloc_r+0xa0>
 8009a56:	bf00      	nop
 8009a58:	200004b8 	.word	0x200004b8

08009a5c <__ssputs_r>:
 8009a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a60:	688e      	ldr	r6, [r1, #8]
 8009a62:	429e      	cmp	r6, r3
 8009a64:	4682      	mov	sl, r0
 8009a66:	460c      	mov	r4, r1
 8009a68:	4690      	mov	r8, r2
 8009a6a:	461f      	mov	r7, r3
 8009a6c:	d838      	bhi.n	8009ae0 <__ssputs_r+0x84>
 8009a6e:	898a      	ldrh	r2, [r1, #12]
 8009a70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009a74:	d032      	beq.n	8009adc <__ssputs_r+0x80>
 8009a76:	6825      	ldr	r5, [r4, #0]
 8009a78:	6909      	ldr	r1, [r1, #16]
 8009a7a:	eba5 0901 	sub.w	r9, r5, r1
 8009a7e:	6965      	ldr	r5, [r4, #20]
 8009a80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a88:	3301      	adds	r3, #1
 8009a8a:	444b      	add	r3, r9
 8009a8c:	106d      	asrs	r5, r5, #1
 8009a8e:	429d      	cmp	r5, r3
 8009a90:	bf38      	it	cc
 8009a92:	461d      	movcc	r5, r3
 8009a94:	0553      	lsls	r3, r2, #21
 8009a96:	d531      	bpl.n	8009afc <__ssputs_r+0xa0>
 8009a98:	4629      	mov	r1, r5
 8009a9a:	f7ff ff6b 	bl	8009974 <_malloc_r>
 8009a9e:	4606      	mov	r6, r0
 8009aa0:	b950      	cbnz	r0, 8009ab8 <__ssputs_r+0x5c>
 8009aa2:	230c      	movs	r3, #12
 8009aa4:	f8ca 3000 	str.w	r3, [sl]
 8009aa8:	89a3      	ldrh	r3, [r4, #12]
 8009aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009aae:	81a3      	strh	r3, [r4, #12]
 8009ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ab8:	6921      	ldr	r1, [r4, #16]
 8009aba:	464a      	mov	r2, r9
 8009abc:	f7ff fb46 	bl	800914c <memcpy>
 8009ac0:	89a3      	ldrh	r3, [r4, #12]
 8009ac2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aca:	81a3      	strh	r3, [r4, #12]
 8009acc:	6126      	str	r6, [r4, #16]
 8009ace:	6165      	str	r5, [r4, #20]
 8009ad0:	444e      	add	r6, r9
 8009ad2:	eba5 0509 	sub.w	r5, r5, r9
 8009ad6:	6026      	str	r6, [r4, #0]
 8009ad8:	60a5      	str	r5, [r4, #8]
 8009ada:	463e      	mov	r6, r7
 8009adc:	42be      	cmp	r6, r7
 8009ade:	d900      	bls.n	8009ae2 <__ssputs_r+0x86>
 8009ae0:	463e      	mov	r6, r7
 8009ae2:	6820      	ldr	r0, [r4, #0]
 8009ae4:	4632      	mov	r2, r6
 8009ae6:	4641      	mov	r1, r8
 8009ae8:	f000 f966 	bl	8009db8 <memmove>
 8009aec:	68a3      	ldr	r3, [r4, #8]
 8009aee:	1b9b      	subs	r3, r3, r6
 8009af0:	60a3      	str	r3, [r4, #8]
 8009af2:	6823      	ldr	r3, [r4, #0]
 8009af4:	4433      	add	r3, r6
 8009af6:	6023      	str	r3, [r4, #0]
 8009af8:	2000      	movs	r0, #0
 8009afa:	e7db      	b.n	8009ab4 <__ssputs_r+0x58>
 8009afc:	462a      	mov	r2, r5
 8009afe:	f000 f981 	bl	8009e04 <_realloc_r>
 8009b02:	4606      	mov	r6, r0
 8009b04:	2800      	cmp	r0, #0
 8009b06:	d1e1      	bne.n	8009acc <__ssputs_r+0x70>
 8009b08:	6921      	ldr	r1, [r4, #16]
 8009b0a:	4650      	mov	r0, sl
 8009b0c:	f7ff fec6 	bl	800989c <_free_r>
 8009b10:	e7c7      	b.n	8009aa2 <__ssputs_r+0x46>
	...

08009b14 <_svfiprintf_r>:
 8009b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b18:	4698      	mov	r8, r3
 8009b1a:	898b      	ldrh	r3, [r1, #12]
 8009b1c:	061b      	lsls	r3, r3, #24
 8009b1e:	b09d      	sub	sp, #116	; 0x74
 8009b20:	4607      	mov	r7, r0
 8009b22:	460d      	mov	r5, r1
 8009b24:	4614      	mov	r4, r2
 8009b26:	d50e      	bpl.n	8009b46 <_svfiprintf_r+0x32>
 8009b28:	690b      	ldr	r3, [r1, #16]
 8009b2a:	b963      	cbnz	r3, 8009b46 <_svfiprintf_r+0x32>
 8009b2c:	2140      	movs	r1, #64	; 0x40
 8009b2e:	f7ff ff21 	bl	8009974 <_malloc_r>
 8009b32:	6028      	str	r0, [r5, #0]
 8009b34:	6128      	str	r0, [r5, #16]
 8009b36:	b920      	cbnz	r0, 8009b42 <_svfiprintf_r+0x2e>
 8009b38:	230c      	movs	r3, #12
 8009b3a:	603b      	str	r3, [r7, #0]
 8009b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b40:	e0d1      	b.n	8009ce6 <_svfiprintf_r+0x1d2>
 8009b42:	2340      	movs	r3, #64	; 0x40
 8009b44:	616b      	str	r3, [r5, #20]
 8009b46:	2300      	movs	r3, #0
 8009b48:	9309      	str	r3, [sp, #36]	; 0x24
 8009b4a:	2320      	movs	r3, #32
 8009b4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b50:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b54:	2330      	movs	r3, #48	; 0x30
 8009b56:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009d00 <_svfiprintf_r+0x1ec>
 8009b5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b5e:	f04f 0901 	mov.w	r9, #1
 8009b62:	4623      	mov	r3, r4
 8009b64:	469a      	mov	sl, r3
 8009b66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b6a:	b10a      	cbz	r2, 8009b70 <_svfiprintf_r+0x5c>
 8009b6c:	2a25      	cmp	r2, #37	; 0x25
 8009b6e:	d1f9      	bne.n	8009b64 <_svfiprintf_r+0x50>
 8009b70:	ebba 0b04 	subs.w	fp, sl, r4
 8009b74:	d00b      	beq.n	8009b8e <_svfiprintf_r+0x7a>
 8009b76:	465b      	mov	r3, fp
 8009b78:	4622      	mov	r2, r4
 8009b7a:	4629      	mov	r1, r5
 8009b7c:	4638      	mov	r0, r7
 8009b7e:	f7ff ff6d 	bl	8009a5c <__ssputs_r>
 8009b82:	3001      	adds	r0, #1
 8009b84:	f000 80aa 	beq.w	8009cdc <_svfiprintf_r+0x1c8>
 8009b88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b8a:	445a      	add	r2, fp
 8009b8c:	9209      	str	r2, [sp, #36]	; 0x24
 8009b8e:	f89a 3000 	ldrb.w	r3, [sl]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	f000 80a2 	beq.w	8009cdc <_svfiprintf_r+0x1c8>
 8009b98:	2300      	movs	r3, #0
 8009b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ba2:	f10a 0a01 	add.w	sl, sl, #1
 8009ba6:	9304      	str	r3, [sp, #16]
 8009ba8:	9307      	str	r3, [sp, #28]
 8009baa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009bae:	931a      	str	r3, [sp, #104]	; 0x68
 8009bb0:	4654      	mov	r4, sl
 8009bb2:	2205      	movs	r2, #5
 8009bb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bb8:	4851      	ldr	r0, [pc, #324]	; (8009d00 <_svfiprintf_r+0x1ec>)
 8009bba:	f7f6 fb39 	bl	8000230 <memchr>
 8009bbe:	9a04      	ldr	r2, [sp, #16]
 8009bc0:	b9d8      	cbnz	r0, 8009bfa <_svfiprintf_r+0xe6>
 8009bc2:	06d0      	lsls	r0, r2, #27
 8009bc4:	bf44      	itt	mi
 8009bc6:	2320      	movmi	r3, #32
 8009bc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bcc:	0711      	lsls	r1, r2, #28
 8009bce:	bf44      	itt	mi
 8009bd0:	232b      	movmi	r3, #43	; 0x2b
 8009bd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bd6:	f89a 3000 	ldrb.w	r3, [sl]
 8009bda:	2b2a      	cmp	r3, #42	; 0x2a
 8009bdc:	d015      	beq.n	8009c0a <_svfiprintf_r+0xf6>
 8009bde:	9a07      	ldr	r2, [sp, #28]
 8009be0:	4654      	mov	r4, sl
 8009be2:	2000      	movs	r0, #0
 8009be4:	f04f 0c0a 	mov.w	ip, #10
 8009be8:	4621      	mov	r1, r4
 8009bea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bee:	3b30      	subs	r3, #48	; 0x30
 8009bf0:	2b09      	cmp	r3, #9
 8009bf2:	d94e      	bls.n	8009c92 <_svfiprintf_r+0x17e>
 8009bf4:	b1b0      	cbz	r0, 8009c24 <_svfiprintf_r+0x110>
 8009bf6:	9207      	str	r2, [sp, #28]
 8009bf8:	e014      	b.n	8009c24 <_svfiprintf_r+0x110>
 8009bfa:	eba0 0308 	sub.w	r3, r0, r8
 8009bfe:	fa09 f303 	lsl.w	r3, r9, r3
 8009c02:	4313      	orrs	r3, r2
 8009c04:	9304      	str	r3, [sp, #16]
 8009c06:	46a2      	mov	sl, r4
 8009c08:	e7d2      	b.n	8009bb0 <_svfiprintf_r+0x9c>
 8009c0a:	9b03      	ldr	r3, [sp, #12]
 8009c0c:	1d19      	adds	r1, r3, #4
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	9103      	str	r1, [sp, #12]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	bfbb      	ittet	lt
 8009c16:	425b      	neglt	r3, r3
 8009c18:	f042 0202 	orrlt.w	r2, r2, #2
 8009c1c:	9307      	strge	r3, [sp, #28]
 8009c1e:	9307      	strlt	r3, [sp, #28]
 8009c20:	bfb8      	it	lt
 8009c22:	9204      	strlt	r2, [sp, #16]
 8009c24:	7823      	ldrb	r3, [r4, #0]
 8009c26:	2b2e      	cmp	r3, #46	; 0x2e
 8009c28:	d10c      	bne.n	8009c44 <_svfiprintf_r+0x130>
 8009c2a:	7863      	ldrb	r3, [r4, #1]
 8009c2c:	2b2a      	cmp	r3, #42	; 0x2a
 8009c2e:	d135      	bne.n	8009c9c <_svfiprintf_r+0x188>
 8009c30:	9b03      	ldr	r3, [sp, #12]
 8009c32:	1d1a      	adds	r2, r3, #4
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	9203      	str	r2, [sp, #12]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	bfb8      	it	lt
 8009c3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c40:	3402      	adds	r4, #2
 8009c42:	9305      	str	r3, [sp, #20]
 8009c44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009d10 <_svfiprintf_r+0x1fc>
 8009c48:	7821      	ldrb	r1, [r4, #0]
 8009c4a:	2203      	movs	r2, #3
 8009c4c:	4650      	mov	r0, sl
 8009c4e:	f7f6 faef 	bl	8000230 <memchr>
 8009c52:	b140      	cbz	r0, 8009c66 <_svfiprintf_r+0x152>
 8009c54:	2340      	movs	r3, #64	; 0x40
 8009c56:	eba0 000a 	sub.w	r0, r0, sl
 8009c5a:	fa03 f000 	lsl.w	r0, r3, r0
 8009c5e:	9b04      	ldr	r3, [sp, #16]
 8009c60:	4303      	orrs	r3, r0
 8009c62:	3401      	adds	r4, #1
 8009c64:	9304      	str	r3, [sp, #16]
 8009c66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c6a:	4826      	ldr	r0, [pc, #152]	; (8009d04 <_svfiprintf_r+0x1f0>)
 8009c6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c70:	2206      	movs	r2, #6
 8009c72:	f7f6 fadd 	bl	8000230 <memchr>
 8009c76:	2800      	cmp	r0, #0
 8009c78:	d038      	beq.n	8009cec <_svfiprintf_r+0x1d8>
 8009c7a:	4b23      	ldr	r3, [pc, #140]	; (8009d08 <_svfiprintf_r+0x1f4>)
 8009c7c:	bb1b      	cbnz	r3, 8009cc6 <_svfiprintf_r+0x1b2>
 8009c7e:	9b03      	ldr	r3, [sp, #12]
 8009c80:	3307      	adds	r3, #7
 8009c82:	f023 0307 	bic.w	r3, r3, #7
 8009c86:	3308      	adds	r3, #8
 8009c88:	9303      	str	r3, [sp, #12]
 8009c8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c8c:	4433      	add	r3, r6
 8009c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8009c90:	e767      	b.n	8009b62 <_svfiprintf_r+0x4e>
 8009c92:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c96:	460c      	mov	r4, r1
 8009c98:	2001      	movs	r0, #1
 8009c9a:	e7a5      	b.n	8009be8 <_svfiprintf_r+0xd4>
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	3401      	adds	r4, #1
 8009ca0:	9305      	str	r3, [sp, #20]
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	f04f 0c0a 	mov.w	ip, #10
 8009ca8:	4620      	mov	r0, r4
 8009caa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cae:	3a30      	subs	r2, #48	; 0x30
 8009cb0:	2a09      	cmp	r2, #9
 8009cb2:	d903      	bls.n	8009cbc <_svfiprintf_r+0x1a8>
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d0c5      	beq.n	8009c44 <_svfiprintf_r+0x130>
 8009cb8:	9105      	str	r1, [sp, #20]
 8009cba:	e7c3      	b.n	8009c44 <_svfiprintf_r+0x130>
 8009cbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cc0:	4604      	mov	r4, r0
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	e7f0      	b.n	8009ca8 <_svfiprintf_r+0x194>
 8009cc6:	ab03      	add	r3, sp, #12
 8009cc8:	9300      	str	r3, [sp, #0]
 8009cca:	462a      	mov	r2, r5
 8009ccc:	4b0f      	ldr	r3, [pc, #60]	; (8009d0c <_svfiprintf_r+0x1f8>)
 8009cce:	a904      	add	r1, sp, #16
 8009cd0:	4638      	mov	r0, r7
 8009cd2:	f7fd ffc9 	bl	8007c68 <_printf_float>
 8009cd6:	1c42      	adds	r2, r0, #1
 8009cd8:	4606      	mov	r6, r0
 8009cda:	d1d6      	bne.n	8009c8a <_svfiprintf_r+0x176>
 8009cdc:	89ab      	ldrh	r3, [r5, #12]
 8009cde:	065b      	lsls	r3, r3, #25
 8009ce0:	f53f af2c 	bmi.w	8009b3c <_svfiprintf_r+0x28>
 8009ce4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ce6:	b01d      	add	sp, #116	; 0x74
 8009ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cec:	ab03      	add	r3, sp, #12
 8009cee:	9300      	str	r3, [sp, #0]
 8009cf0:	462a      	mov	r2, r5
 8009cf2:	4b06      	ldr	r3, [pc, #24]	; (8009d0c <_svfiprintf_r+0x1f8>)
 8009cf4:	a904      	add	r1, sp, #16
 8009cf6:	4638      	mov	r0, r7
 8009cf8:	f7fe fa5a 	bl	80081b0 <_printf_i>
 8009cfc:	e7eb      	b.n	8009cd6 <_svfiprintf_r+0x1c2>
 8009cfe:	bf00      	nop
 8009d00:	0800ac3c 	.word	0x0800ac3c
 8009d04:	0800ac46 	.word	0x0800ac46
 8009d08:	08007c69 	.word	0x08007c69
 8009d0c:	08009a5d 	.word	0x08009a5d
 8009d10:	0800ac42 	.word	0x0800ac42

08009d14 <_sbrk_r>:
 8009d14:	b538      	push	{r3, r4, r5, lr}
 8009d16:	4d06      	ldr	r5, [pc, #24]	; (8009d30 <_sbrk_r+0x1c>)
 8009d18:	2300      	movs	r3, #0
 8009d1a:	4604      	mov	r4, r0
 8009d1c:	4608      	mov	r0, r1
 8009d1e:	602b      	str	r3, [r5, #0]
 8009d20:	f7f8 fa84 	bl	800222c <_sbrk>
 8009d24:	1c43      	adds	r3, r0, #1
 8009d26:	d102      	bne.n	8009d2e <_sbrk_r+0x1a>
 8009d28:	682b      	ldr	r3, [r5, #0]
 8009d2a:	b103      	cbz	r3, 8009d2e <_sbrk_r+0x1a>
 8009d2c:	6023      	str	r3, [r4, #0]
 8009d2e:	bd38      	pop	{r3, r4, r5, pc}
 8009d30:	200004c0 	.word	0x200004c0

08009d34 <__assert_func>:
 8009d34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d36:	4614      	mov	r4, r2
 8009d38:	461a      	mov	r2, r3
 8009d3a:	4b09      	ldr	r3, [pc, #36]	; (8009d60 <__assert_func+0x2c>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4605      	mov	r5, r0
 8009d40:	68d8      	ldr	r0, [r3, #12]
 8009d42:	b14c      	cbz	r4, 8009d58 <__assert_func+0x24>
 8009d44:	4b07      	ldr	r3, [pc, #28]	; (8009d64 <__assert_func+0x30>)
 8009d46:	9100      	str	r1, [sp, #0]
 8009d48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009d4c:	4906      	ldr	r1, [pc, #24]	; (8009d68 <__assert_func+0x34>)
 8009d4e:	462b      	mov	r3, r5
 8009d50:	f000 f80e 	bl	8009d70 <fiprintf>
 8009d54:	f000 faac 	bl	800a2b0 <abort>
 8009d58:	4b04      	ldr	r3, [pc, #16]	; (8009d6c <__assert_func+0x38>)
 8009d5a:	461c      	mov	r4, r3
 8009d5c:	e7f3      	b.n	8009d46 <__assert_func+0x12>
 8009d5e:	bf00      	nop
 8009d60:	2000001c 	.word	0x2000001c
 8009d64:	0800ac4d 	.word	0x0800ac4d
 8009d68:	0800ac5a 	.word	0x0800ac5a
 8009d6c:	0800ac88 	.word	0x0800ac88

08009d70 <fiprintf>:
 8009d70:	b40e      	push	{r1, r2, r3}
 8009d72:	b503      	push	{r0, r1, lr}
 8009d74:	4601      	mov	r1, r0
 8009d76:	ab03      	add	r3, sp, #12
 8009d78:	4805      	ldr	r0, [pc, #20]	; (8009d90 <fiprintf+0x20>)
 8009d7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d7e:	6800      	ldr	r0, [r0, #0]
 8009d80:	9301      	str	r3, [sp, #4]
 8009d82:	f000 f897 	bl	8009eb4 <_vfiprintf_r>
 8009d86:	b002      	add	sp, #8
 8009d88:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d8c:	b003      	add	sp, #12
 8009d8e:	4770      	bx	lr
 8009d90:	2000001c 	.word	0x2000001c

08009d94 <__ascii_mbtowc>:
 8009d94:	b082      	sub	sp, #8
 8009d96:	b901      	cbnz	r1, 8009d9a <__ascii_mbtowc+0x6>
 8009d98:	a901      	add	r1, sp, #4
 8009d9a:	b142      	cbz	r2, 8009dae <__ascii_mbtowc+0x1a>
 8009d9c:	b14b      	cbz	r3, 8009db2 <__ascii_mbtowc+0x1e>
 8009d9e:	7813      	ldrb	r3, [r2, #0]
 8009da0:	600b      	str	r3, [r1, #0]
 8009da2:	7812      	ldrb	r2, [r2, #0]
 8009da4:	1e10      	subs	r0, r2, #0
 8009da6:	bf18      	it	ne
 8009da8:	2001      	movne	r0, #1
 8009daa:	b002      	add	sp, #8
 8009dac:	4770      	bx	lr
 8009dae:	4610      	mov	r0, r2
 8009db0:	e7fb      	b.n	8009daa <__ascii_mbtowc+0x16>
 8009db2:	f06f 0001 	mvn.w	r0, #1
 8009db6:	e7f8      	b.n	8009daa <__ascii_mbtowc+0x16>

08009db8 <memmove>:
 8009db8:	4288      	cmp	r0, r1
 8009dba:	b510      	push	{r4, lr}
 8009dbc:	eb01 0402 	add.w	r4, r1, r2
 8009dc0:	d902      	bls.n	8009dc8 <memmove+0x10>
 8009dc2:	4284      	cmp	r4, r0
 8009dc4:	4623      	mov	r3, r4
 8009dc6:	d807      	bhi.n	8009dd8 <memmove+0x20>
 8009dc8:	1e43      	subs	r3, r0, #1
 8009dca:	42a1      	cmp	r1, r4
 8009dcc:	d008      	beq.n	8009de0 <memmove+0x28>
 8009dce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009dd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009dd6:	e7f8      	b.n	8009dca <memmove+0x12>
 8009dd8:	4402      	add	r2, r0
 8009dda:	4601      	mov	r1, r0
 8009ddc:	428a      	cmp	r2, r1
 8009dde:	d100      	bne.n	8009de2 <memmove+0x2a>
 8009de0:	bd10      	pop	{r4, pc}
 8009de2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009de6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009dea:	e7f7      	b.n	8009ddc <memmove+0x24>

08009dec <__malloc_lock>:
 8009dec:	4801      	ldr	r0, [pc, #4]	; (8009df4 <__malloc_lock+0x8>)
 8009dee:	f000 bc1f 	b.w	800a630 <__retarget_lock_acquire_recursive>
 8009df2:	bf00      	nop
 8009df4:	200004c4 	.word	0x200004c4

08009df8 <__malloc_unlock>:
 8009df8:	4801      	ldr	r0, [pc, #4]	; (8009e00 <__malloc_unlock+0x8>)
 8009dfa:	f000 bc1a 	b.w	800a632 <__retarget_lock_release_recursive>
 8009dfe:	bf00      	nop
 8009e00:	200004c4 	.word	0x200004c4

08009e04 <_realloc_r>:
 8009e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e08:	4680      	mov	r8, r0
 8009e0a:	4614      	mov	r4, r2
 8009e0c:	460e      	mov	r6, r1
 8009e0e:	b921      	cbnz	r1, 8009e1a <_realloc_r+0x16>
 8009e10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e14:	4611      	mov	r1, r2
 8009e16:	f7ff bdad 	b.w	8009974 <_malloc_r>
 8009e1a:	b92a      	cbnz	r2, 8009e28 <_realloc_r+0x24>
 8009e1c:	f7ff fd3e 	bl	800989c <_free_r>
 8009e20:	4625      	mov	r5, r4
 8009e22:	4628      	mov	r0, r5
 8009e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e28:	f000 fc6a 	bl	800a700 <_malloc_usable_size_r>
 8009e2c:	4284      	cmp	r4, r0
 8009e2e:	4607      	mov	r7, r0
 8009e30:	d802      	bhi.n	8009e38 <_realloc_r+0x34>
 8009e32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e36:	d812      	bhi.n	8009e5e <_realloc_r+0x5a>
 8009e38:	4621      	mov	r1, r4
 8009e3a:	4640      	mov	r0, r8
 8009e3c:	f7ff fd9a 	bl	8009974 <_malloc_r>
 8009e40:	4605      	mov	r5, r0
 8009e42:	2800      	cmp	r0, #0
 8009e44:	d0ed      	beq.n	8009e22 <_realloc_r+0x1e>
 8009e46:	42bc      	cmp	r4, r7
 8009e48:	4622      	mov	r2, r4
 8009e4a:	4631      	mov	r1, r6
 8009e4c:	bf28      	it	cs
 8009e4e:	463a      	movcs	r2, r7
 8009e50:	f7ff f97c 	bl	800914c <memcpy>
 8009e54:	4631      	mov	r1, r6
 8009e56:	4640      	mov	r0, r8
 8009e58:	f7ff fd20 	bl	800989c <_free_r>
 8009e5c:	e7e1      	b.n	8009e22 <_realloc_r+0x1e>
 8009e5e:	4635      	mov	r5, r6
 8009e60:	e7df      	b.n	8009e22 <_realloc_r+0x1e>

08009e62 <__sfputc_r>:
 8009e62:	6893      	ldr	r3, [r2, #8]
 8009e64:	3b01      	subs	r3, #1
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	b410      	push	{r4}
 8009e6a:	6093      	str	r3, [r2, #8]
 8009e6c:	da08      	bge.n	8009e80 <__sfputc_r+0x1e>
 8009e6e:	6994      	ldr	r4, [r2, #24]
 8009e70:	42a3      	cmp	r3, r4
 8009e72:	db01      	blt.n	8009e78 <__sfputc_r+0x16>
 8009e74:	290a      	cmp	r1, #10
 8009e76:	d103      	bne.n	8009e80 <__sfputc_r+0x1e>
 8009e78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e7c:	f000 b94a 	b.w	800a114 <__swbuf_r>
 8009e80:	6813      	ldr	r3, [r2, #0]
 8009e82:	1c58      	adds	r0, r3, #1
 8009e84:	6010      	str	r0, [r2, #0]
 8009e86:	7019      	strb	r1, [r3, #0]
 8009e88:	4608      	mov	r0, r1
 8009e8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e8e:	4770      	bx	lr

08009e90 <__sfputs_r>:
 8009e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e92:	4606      	mov	r6, r0
 8009e94:	460f      	mov	r7, r1
 8009e96:	4614      	mov	r4, r2
 8009e98:	18d5      	adds	r5, r2, r3
 8009e9a:	42ac      	cmp	r4, r5
 8009e9c:	d101      	bne.n	8009ea2 <__sfputs_r+0x12>
 8009e9e:	2000      	movs	r0, #0
 8009ea0:	e007      	b.n	8009eb2 <__sfputs_r+0x22>
 8009ea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ea6:	463a      	mov	r2, r7
 8009ea8:	4630      	mov	r0, r6
 8009eaa:	f7ff ffda 	bl	8009e62 <__sfputc_r>
 8009eae:	1c43      	adds	r3, r0, #1
 8009eb0:	d1f3      	bne.n	8009e9a <__sfputs_r+0xa>
 8009eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009eb4 <_vfiprintf_r>:
 8009eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eb8:	460d      	mov	r5, r1
 8009eba:	b09d      	sub	sp, #116	; 0x74
 8009ebc:	4614      	mov	r4, r2
 8009ebe:	4698      	mov	r8, r3
 8009ec0:	4606      	mov	r6, r0
 8009ec2:	b118      	cbz	r0, 8009ecc <_vfiprintf_r+0x18>
 8009ec4:	6983      	ldr	r3, [r0, #24]
 8009ec6:	b90b      	cbnz	r3, 8009ecc <_vfiprintf_r+0x18>
 8009ec8:	f000 fb14 	bl	800a4f4 <__sinit>
 8009ecc:	4b89      	ldr	r3, [pc, #548]	; (800a0f4 <_vfiprintf_r+0x240>)
 8009ece:	429d      	cmp	r5, r3
 8009ed0:	d11b      	bne.n	8009f0a <_vfiprintf_r+0x56>
 8009ed2:	6875      	ldr	r5, [r6, #4]
 8009ed4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ed6:	07d9      	lsls	r1, r3, #31
 8009ed8:	d405      	bmi.n	8009ee6 <_vfiprintf_r+0x32>
 8009eda:	89ab      	ldrh	r3, [r5, #12]
 8009edc:	059a      	lsls	r2, r3, #22
 8009ede:	d402      	bmi.n	8009ee6 <_vfiprintf_r+0x32>
 8009ee0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ee2:	f000 fba5 	bl	800a630 <__retarget_lock_acquire_recursive>
 8009ee6:	89ab      	ldrh	r3, [r5, #12]
 8009ee8:	071b      	lsls	r3, r3, #28
 8009eea:	d501      	bpl.n	8009ef0 <_vfiprintf_r+0x3c>
 8009eec:	692b      	ldr	r3, [r5, #16]
 8009eee:	b9eb      	cbnz	r3, 8009f2c <_vfiprintf_r+0x78>
 8009ef0:	4629      	mov	r1, r5
 8009ef2:	4630      	mov	r0, r6
 8009ef4:	f000 f96e 	bl	800a1d4 <__swsetup_r>
 8009ef8:	b1c0      	cbz	r0, 8009f2c <_vfiprintf_r+0x78>
 8009efa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009efc:	07dc      	lsls	r4, r3, #31
 8009efe:	d50e      	bpl.n	8009f1e <_vfiprintf_r+0x6a>
 8009f00:	f04f 30ff 	mov.w	r0, #4294967295
 8009f04:	b01d      	add	sp, #116	; 0x74
 8009f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f0a:	4b7b      	ldr	r3, [pc, #492]	; (800a0f8 <_vfiprintf_r+0x244>)
 8009f0c:	429d      	cmp	r5, r3
 8009f0e:	d101      	bne.n	8009f14 <_vfiprintf_r+0x60>
 8009f10:	68b5      	ldr	r5, [r6, #8]
 8009f12:	e7df      	b.n	8009ed4 <_vfiprintf_r+0x20>
 8009f14:	4b79      	ldr	r3, [pc, #484]	; (800a0fc <_vfiprintf_r+0x248>)
 8009f16:	429d      	cmp	r5, r3
 8009f18:	bf08      	it	eq
 8009f1a:	68f5      	ldreq	r5, [r6, #12]
 8009f1c:	e7da      	b.n	8009ed4 <_vfiprintf_r+0x20>
 8009f1e:	89ab      	ldrh	r3, [r5, #12]
 8009f20:	0598      	lsls	r0, r3, #22
 8009f22:	d4ed      	bmi.n	8009f00 <_vfiprintf_r+0x4c>
 8009f24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f26:	f000 fb84 	bl	800a632 <__retarget_lock_release_recursive>
 8009f2a:	e7e9      	b.n	8009f00 <_vfiprintf_r+0x4c>
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8009f30:	2320      	movs	r3, #32
 8009f32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f36:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f3a:	2330      	movs	r3, #48	; 0x30
 8009f3c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a100 <_vfiprintf_r+0x24c>
 8009f40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f44:	f04f 0901 	mov.w	r9, #1
 8009f48:	4623      	mov	r3, r4
 8009f4a:	469a      	mov	sl, r3
 8009f4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f50:	b10a      	cbz	r2, 8009f56 <_vfiprintf_r+0xa2>
 8009f52:	2a25      	cmp	r2, #37	; 0x25
 8009f54:	d1f9      	bne.n	8009f4a <_vfiprintf_r+0x96>
 8009f56:	ebba 0b04 	subs.w	fp, sl, r4
 8009f5a:	d00b      	beq.n	8009f74 <_vfiprintf_r+0xc0>
 8009f5c:	465b      	mov	r3, fp
 8009f5e:	4622      	mov	r2, r4
 8009f60:	4629      	mov	r1, r5
 8009f62:	4630      	mov	r0, r6
 8009f64:	f7ff ff94 	bl	8009e90 <__sfputs_r>
 8009f68:	3001      	adds	r0, #1
 8009f6a:	f000 80aa 	beq.w	800a0c2 <_vfiprintf_r+0x20e>
 8009f6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f70:	445a      	add	r2, fp
 8009f72:	9209      	str	r2, [sp, #36]	; 0x24
 8009f74:	f89a 3000 	ldrb.w	r3, [sl]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	f000 80a2 	beq.w	800a0c2 <_vfiprintf_r+0x20e>
 8009f7e:	2300      	movs	r3, #0
 8009f80:	f04f 32ff 	mov.w	r2, #4294967295
 8009f84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f88:	f10a 0a01 	add.w	sl, sl, #1
 8009f8c:	9304      	str	r3, [sp, #16]
 8009f8e:	9307      	str	r3, [sp, #28]
 8009f90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f94:	931a      	str	r3, [sp, #104]	; 0x68
 8009f96:	4654      	mov	r4, sl
 8009f98:	2205      	movs	r2, #5
 8009f9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f9e:	4858      	ldr	r0, [pc, #352]	; (800a100 <_vfiprintf_r+0x24c>)
 8009fa0:	f7f6 f946 	bl	8000230 <memchr>
 8009fa4:	9a04      	ldr	r2, [sp, #16]
 8009fa6:	b9d8      	cbnz	r0, 8009fe0 <_vfiprintf_r+0x12c>
 8009fa8:	06d1      	lsls	r1, r2, #27
 8009faa:	bf44      	itt	mi
 8009fac:	2320      	movmi	r3, #32
 8009fae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fb2:	0713      	lsls	r3, r2, #28
 8009fb4:	bf44      	itt	mi
 8009fb6:	232b      	movmi	r3, #43	; 0x2b
 8009fb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fbc:	f89a 3000 	ldrb.w	r3, [sl]
 8009fc0:	2b2a      	cmp	r3, #42	; 0x2a
 8009fc2:	d015      	beq.n	8009ff0 <_vfiprintf_r+0x13c>
 8009fc4:	9a07      	ldr	r2, [sp, #28]
 8009fc6:	4654      	mov	r4, sl
 8009fc8:	2000      	movs	r0, #0
 8009fca:	f04f 0c0a 	mov.w	ip, #10
 8009fce:	4621      	mov	r1, r4
 8009fd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fd4:	3b30      	subs	r3, #48	; 0x30
 8009fd6:	2b09      	cmp	r3, #9
 8009fd8:	d94e      	bls.n	800a078 <_vfiprintf_r+0x1c4>
 8009fda:	b1b0      	cbz	r0, 800a00a <_vfiprintf_r+0x156>
 8009fdc:	9207      	str	r2, [sp, #28]
 8009fde:	e014      	b.n	800a00a <_vfiprintf_r+0x156>
 8009fe0:	eba0 0308 	sub.w	r3, r0, r8
 8009fe4:	fa09 f303 	lsl.w	r3, r9, r3
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	9304      	str	r3, [sp, #16]
 8009fec:	46a2      	mov	sl, r4
 8009fee:	e7d2      	b.n	8009f96 <_vfiprintf_r+0xe2>
 8009ff0:	9b03      	ldr	r3, [sp, #12]
 8009ff2:	1d19      	adds	r1, r3, #4
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	9103      	str	r1, [sp, #12]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	bfbb      	ittet	lt
 8009ffc:	425b      	neglt	r3, r3
 8009ffe:	f042 0202 	orrlt.w	r2, r2, #2
 800a002:	9307      	strge	r3, [sp, #28]
 800a004:	9307      	strlt	r3, [sp, #28]
 800a006:	bfb8      	it	lt
 800a008:	9204      	strlt	r2, [sp, #16]
 800a00a:	7823      	ldrb	r3, [r4, #0]
 800a00c:	2b2e      	cmp	r3, #46	; 0x2e
 800a00e:	d10c      	bne.n	800a02a <_vfiprintf_r+0x176>
 800a010:	7863      	ldrb	r3, [r4, #1]
 800a012:	2b2a      	cmp	r3, #42	; 0x2a
 800a014:	d135      	bne.n	800a082 <_vfiprintf_r+0x1ce>
 800a016:	9b03      	ldr	r3, [sp, #12]
 800a018:	1d1a      	adds	r2, r3, #4
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	9203      	str	r2, [sp, #12]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	bfb8      	it	lt
 800a022:	f04f 33ff 	movlt.w	r3, #4294967295
 800a026:	3402      	adds	r4, #2
 800a028:	9305      	str	r3, [sp, #20]
 800a02a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a110 <_vfiprintf_r+0x25c>
 800a02e:	7821      	ldrb	r1, [r4, #0]
 800a030:	2203      	movs	r2, #3
 800a032:	4650      	mov	r0, sl
 800a034:	f7f6 f8fc 	bl	8000230 <memchr>
 800a038:	b140      	cbz	r0, 800a04c <_vfiprintf_r+0x198>
 800a03a:	2340      	movs	r3, #64	; 0x40
 800a03c:	eba0 000a 	sub.w	r0, r0, sl
 800a040:	fa03 f000 	lsl.w	r0, r3, r0
 800a044:	9b04      	ldr	r3, [sp, #16]
 800a046:	4303      	orrs	r3, r0
 800a048:	3401      	adds	r4, #1
 800a04a:	9304      	str	r3, [sp, #16]
 800a04c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a050:	482c      	ldr	r0, [pc, #176]	; (800a104 <_vfiprintf_r+0x250>)
 800a052:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a056:	2206      	movs	r2, #6
 800a058:	f7f6 f8ea 	bl	8000230 <memchr>
 800a05c:	2800      	cmp	r0, #0
 800a05e:	d03f      	beq.n	800a0e0 <_vfiprintf_r+0x22c>
 800a060:	4b29      	ldr	r3, [pc, #164]	; (800a108 <_vfiprintf_r+0x254>)
 800a062:	bb1b      	cbnz	r3, 800a0ac <_vfiprintf_r+0x1f8>
 800a064:	9b03      	ldr	r3, [sp, #12]
 800a066:	3307      	adds	r3, #7
 800a068:	f023 0307 	bic.w	r3, r3, #7
 800a06c:	3308      	adds	r3, #8
 800a06e:	9303      	str	r3, [sp, #12]
 800a070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a072:	443b      	add	r3, r7
 800a074:	9309      	str	r3, [sp, #36]	; 0x24
 800a076:	e767      	b.n	8009f48 <_vfiprintf_r+0x94>
 800a078:	fb0c 3202 	mla	r2, ip, r2, r3
 800a07c:	460c      	mov	r4, r1
 800a07e:	2001      	movs	r0, #1
 800a080:	e7a5      	b.n	8009fce <_vfiprintf_r+0x11a>
 800a082:	2300      	movs	r3, #0
 800a084:	3401      	adds	r4, #1
 800a086:	9305      	str	r3, [sp, #20]
 800a088:	4619      	mov	r1, r3
 800a08a:	f04f 0c0a 	mov.w	ip, #10
 800a08e:	4620      	mov	r0, r4
 800a090:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a094:	3a30      	subs	r2, #48	; 0x30
 800a096:	2a09      	cmp	r2, #9
 800a098:	d903      	bls.n	800a0a2 <_vfiprintf_r+0x1ee>
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d0c5      	beq.n	800a02a <_vfiprintf_r+0x176>
 800a09e:	9105      	str	r1, [sp, #20]
 800a0a0:	e7c3      	b.n	800a02a <_vfiprintf_r+0x176>
 800a0a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0a6:	4604      	mov	r4, r0
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	e7f0      	b.n	800a08e <_vfiprintf_r+0x1da>
 800a0ac:	ab03      	add	r3, sp, #12
 800a0ae:	9300      	str	r3, [sp, #0]
 800a0b0:	462a      	mov	r2, r5
 800a0b2:	4b16      	ldr	r3, [pc, #88]	; (800a10c <_vfiprintf_r+0x258>)
 800a0b4:	a904      	add	r1, sp, #16
 800a0b6:	4630      	mov	r0, r6
 800a0b8:	f7fd fdd6 	bl	8007c68 <_printf_float>
 800a0bc:	4607      	mov	r7, r0
 800a0be:	1c78      	adds	r0, r7, #1
 800a0c0:	d1d6      	bne.n	800a070 <_vfiprintf_r+0x1bc>
 800a0c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0c4:	07d9      	lsls	r1, r3, #31
 800a0c6:	d405      	bmi.n	800a0d4 <_vfiprintf_r+0x220>
 800a0c8:	89ab      	ldrh	r3, [r5, #12]
 800a0ca:	059a      	lsls	r2, r3, #22
 800a0cc:	d402      	bmi.n	800a0d4 <_vfiprintf_r+0x220>
 800a0ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0d0:	f000 faaf 	bl	800a632 <__retarget_lock_release_recursive>
 800a0d4:	89ab      	ldrh	r3, [r5, #12]
 800a0d6:	065b      	lsls	r3, r3, #25
 800a0d8:	f53f af12 	bmi.w	8009f00 <_vfiprintf_r+0x4c>
 800a0dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0de:	e711      	b.n	8009f04 <_vfiprintf_r+0x50>
 800a0e0:	ab03      	add	r3, sp, #12
 800a0e2:	9300      	str	r3, [sp, #0]
 800a0e4:	462a      	mov	r2, r5
 800a0e6:	4b09      	ldr	r3, [pc, #36]	; (800a10c <_vfiprintf_r+0x258>)
 800a0e8:	a904      	add	r1, sp, #16
 800a0ea:	4630      	mov	r0, r6
 800a0ec:	f7fe f860 	bl	80081b0 <_printf_i>
 800a0f0:	e7e4      	b.n	800a0bc <_vfiprintf_r+0x208>
 800a0f2:	bf00      	nop
 800a0f4:	0800adb4 	.word	0x0800adb4
 800a0f8:	0800add4 	.word	0x0800add4
 800a0fc:	0800ad94 	.word	0x0800ad94
 800a100:	0800ac3c 	.word	0x0800ac3c
 800a104:	0800ac46 	.word	0x0800ac46
 800a108:	08007c69 	.word	0x08007c69
 800a10c:	08009e91 	.word	0x08009e91
 800a110:	0800ac42 	.word	0x0800ac42

0800a114 <__swbuf_r>:
 800a114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a116:	460e      	mov	r6, r1
 800a118:	4614      	mov	r4, r2
 800a11a:	4605      	mov	r5, r0
 800a11c:	b118      	cbz	r0, 800a126 <__swbuf_r+0x12>
 800a11e:	6983      	ldr	r3, [r0, #24]
 800a120:	b90b      	cbnz	r3, 800a126 <__swbuf_r+0x12>
 800a122:	f000 f9e7 	bl	800a4f4 <__sinit>
 800a126:	4b21      	ldr	r3, [pc, #132]	; (800a1ac <__swbuf_r+0x98>)
 800a128:	429c      	cmp	r4, r3
 800a12a:	d12b      	bne.n	800a184 <__swbuf_r+0x70>
 800a12c:	686c      	ldr	r4, [r5, #4]
 800a12e:	69a3      	ldr	r3, [r4, #24]
 800a130:	60a3      	str	r3, [r4, #8]
 800a132:	89a3      	ldrh	r3, [r4, #12]
 800a134:	071a      	lsls	r2, r3, #28
 800a136:	d52f      	bpl.n	800a198 <__swbuf_r+0x84>
 800a138:	6923      	ldr	r3, [r4, #16]
 800a13a:	b36b      	cbz	r3, 800a198 <__swbuf_r+0x84>
 800a13c:	6923      	ldr	r3, [r4, #16]
 800a13e:	6820      	ldr	r0, [r4, #0]
 800a140:	1ac0      	subs	r0, r0, r3
 800a142:	6963      	ldr	r3, [r4, #20]
 800a144:	b2f6      	uxtb	r6, r6
 800a146:	4283      	cmp	r3, r0
 800a148:	4637      	mov	r7, r6
 800a14a:	dc04      	bgt.n	800a156 <__swbuf_r+0x42>
 800a14c:	4621      	mov	r1, r4
 800a14e:	4628      	mov	r0, r5
 800a150:	f000 f93c 	bl	800a3cc <_fflush_r>
 800a154:	bb30      	cbnz	r0, 800a1a4 <__swbuf_r+0x90>
 800a156:	68a3      	ldr	r3, [r4, #8]
 800a158:	3b01      	subs	r3, #1
 800a15a:	60a3      	str	r3, [r4, #8]
 800a15c:	6823      	ldr	r3, [r4, #0]
 800a15e:	1c5a      	adds	r2, r3, #1
 800a160:	6022      	str	r2, [r4, #0]
 800a162:	701e      	strb	r6, [r3, #0]
 800a164:	6963      	ldr	r3, [r4, #20]
 800a166:	3001      	adds	r0, #1
 800a168:	4283      	cmp	r3, r0
 800a16a:	d004      	beq.n	800a176 <__swbuf_r+0x62>
 800a16c:	89a3      	ldrh	r3, [r4, #12]
 800a16e:	07db      	lsls	r3, r3, #31
 800a170:	d506      	bpl.n	800a180 <__swbuf_r+0x6c>
 800a172:	2e0a      	cmp	r6, #10
 800a174:	d104      	bne.n	800a180 <__swbuf_r+0x6c>
 800a176:	4621      	mov	r1, r4
 800a178:	4628      	mov	r0, r5
 800a17a:	f000 f927 	bl	800a3cc <_fflush_r>
 800a17e:	b988      	cbnz	r0, 800a1a4 <__swbuf_r+0x90>
 800a180:	4638      	mov	r0, r7
 800a182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a184:	4b0a      	ldr	r3, [pc, #40]	; (800a1b0 <__swbuf_r+0x9c>)
 800a186:	429c      	cmp	r4, r3
 800a188:	d101      	bne.n	800a18e <__swbuf_r+0x7a>
 800a18a:	68ac      	ldr	r4, [r5, #8]
 800a18c:	e7cf      	b.n	800a12e <__swbuf_r+0x1a>
 800a18e:	4b09      	ldr	r3, [pc, #36]	; (800a1b4 <__swbuf_r+0xa0>)
 800a190:	429c      	cmp	r4, r3
 800a192:	bf08      	it	eq
 800a194:	68ec      	ldreq	r4, [r5, #12]
 800a196:	e7ca      	b.n	800a12e <__swbuf_r+0x1a>
 800a198:	4621      	mov	r1, r4
 800a19a:	4628      	mov	r0, r5
 800a19c:	f000 f81a 	bl	800a1d4 <__swsetup_r>
 800a1a0:	2800      	cmp	r0, #0
 800a1a2:	d0cb      	beq.n	800a13c <__swbuf_r+0x28>
 800a1a4:	f04f 37ff 	mov.w	r7, #4294967295
 800a1a8:	e7ea      	b.n	800a180 <__swbuf_r+0x6c>
 800a1aa:	bf00      	nop
 800a1ac:	0800adb4 	.word	0x0800adb4
 800a1b0:	0800add4 	.word	0x0800add4
 800a1b4:	0800ad94 	.word	0x0800ad94

0800a1b8 <__ascii_wctomb>:
 800a1b8:	b149      	cbz	r1, 800a1ce <__ascii_wctomb+0x16>
 800a1ba:	2aff      	cmp	r2, #255	; 0xff
 800a1bc:	bf85      	ittet	hi
 800a1be:	238a      	movhi	r3, #138	; 0x8a
 800a1c0:	6003      	strhi	r3, [r0, #0]
 800a1c2:	700a      	strbls	r2, [r1, #0]
 800a1c4:	f04f 30ff 	movhi.w	r0, #4294967295
 800a1c8:	bf98      	it	ls
 800a1ca:	2001      	movls	r0, #1
 800a1cc:	4770      	bx	lr
 800a1ce:	4608      	mov	r0, r1
 800a1d0:	4770      	bx	lr
	...

0800a1d4 <__swsetup_r>:
 800a1d4:	4b32      	ldr	r3, [pc, #200]	; (800a2a0 <__swsetup_r+0xcc>)
 800a1d6:	b570      	push	{r4, r5, r6, lr}
 800a1d8:	681d      	ldr	r5, [r3, #0]
 800a1da:	4606      	mov	r6, r0
 800a1dc:	460c      	mov	r4, r1
 800a1de:	b125      	cbz	r5, 800a1ea <__swsetup_r+0x16>
 800a1e0:	69ab      	ldr	r3, [r5, #24]
 800a1e2:	b913      	cbnz	r3, 800a1ea <__swsetup_r+0x16>
 800a1e4:	4628      	mov	r0, r5
 800a1e6:	f000 f985 	bl	800a4f4 <__sinit>
 800a1ea:	4b2e      	ldr	r3, [pc, #184]	; (800a2a4 <__swsetup_r+0xd0>)
 800a1ec:	429c      	cmp	r4, r3
 800a1ee:	d10f      	bne.n	800a210 <__swsetup_r+0x3c>
 800a1f0:	686c      	ldr	r4, [r5, #4]
 800a1f2:	89a3      	ldrh	r3, [r4, #12]
 800a1f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a1f8:	0719      	lsls	r1, r3, #28
 800a1fa:	d42c      	bmi.n	800a256 <__swsetup_r+0x82>
 800a1fc:	06dd      	lsls	r5, r3, #27
 800a1fe:	d411      	bmi.n	800a224 <__swsetup_r+0x50>
 800a200:	2309      	movs	r3, #9
 800a202:	6033      	str	r3, [r6, #0]
 800a204:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a208:	81a3      	strh	r3, [r4, #12]
 800a20a:	f04f 30ff 	mov.w	r0, #4294967295
 800a20e:	e03e      	b.n	800a28e <__swsetup_r+0xba>
 800a210:	4b25      	ldr	r3, [pc, #148]	; (800a2a8 <__swsetup_r+0xd4>)
 800a212:	429c      	cmp	r4, r3
 800a214:	d101      	bne.n	800a21a <__swsetup_r+0x46>
 800a216:	68ac      	ldr	r4, [r5, #8]
 800a218:	e7eb      	b.n	800a1f2 <__swsetup_r+0x1e>
 800a21a:	4b24      	ldr	r3, [pc, #144]	; (800a2ac <__swsetup_r+0xd8>)
 800a21c:	429c      	cmp	r4, r3
 800a21e:	bf08      	it	eq
 800a220:	68ec      	ldreq	r4, [r5, #12]
 800a222:	e7e6      	b.n	800a1f2 <__swsetup_r+0x1e>
 800a224:	0758      	lsls	r0, r3, #29
 800a226:	d512      	bpl.n	800a24e <__swsetup_r+0x7a>
 800a228:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a22a:	b141      	cbz	r1, 800a23e <__swsetup_r+0x6a>
 800a22c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a230:	4299      	cmp	r1, r3
 800a232:	d002      	beq.n	800a23a <__swsetup_r+0x66>
 800a234:	4630      	mov	r0, r6
 800a236:	f7ff fb31 	bl	800989c <_free_r>
 800a23a:	2300      	movs	r3, #0
 800a23c:	6363      	str	r3, [r4, #52]	; 0x34
 800a23e:	89a3      	ldrh	r3, [r4, #12]
 800a240:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a244:	81a3      	strh	r3, [r4, #12]
 800a246:	2300      	movs	r3, #0
 800a248:	6063      	str	r3, [r4, #4]
 800a24a:	6923      	ldr	r3, [r4, #16]
 800a24c:	6023      	str	r3, [r4, #0]
 800a24e:	89a3      	ldrh	r3, [r4, #12]
 800a250:	f043 0308 	orr.w	r3, r3, #8
 800a254:	81a3      	strh	r3, [r4, #12]
 800a256:	6923      	ldr	r3, [r4, #16]
 800a258:	b94b      	cbnz	r3, 800a26e <__swsetup_r+0x9a>
 800a25a:	89a3      	ldrh	r3, [r4, #12]
 800a25c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a264:	d003      	beq.n	800a26e <__swsetup_r+0x9a>
 800a266:	4621      	mov	r1, r4
 800a268:	4630      	mov	r0, r6
 800a26a:	f000 fa09 	bl	800a680 <__smakebuf_r>
 800a26e:	89a0      	ldrh	r0, [r4, #12]
 800a270:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a274:	f010 0301 	ands.w	r3, r0, #1
 800a278:	d00a      	beq.n	800a290 <__swsetup_r+0xbc>
 800a27a:	2300      	movs	r3, #0
 800a27c:	60a3      	str	r3, [r4, #8]
 800a27e:	6963      	ldr	r3, [r4, #20]
 800a280:	425b      	negs	r3, r3
 800a282:	61a3      	str	r3, [r4, #24]
 800a284:	6923      	ldr	r3, [r4, #16]
 800a286:	b943      	cbnz	r3, 800a29a <__swsetup_r+0xc6>
 800a288:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a28c:	d1ba      	bne.n	800a204 <__swsetup_r+0x30>
 800a28e:	bd70      	pop	{r4, r5, r6, pc}
 800a290:	0781      	lsls	r1, r0, #30
 800a292:	bf58      	it	pl
 800a294:	6963      	ldrpl	r3, [r4, #20]
 800a296:	60a3      	str	r3, [r4, #8]
 800a298:	e7f4      	b.n	800a284 <__swsetup_r+0xb0>
 800a29a:	2000      	movs	r0, #0
 800a29c:	e7f7      	b.n	800a28e <__swsetup_r+0xba>
 800a29e:	bf00      	nop
 800a2a0:	2000001c 	.word	0x2000001c
 800a2a4:	0800adb4 	.word	0x0800adb4
 800a2a8:	0800add4 	.word	0x0800add4
 800a2ac:	0800ad94 	.word	0x0800ad94

0800a2b0 <abort>:
 800a2b0:	b508      	push	{r3, lr}
 800a2b2:	2006      	movs	r0, #6
 800a2b4:	f000 fa54 	bl	800a760 <raise>
 800a2b8:	2001      	movs	r0, #1
 800a2ba:	f7f7 ff3f 	bl	800213c <_exit>
	...

0800a2c0 <__sflush_r>:
 800a2c0:	898a      	ldrh	r2, [r1, #12]
 800a2c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2c6:	4605      	mov	r5, r0
 800a2c8:	0710      	lsls	r0, r2, #28
 800a2ca:	460c      	mov	r4, r1
 800a2cc:	d458      	bmi.n	800a380 <__sflush_r+0xc0>
 800a2ce:	684b      	ldr	r3, [r1, #4]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	dc05      	bgt.n	800a2e0 <__sflush_r+0x20>
 800a2d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	dc02      	bgt.n	800a2e0 <__sflush_r+0x20>
 800a2da:	2000      	movs	r0, #0
 800a2dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2e2:	2e00      	cmp	r6, #0
 800a2e4:	d0f9      	beq.n	800a2da <__sflush_r+0x1a>
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a2ec:	682f      	ldr	r7, [r5, #0]
 800a2ee:	602b      	str	r3, [r5, #0]
 800a2f0:	d032      	beq.n	800a358 <__sflush_r+0x98>
 800a2f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a2f4:	89a3      	ldrh	r3, [r4, #12]
 800a2f6:	075a      	lsls	r2, r3, #29
 800a2f8:	d505      	bpl.n	800a306 <__sflush_r+0x46>
 800a2fa:	6863      	ldr	r3, [r4, #4]
 800a2fc:	1ac0      	subs	r0, r0, r3
 800a2fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a300:	b10b      	cbz	r3, 800a306 <__sflush_r+0x46>
 800a302:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a304:	1ac0      	subs	r0, r0, r3
 800a306:	2300      	movs	r3, #0
 800a308:	4602      	mov	r2, r0
 800a30a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a30c:	6a21      	ldr	r1, [r4, #32]
 800a30e:	4628      	mov	r0, r5
 800a310:	47b0      	blx	r6
 800a312:	1c43      	adds	r3, r0, #1
 800a314:	89a3      	ldrh	r3, [r4, #12]
 800a316:	d106      	bne.n	800a326 <__sflush_r+0x66>
 800a318:	6829      	ldr	r1, [r5, #0]
 800a31a:	291d      	cmp	r1, #29
 800a31c:	d82c      	bhi.n	800a378 <__sflush_r+0xb8>
 800a31e:	4a2a      	ldr	r2, [pc, #168]	; (800a3c8 <__sflush_r+0x108>)
 800a320:	40ca      	lsrs	r2, r1
 800a322:	07d6      	lsls	r6, r2, #31
 800a324:	d528      	bpl.n	800a378 <__sflush_r+0xb8>
 800a326:	2200      	movs	r2, #0
 800a328:	6062      	str	r2, [r4, #4]
 800a32a:	04d9      	lsls	r1, r3, #19
 800a32c:	6922      	ldr	r2, [r4, #16]
 800a32e:	6022      	str	r2, [r4, #0]
 800a330:	d504      	bpl.n	800a33c <__sflush_r+0x7c>
 800a332:	1c42      	adds	r2, r0, #1
 800a334:	d101      	bne.n	800a33a <__sflush_r+0x7a>
 800a336:	682b      	ldr	r3, [r5, #0]
 800a338:	b903      	cbnz	r3, 800a33c <__sflush_r+0x7c>
 800a33a:	6560      	str	r0, [r4, #84]	; 0x54
 800a33c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a33e:	602f      	str	r7, [r5, #0]
 800a340:	2900      	cmp	r1, #0
 800a342:	d0ca      	beq.n	800a2da <__sflush_r+0x1a>
 800a344:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a348:	4299      	cmp	r1, r3
 800a34a:	d002      	beq.n	800a352 <__sflush_r+0x92>
 800a34c:	4628      	mov	r0, r5
 800a34e:	f7ff faa5 	bl	800989c <_free_r>
 800a352:	2000      	movs	r0, #0
 800a354:	6360      	str	r0, [r4, #52]	; 0x34
 800a356:	e7c1      	b.n	800a2dc <__sflush_r+0x1c>
 800a358:	6a21      	ldr	r1, [r4, #32]
 800a35a:	2301      	movs	r3, #1
 800a35c:	4628      	mov	r0, r5
 800a35e:	47b0      	blx	r6
 800a360:	1c41      	adds	r1, r0, #1
 800a362:	d1c7      	bne.n	800a2f4 <__sflush_r+0x34>
 800a364:	682b      	ldr	r3, [r5, #0]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d0c4      	beq.n	800a2f4 <__sflush_r+0x34>
 800a36a:	2b1d      	cmp	r3, #29
 800a36c:	d001      	beq.n	800a372 <__sflush_r+0xb2>
 800a36e:	2b16      	cmp	r3, #22
 800a370:	d101      	bne.n	800a376 <__sflush_r+0xb6>
 800a372:	602f      	str	r7, [r5, #0]
 800a374:	e7b1      	b.n	800a2da <__sflush_r+0x1a>
 800a376:	89a3      	ldrh	r3, [r4, #12]
 800a378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a37c:	81a3      	strh	r3, [r4, #12]
 800a37e:	e7ad      	b.n	800a2dc <__sflush_r+0x1c>
 800a380:	690f      	ldr	r7, [r1, #16]
 800a382:	2f00      	cmp	r7, #0
 800a384:	d0a9      	beq.n	800a2da <__sflush_r+0x1a>
 800a386:	0793      	lsls	r3, r2, #30
 800a388:	680e      	ldr	r6, [r1, #0]
 800a38a:	bf08      	it	eq
 800a38c:	694b      	ldreq	r3, [r1, #20]
 800a38e:	600f      	str	r7, [r1, #0]
 800a390:	bf18      	it	ne
 800a392:	2300      	movne	r3, #0
 800a394:	eba6 0807 	sub.w	r8, r6, r7
 800a398:	608b      	str	r3, [r1, #8]
 800a39a:	f1b8 0f00 	cmp.w	r8, #0
 800a39e:	dd9c      	ble.n	800a2da <__sflush_r+0x1a>
 800a3a0:	6a21      	ldr	r1, [r4, #32]
 800a3a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a3a4:	4643      	mov	r3, r8
 800a3a6:	463a      	mov	r2, r7
 800a3a8:	4628      	mov	r0, r5
 800a3aa:	47b0      	blx	r6
 800a3ac:	2800      	cmp	r0, #0
 800a3ae:	dc06      	bgt.n	800a3be <__sflush_r+0xfe>
 800a3b0:	89a3      	ldrh	r3, [r4, #12]
 800a3b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3b6:	81a3      	strh	r3, [r4, #12]
 800a3b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3bc:	e78e      	b.n	800a2dc <__sflush_r+0x1c>
 800a3be:	4407      	add	r7, r0
 800a3c0:	eba8 0800 	sub.w	r8, r8, r0
 800a3c4:	e7e9      	b.n	800a39a <__sflush_r+0xda>
 800a3c6:	bf00      	nop
 800a3c8:	20400001 	.word	0x20400001

0800a3cc <_fflush_r>:
 800a3cc:	b538      	push	{r3, r4, r5, lr}
 800a3ce:	690b      	ldr	r3, [r1, #16]
 800a3d0:	4605      	mov	r5, r0
 800a3d2:	460c      	mov	r4, r1
 800a3d4:	b913      	cbnz	r3, 800a3dc <_fflush_r+0x10>
 800a3d6:	2500      	movs	r5, #0
 800a3d8:	4628      	mov	r0, r5
 800a3da:	bd38      	pop	{r3, r4, r5, pc}
 800a3dc:	b118      	cbz	r0, 800a3e6 <_fflush_r+0x1a>
 800a3de:	6983      	ldr	r3, [r0, #24]
 800a3e0:	b90b      	cbnz	r3, 800a3e6 <_fflush_r+0x1a>
 800a3e2:	f000 f887 	bl	800a4f4 <__sinit>
 800a3e6:	4b14      	ldr	r3, [pc, #80]	; (800a438 <_fflush_r+0x6c>)
 800a3e8:	429c      	cmp	r4, r3
 800a3ea:	d11b      	bne.n	800a424 <_fflush_r+0x58>
 800a3ec:	686c      	ldr	r4, [r5, #4]
 800a3ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d0ef      	beq.n	800a3d6 <_fflush_r+0xa>
 800a3f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a3f8:	07d0      	lsls	r0, r2, #31
 800a3fa:	d404      	bmi.n	800a406 <_fflush_r+0x3a>
 800a3fc:	0599      	lsls	r1, r3, #22
 800a3fe:	d402      	bmi.n	800a406 <_fflush_r+0x3a>
 800a400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a402:	f000 f915 	bl	800a630 <__retarget_lock_acquire_recursive>
 800a406:	4628      	mov	r0, r5
 800a408:	4621      	mov	r1, r4
 800a40a:	f7ff ff59 	bl	800a2c0 <__sflush_r>
 800a40e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a410:	07da      	lsls	r2, r3, #31
 800a412:	4605      	mov	r5, r0
 800a414:	d4e0      	bmi.n	800a3d8 <_fflush_r+0xc>
 800a416:	89a3      	ldrh	r3, [r4, #12]
 800a418:	059b      	lsls	r3, r3, #22
 800a41a:	d4dd      	bmi.n	800a3d8 <_fflush_r+0xc>
 800a41c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a41e:	f000 f908 	bl	800a632 <__retarget_lock_release_recursive>
 800a422:	e7d9      	b.n	800a3d8 <_fflush_r+0xc>
 800a424:	4b05      	ldr	r3, [pc, #20]	; (800a43c <_fflush_r+0x70>)
 800a426:	429c      	cmp	r4, r3
 800a428:	d101      	bne.n	800a42e <_fflush_r+0x62>
 800a42a:	68ac      	ldr	r4, [r5, #8]
 800a42c:	e7df      	b.n	800a3ee <_fflush_r+0x22>
 800a42e:	4b04      	ldr	r3, [pc, #16]	; (800a440 <_fflush_r+0x74>)
 800a430:	429c      	cmp	r4, r3
 800a432:	bf08      	it	eq
 800a434:	68ec      	ldreq	r4, [r5, #12]
 800a436:	e7da      	b.n	800a3ee <_fflush_r+0x22>
 800a438:	0800adb4 	.word	0x0800adb4
 800a43c:	0800add4 	.word	0x0800add4
 800a440:	0800ad94 	.word	0x0800ad94

0800a444 <std>:
 800a444:	2300      	movs	r3, #0
 800a446:	b510      	push	{r4, lr}
 800a448:	4604      	mov	r4, r0
 800a44a:	e9c0 3300 	strd	r3, r3, [r0]
 800a44e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a452:	6083      	str	r3, [r0, #8]
 800a454:	8181      	strh	r1, [r0, #12]
 800a456:	6643      	str	r3, [r0, #100]	; 0x64
 800a458:	81c2      	strh	r2, [r0, #14]
 800a45a:	6183      	str	r3, [r0, #24]
 800a45c:	4619      	mov	r1, r3
 800a45e:	2208      	movs	r2, #8
 800a460:	305c      	adds	r0, #92	; 0x5c
 800a462:	f7fd fb59 	bl	8007b18 <memset>
 800a466:	4b05      	ldr	r3, [pc, #20]	; (800a47c <std+0x38>)
 800a468:	6263      	str	r3, [r4, #36]	; 0x24
 800a46a:	4b05      	ldr	r3, [pc, #20]	; (800a480 <std+0x3c>)
 800a46c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a46e:	4b05      	ldr	r3, [pc, #20]	; (800a484 <std+0x40>)
 800a470:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a472:	4b05      	ldr	r3, [pc, #20]	; (800a488 <std+0x44>)
 800a474:	6224      	str	r4, [r4, #32]
 800a476:	6323      	str	r3, [r4, #48]	; 0x30
 800a478:	bd10      	pop	{r4, pc}
 800a47a:	bf00      	nop
 800a47c:	0800a799 	.word	0x0800a799
 800a480:	0800a7bb 	.word	0x0800a7bb
 800a484:	0800a7f3 	.word	0x0800a7f3
 800a488:	0800a817 	.word	0x0800a817

0800a48c <_cleanup_r>:
 800a48c:	4901      	ldr	r1, [pc, #4]	; (800a494 <_cleanup_r+0x8>)
 800a48e:	f000 b8af 	b.w	800a5f0 <_fwalk_reent>
 800a492:	bf00      	nop
 800a494:	0800a3cd 	.word	0x0800a3cd

0800a498 <__sfmoreglue>:
 800a498:	b570      	push	{r4, r5, r6, lr}
 800a49a:	2268      	movs	r2, #104	; 0x68
 800a49c:	1e4d      	subs	r5, r1, #1
 800a49e:	4355      	muls	r5, r2
 800a4a0:	460e      	mov	r6, r1
 800a4a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a4a6:	f7ff fa65 	bl	8009974 <_malloc_r>
 800a4aa:	4604      	mov	r4, r0
 800a4ac:	b140      	cbz	r0, 800a4c0 <__sfmoreglue+0x28>
 800a4ae:	2100      	movs	r1, #0
 800a4b0:	e9c0 1600 	strd	r1, r6, [r0]
 800a4b4:	300c      	adds	r0, #12
 800a4b6:	60a0      	str	r0, [r4, #8]
 800a4b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a4bc:	f7fd fb2c 	bl	8007b18 <memset>
 800a4c0:	4620      	mov	r0, r4
 800a4c2:	bd70      	pop	{r4, r5, r6, pc}

0800a4c4 <__sfp_lock_acquire>:
 800a4c4:	4801      	ldr	r0, [pc, #4]	; (800a4cc <__sfp_lock_acquire+0x8>)
 800a4c6:	f000 b8b3 	b.w	800a630 <__retarget_lock_acquire_recursive>
 800a4ca:	bf00      	nop
 800a4cc:	200004c5 	.word	0x200004c5

0800a4d0 <__sfp_lock_release>:
 800a4d0:	4801      	ldr	r0, [pc, #4]	; (800a4d8 <__sfp_lock_release+0x8>)
 800a4d2:	f000 b8ae 	b.w	800a632 <__retarget_lock_release_recursive>
 800a4d6:	bf00      	nop
 800a4d8:	200004c5 	.word	0x200004c5

0800a4dc <__sinit_lock_acquire>:
 800a4dc:	4801      	ldr	r0, [pc, #4]	; (800a4e4 <__sinit_lock_acquire+0x8>)
 800a4de:	f000 b8a7 	b.w	800a630 <__retarget_lock_acquire_recursive>
 800a4e2:	bf00      	nop
 800a4e4:	200004c6 	.word	0x200004c6

0800a4e8 <__sinit_lock_release>:
 800a4e8:	4801      	ldr	r0, [pc, #4]	; (800a4f0 <__sinit_lock_release+0x8>)
 800a4ea:	f000 b8a2 	b.w	800a632 <__retarget_lock_release_recursive>
 800a4ee:	bf00      	nop
 800a4f0:	200004c6 	.word	0x200004c6

0800a4f4 <__sinit>:
 800a4f4:	b510      	push	{r4, lr}
 800a4f6:	4604      	mov	r4, r0
 800a4f8:	f7ff fff0 	bl	800a4dc <__sinit_lock_acquire>
 800a4fc:	69a3      	ldr	r3, [r4, #24]
 800a4fe:	b11b      	cbz	r3, 800a508 <__sinit+0x14>
 800a500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a504:	f7ff bff0 	b.w	800a4e8 <__sinit_lock_release>
 800a508:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a50c:	6523      	str	r3, [r4, #80]	; 0x50
 800a50e:	4b13      	ldr	r3, [pc, #76]	; (800a55c <__sinit+0x68>)
 800a510:	4a13      	ldr	r2, [pc, #76]	; (800a560 <__sinit+0x6c>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	62a2      	str	r2, [r4, #40]	; 0x28
 800a516:	42a3      	cmp	r3, r4
 800a518:	bf04      	itt	eq
 800a51a:	2301      	moveq	r3, #1
 800a51c:	61a3      	streq	r3, [r4, #24]
 800a51e:	4620      	mov	r0, r4
 800a520:	f000 f820 	bl	800a564 <__sfp>
 800a524:	6060      	str	r0, [r4, #4]
 800a526:	4620      	mov	r0, r4
 800a528:	f000 f81c 	bl	800a564 <__sfp>
 800a52c:	60a0      	str	r0, [r4, #8]
 800a52e:	4620      	mov	r0, r4
 800a530:	f000 f818 	bl	800a564 <__sfp>
 800a534:	2200      	movs	r2, #0
 800a536:	60e0      	str	r0, [r4, #12]
 800a538:	2104      	movs	r1, #4
 800a53a:	6860      	ldr	r0, [r4, #4]
 800a53c:	f7ff ff82 	bl	800a444 <std>
 800a540:	68a0      	ldr	r0, [r4, #8]
 800a542:	2201      	movs	r2, #1
 800a544:	2109      	movs	r1, #9
 800a546:	f7ff ff7d 	bl	800a444 <std>
 800a54a:	68e0      	ldr	r0, [r4, #12]
 800a54c:	2202      	movs	r2, #2
 800a54e:	2112      	movs	r1, #18
 800a550:	f7ff ff78 	bl	800a444 <std>
 800a554:	2301      	movs	r3, #1
 800a556:	61a3      	str	r3, [r4, #24]
 800a558:	e7d2      	b.n	800a500 <__sinit+0xc>
 800a55a:	bf00      	nop
 800a55c:	0800aa1c 	.word	0x0800aa1c
 800a560:	0800a48d 	.word	0x0800a48d

0800a564 <__sfp>:
 800a564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a566:	4607      	mov	r7, r0
 800a568:	f7ff ffac 	bl	800a4c4 <__sfp_lock_acquire>
 800a56c:	4b1e      	ldr	r3, [pc, #120]	; (800a5e8 <__sfp+0x84>)
 800a56e:	681e      	ldr	r6, [r3, #0]
 800a570:	69b3      	ldr	r3, [r6, #24]
 800a572:	b913      	cbnz	r3, 800a57a <__sfp+0x16>
 800a574:	4630      	mov	r0, r6
 800a576:	f7ff ffbd 	bl	800a4f4 <__sinit>
 800a57a:	3648      	adds	r6, #72	; 0x48
 800a57c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a580:	3b01      	subs	r3, #1
 800a582:	d503      	bpl.n	800a58c <__sfp+0x28>
 800a584:	6833      	ldr	r3, [r6, #0]
 800a586:	b30b      	cbz	r3, 800a5cc <__sfp+0x68>
 800a588:	6836      	ldr	r6, [r6, #0]
 800a58a:	e7f7      	b.n	800a57c <__sfp+0x18>
 800a58c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a590:	b9d5      	cbnz	r5, 800a5c8 <__sfp+0x64>
 800a592:	4b16      	ldr	r3, [pc, #88]	; (800a5ec <__sfp+0x88>)
 800a594:	60e3      	str	r3, [r4, #12]
 800a596:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a59a:	6665      	str	r5, [r4, #100]	; 0x64
 800a59c:	f000 f847 	bl	800a62e <__retarget_lock_init_recursive>
 800a5a0:	f7ff ff96 	bl	800a4d0 <__sfp_lock_release>
 800a5a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a5a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a5ac:	6025      	str	r5, [r4, #0]
 800a5ae:	61a5      	str	r5, [r4, #24]
 800a5b0:	2208      	movs	r2, #8
 800a5b2:	4629      	mov	r1, r5
 800a5b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a5b8:	f7fd faae 	bl	8007b18 <memset>
 800a5bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a5c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a5c4:	4620      	mov	r0, r4
 800a5c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5c8:	3468      	adds	r4, #104	; 0x68
 800a5ca:	e7d9      	b.n	800a580 <__sfp+0x1c>
 800a5cc:	2104      	movs	r1, #4
 800a5ce:	4638      	mov	r0, r7
 800a5d0:	f7ff ff62 	bl	800a498 <__sfmoreglue>
 800a5d4:	4604      	mov	r4, r0
 800a5d6:	6030      	str	r0, [r6, #0]
 800a5d8:	2800      	cmp	r0, #0
 800a5da:	d1d5      	bne.n	800a588 <__sfp+0x24>
 800a5dc:	f7ff ff78 	bl	800a4d0 <__sfp_lock_release>
 800a5e0:	230c      	movs	r3, #12
 800a5e2:	603b      	str	r3, [r7, #0]
 800a5e4:	e7ee      	b.n	800a5c4 <__sfp+0x60>
 800a5e6:	bf00      	nop
 800a5e8:	0800aa1c 	.word	0x0800aa1c
 800a5ec:	ffff0001 	.word	0xffff0001

0800a5f0 <_fwalk_reent>:
 800a5f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5f4:	4606      	mov	r6, r0
 800a5f6:	4688      	mov	r8, r1
 800a5f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a5fc:	2700      	movs	r7, #0
 800a5fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a602:	f1b9 0901 	subs.w	r9, r9, #1
 800a606:	d505      	bpl.n	800a614 <_fwalk_reent+0x24>
 800a608:	6824      	ldr	r4, [r4, #0]
 800a60a:	2c00      	cmp	r4, #0
 800a60c:	d1f7      	bne.n	800a5fe <_fwalk_reent+0xe>
 800a60e:	4638      	mov	r0, r7
 800a610:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a614:	89ab      	ldrh	r3, [r5, #12]
 800a616:	2b01      	cmp	r3, #1
 800a618:	d907      	bls.n	800a62a <_fwalk_reent+0x3a>
 800a61a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a61e:	3301      	adds	r3, #1
 800a620:	d003      	beq.n	800a62a <_fwalk_reent+0x3a>
 800a622:	4629      	mov	r1, r5
 800a624:	4630      	mov	r0, r6
 800a626:	47c0      	blx	r8
 800a628:	4307      	orrs	r7, r0
 800a62a:	3568      	adds	r5, #104	; 0x68
 800a62c:	e7e9      	b.n	800a602 <_fwalk_reent+0x12>

0800a62e <__retarget_lock_init_recursive>:
 800a62e:	4770      	bx	lr

0800a630 <__retarget_lock_acquire_recursive>:
 800a630:	4770      	bx	lr

0800a632 <__retarget_lock_release_recursive>:
 800a632:	4770      	bx	lr

0800a634 <__swhatbuf_r>:
 800a634:	b570      	push	{r4, r5, r6, lr}
 800a636:	460e      	mov	r6, r1
 800a638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a63c:	2900      	cmp	r1, #0
 800a63e:	b096      	sub	sp, #88	; 0x58
 800a640:	4614      	mov	r4, r2
 800a642:	461d      	mov	r5, r3
 800a644:	da08      	bge.n	800a658 <__swhatbuf_r+0x24>
 800a646:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a64a:	2200      	movs	r2, #0
 800a64c:	602a      	str	r2, [r5, #0]
 800a64e:	061a      	lsls	r2, r3, #24
 800a650:	d410      	bmi.n	800a674 <__swhatbuf_r+0x40>
 800a652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a656:	e00e      	b.n	800a676 <__swhatbuf_r+0x42>
 800a658:	466a      	mov	r2, sp
 800a65a:	f000 f903 	bl	800a864 <_fstat_r>
 800a65e:	2800      	cmp	r0, #0
 800a660:	dbf1      	blt.n	800a646 <__swhatbuf_r+0x12>
 800a662:	9a01      	ldr	r2, [sp, #4]
 800a664:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a668:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a66c:	425a      	negs	r2, r3
 800a66e:	415a      	adcs	r2, r3
 800a670:	602a      	str	r2, [r5, #0]
 800a672:	e7ee      	b.n	800a652 <__swhatbuf_r+0x1e>
 800a674:	2340      	movs	r3, #64	; 0x40
 800a676:	2000      	movs	r0, #0
 800a678:	6023      	str	r3, [r4, #0]
 800a67a:	b016      	add	sp, #88	; 0x58
 800a67c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a680 <__smakebuf_r>:
 800a680:	898b      	ldrh	r3, [r1, #12]
 800a682:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a684:	079d      	lsls	r5, r3, #30
 800a686:	4606      	mov	r6, r0
 800a688:	460c      	mov	r4, r1
 800a68a:	d507      	bpl.n	800a69c <__smakebuf_r+0x1c>
 800a68c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a690:	6023      	str	r3, [r4, #0]
 800a692:	6123      	str	r3, [r4, #16]
 800a694:	2301      	movs	r3, #1
 800a696:	6163      	str	r3, [r4, #20]
 800a698:	b002      	add	sp, #8
 800a69a:	bd70      	pop	{r4, r5, r6, pc}
 800a69c:	ab01      	add	r3, sp, #4
 800a69e:	466a      	mov	r2, sp
 800a6a0:	f7ff ffc8 	bl	800a634 <__swhatbuf_r>
 800a6a4:	9900      	ldr	r1, [sp, #0]
 800a6a6:	4605      	mov	r5, r0
 800a6a8:	4630      	mov	r0, r6
 800a6aa:	f7ff f963 	bl	8009974 <_malloc_r>
 800a6ae:	b948      	cbnz	r0, 800a6c4 <__smakebuf_r+0x44>
 800a6b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6b4:	059a      	lsls	r2, r3, #22
 800a6b6:	d4ef      	bmi.n	800a698 <__smakebuf_r+0x18>
 800a6b8:	f023 0303 	bic.w	r3, r3, #3
 800a6bc:	f043 0302 	orr.w	r3, r3, #2
 800a6c0:	81a3      	strh	r3, [r4, #12]
 800a6c2:	e7e3      	b.n	800a68c <__smakebuf_r+0xc>
 800a6c4:	4b0d      	ldr	r3, [pc, #52]	; (800a6fc <__smakebuf_r+0x7c>)
 800a6c6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a6c8:	89a3      	ldrh	r3, [r4, #12]
 800a6ca:	6020      	str	r0, [r4, #0]
 800a6cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6d0:	81a3      	strh	r3, [r4, #12]
 800a6d2:	9b00      	ldr	r3, [sp, #0]
 800a6d4:	6163      	str	r3, [r4, #20]
 800a6d6:	9b01      	ldr	r3, [sp, #4]
 800a6d8:	6120      	str	r0, [r4, #16]
 800a6da:	b15b      	cbz	r3, 800a6f4 <__smakebuf_r+0x74>
 800a6dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6e0:	4630      	mov	r0, r6
 800a6e2:	f000 f8d1 	bl	800a888 <_isatty_r>
 800a6e6:	b128      	cbz	r0, 800a6f4 <__smakebuf_r+0x74>
 800a6e8:	89a3      	ldrh	r3, [r4, #12]
 800a6ea:	f023 0303 	bic.w	r3, r3, #3
 800a6ee:	f043 0301 	orr.w	r3, r3, #1
 800a6f2:	81a3      	strh	r3, [r4, #12]
 800a6f4:	89a0      	ldrh	r0, [r4, #12]
 800a6f6:	4305      	orrs	r5, r0
 800a6f8:	81a5      	strh	r5, [r4, #12]
 800a6fa:	e7cd      	b.n	800a698 <__smakebuf_r+0x18>
 800a6fc:	0800a48d 	.word	0x0800a48d

0800a700 <_malloc_usable_size_r>:
 800a700:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a704:	1f18      	subs	r0, r3, #4
 800a706:	2b00      	cmp	r3, #0
 800a708:	bfbc      	itt	lt
 800a70a:	580b      	ldrlt	r3, [r1, r0]
 800a70c:	18c0      	addlt	r0, r0, r3
 800a70e:	4770      	bx	lr

0800a710 <_raise_r>:
 800a710:	291f      	cmp	r1, #31
 800a712:	b538      	push	{r3, r4, r5, lr}
 800a714:	4604      	mov	r4, r0
 800a716:	460d      	mov	r5, r1
 800a718:	d904      	bls.n	800a724 <_raise_r+0x14>
 800a71a:	2316      	movs	r3, #22
 800a71c:	6003      	str	r3, [r0, #0]
 800a71e:	f04f 30ff 	mov.w	r0, #4294967295
 800a722:	bd38      	pop	{r3, r4, r5, pc}
 800a724:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a726:	b112      	cbz	r2, 800a72e <_raise_r+0x1e>
 800a728:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a72c:	b94b      	cbnz	r3, 800a742 <_raise_r+0x32>
 800a72e:	4620      	mov	r0, r4
 800a730:	f000 f830 	bl	800a794 <_getpid_r>
 800a734:	462a      	mov	r2, r5
 800a736:	4601      	mov	r1, r0
 800a738:	4620      	mov	r0, r4
 800a73a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a73e:	f000 b817 	b.w	800a770 <_kill_r>
 800a742:	2b01      	cmp	r3, #1
 800a744:	d00a      	beq.n	800a75c <_raise_r+0x4c>
 800a746:	1c59      	adds	r1, r3, #1
 800a748:	d103      	bne.n	800a752 <_raise_r+0x42>
 800a74a:	2316      	movs	r3, #22
 800a74c:	6003      	str	r3, [r0, #0]
 800a74e:	2001      	movs	r0, #1
 800a750:	e7e7      	b.n	800a722 <_raise_r+0x12>
 800a752:	2400      	movs	r4, #0
 800a754:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a758:	4628      	mov	r0, r5
 800a75a:	4798      	blx	r3
 800a75c:	2000      	movs	r0, #0
 800a75e:	e7e0      	b.n	800a722 <_raise_r+0x12>

0800a760 <raise>:
 800a760:	4b02      	ldr	r3, [pc, #8]	; (800a76c <raise+0xc>)
 800a762:	4601      	mov	r1, r0
 800a764:	6818      	ldr	r0, [r3, #0]
 800a766:	f7ff bfd3 	b.w	800a710 <_raise_r>
 800a76a:	bf00      	nop
 800a76c:	2000001c 	.word	0x2000001c

0800a770 <_kill_r>:
 800a770:	b538      	push	{r3, r4, r5, lr}
 800a772:	4d07      	ldr	r5, [pc, #28]	; (800a790 <_kill_r+0x20>)
 800a774:	2300      	movs	r3, #0
 800a776:	4604      	mov	r4, r0
 800a778:	4608      	mov	r0, r1
 800a77a:	4611      	mov	r1, r2
 800a77c:	602b      	str	r3, [r5, #0]
 800a77e:	f7f7 fccd 	bl	800211c <_kill>
 800a782:	1c43      	adds	r3, r0, #1
 800a784:	d102      	bne.n	800a78c <_kill_r+0x1c>
 800a786:	682b      	ldr	r3, [r5, #0]
 800a788:	b103      	cbz	r3, 800a78c <_kill_r+0x1c>
 800a78a:	6023      	str	r3, [r4, #0]
 800a78c:	bd38      	pop	{r3, r4, r5, pc}
 800a78e:	bf00      	nop
 800a790:	200004c0 	.word	0x200004c0

0800a794 <_getpid_r>:
 800a794:	f7f7 bcba 	b.w	800210c <_getpid>

0800a798 <__sread>:
 800a798:	b510      	push	{r4, lr}
 800a79a:	460c      	mov	r4, r1
 800a79c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7a0:	f000 f894 	bl	800a8cc <_read_r>
 800a7a4:	2800      	cmp	r0, #0
 800a7a6:	bfab      	itete	ge
 800a7a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a7aa:	89a3      	ldrhlt	r3, [r4, #12]
 800a7ac:	181b      	addge	r3, r3, r0
 800a7ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a7b2:	bfac      	ite	ge
 800a7b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a7b6:	81a3      	strhlt	r3, [r4, #12]
 800a7b8:	bd10      	pop	{r4, pc}

0800a7ba <__swrite>:
 800a7ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7be:	461f      	mov	r7, r3
 800a7c0:	898b      	ldrh	r3, [r1, #12]
 800a7c2:	05db      	lsls	r3, r3, #23
 800a7c4:	4605      	mov	r5, r0
 800a7c6:	460c      	mov	r4, r1
 800a7c8:	4616      	mov	r6, r2
 800a7ca:	d505      	bpl.n	800a7d8 <__swrite+0x1e>
 800a7cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7d0:	2302      	movs	r3, #2
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	f000 f868 	bl	800a8a8 <_lseek_r>
 800a7d8:	89a3      	ldrh	r3, [r4, #12]
 800a7da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a7e2:	81a3      	strh	r3, [r4, #12]
 800a7e4:	4632      	mov	r2, r6
 800a7e6:	463b      	mov	r3, r7
 800a7e8:	4628      	mov	r0, r5
 800a7ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7ee:	f000 b817 	b.w	800a820 <_write_r>

0800a7f2 <__sseek>:
 800a7f2:	b510      	push	{r4, lr}
 800a7f4:	460c      	mov	r4, r1
 800a7f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7fa:	f000 f855 	bl	800a8a8 <_lseek_r>
 800a7fe:	1c43      	adds	r3, r0, #1
 800a800:	89a3      	ldrh	r3, [r4, #12]
 800a802:	bf15      	itete	ne
 800a804:	6560      	strne	r0, [r4, #84]	; 0x54
 800a806:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a80a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a80e:	81a3      	strheq	r3, [r4, #12]
 800a810:	bf18      	it	ne
 800a812:	81a3      	strhne	r3, [r4, #12]
 800a814:	bd10      	pop	{r4, pc}

0800a816 <__sclose>:
 800a816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a81a:	f000 b813 	b.w	800a844 <_close_r>
	...

0800a820 <_write_r>:
 800a820:	b538      	push	{r3, r4, r5, lr}
 800a822:	4d07      	ldr	r5, [pc, #28]	; (800a840 <_write_r+0x20>)
 800a824:	4604      	mov	r4, r0
 800a826:	4608      	mov	r0, r1
 800a828:	4611      	mov	r1, r2
 800a82a:	2200      	movs	r2, #0
 800a82c:	602a      	str	r2, [r5, #0]
 800a82e:	461a      	mov	r2, r3
 800a830:	f7f7 fcab 	bl	800218a <_write>
 800a834:	1c43      	adds	r3, r0, #1
 800a836:	d102      	bne.n	800a83e <_write_r+0x1e>
 800a838:	682b      	ldr	r3, [r5, #0]
 800a83a:	b103      	cbz	r3, 800a83e <_write_r+0x1e>
 800a83c:	6023      	str	r3, [r4, #0]
 800a83e:	bd38      	pop	{r3, r4, r5, pc}
 800a840:	200004c0 	.word	0x200004c0

0800a844 <_close_r>:
 800a844:	b538      	push	{r3, r4, r5, lr}
 800a846:	4d06      	ldr	r5, [pc, #24]	; (800a860 <_close_r+0x1c>)
 800a848:	2300      	movs	r3, #0
 800a84a:	4604      	mov	r4, r0
 800a84c:	4608      	mov	r0, r1
 800a84e:	602b      	str	r3, [r5, #0]
 800a850:	f7f7 fcb7 	bl	80021c2 <_close>
 800a854:	1c43      	adds	r3, r0, #1
 800a856:	d102      	bne.n	800a85e <_close_r+0x1a>
 800a858:	682b      	ldr	r3, [r5, #0]
 800a85a:	b103      	cbz	r3, 800a85e <_close_r+0x1a>
 800a85c:	6023      	str	r3, [r4, #0]
 800a85e:	bd38      	pop	{r3, r4, r5, pc}
 800a860:	200004c0 	.word	0x200004c0

0800a864 <_fstat_r>:
 800a864:	b538      	push	{r3, r4, r5, lr}
 800a866:	4d07      	ldr	r5, [pc, #28]	; (800a884 <_fstat_r+0x20>)
 800a868:	2300      	movs	r3, #0
 800a86a:	4604      	mov	r4, r0
 800a86c:	4608      	mov	r0, r1
 800a86e:	4611      	mov	r1, r2
 800a870:	602b      	str	r3, [r5, #0]
 800a872:	f7f7 fcb2 	bl	80021da <_fstat>
 800a876:	1c43      	adds	r3, r0, #1
 800a878:	d102      	bne.n	800a880 <_fstat_r+0x1c>
 800a87a:	682b      	ldr	r3, [r5, #0]
 800a87c:	b103      	cbz	r3, 800a880 <_fstat_r+0x1c>
 800a87e:	6023      	str	r3, [r4, #0]
 800a880:	bd38      	pop	{r3, r4, r5, pc}
 800a882:	bf00      	nop
 800a884:	200004c0 	.word	0x200004c0

0800a888 <_isatty_r>:
 800a888:	b538      	push	{r3, r4, r5, lr}
 800a88a:	4d06      	ldr	r5, [pc, #24]	; (800a8a4 <_isatty_r+0x1c>)
 800a88c:	2300      	movs	r3, #0
 800a88e:	4604      	mov	r4, r0
 800a890:	4608      	mov	r0, r1
 800a892:	602b      	str	r3, [r5, #0]
 800a894:	f7f7 fcb1 	bl	80021fa <_isatty>
 800a898:	1c43      	adds	r3, r0, #1
 800a89a:	d102      	bne.n	800a8a2 <_isatty_r+0x1a>
 800a89c:	682b      	ldr	r3, [r5, #0]
 800a89e:	b103      	cbz	r3, 800a8a2 <_isatty_r+0x1a>
 800a8a0:	6023      	str	r3, [r4, #0]
 800a8a2:	bd38      	pop	{r3, r4, r5, pc}
 800a8a4:	200004c0 	.word	0x200004c0

0800a8a8 <_lseek_r>:
 800a8a8:	b538      	push	{r3, r4, r5, lr}
 800a8aa:	4d07      	ldr	r5, [pc, #28]	; (800a8c8 <_lseek_r+0x20>)
 800a8ac:	4604      	mov	r4, r0
 800a8ae:	4608      	mov	r0, r1
 800a8b0:	4611      	mov	r1, r2
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	602a      	str	r2, [r5, #0]
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	f7f7 fcaa 	bl	8002210 <_lseek>
 800a8bc:	1c43      	adds	r3, r0, #1
 800a8be:	d102      	bne.n	800a8c6 <_lseek_r+0x1e>
 800a8c0:	682b      	ldr	r3, [r5, #0]
 800a8c2:	b103      	cbz	r3, 800a8c6 <_lseek_r+0x1e>
 800a8c4:	6023      	str	r3, [r4, #0]
 800a8c6:	bd38      	pop	{r3, r4, r5, pc}
 800a8c8:	200004c0 	.word	0x200004c0

0800a8cc <_read_r>:
 800a8cc:	b538      	push	{r3, r4, r5, lr}
 800a8ce:	4d07      	ldr	r5, [pc, #28]	; (800a8ec <_read_r+0x20>)
 800a8d0:	4604      	mov	r4, r0
 800a8d2:	4608      	mov	r0, r1
 800a8d4:	4611      	mov	r1, r2
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	602a      	str	r2, [r5, #0]
 800a8da:	461a      	mov	r2, r3
 800a8dc:	f7f7 fc38 	bl	8002150 <_read>
 800a8e0:	1c43      	adds	r3, r0, #1
 800a8e2:	d102      	bne.n	800a8ea <_read_r+0x1e>
 800a8e4:	682b      	ldr	r3, [r5, #0]
 800a8e6:	b103      	cbz	r3, 800a8ea <_read_r+0x1e>
 800a8e8:	6023      	str	r3, [r4, #0]
 800a8ea:	bd38      	pop	{r3, r4, r5, pc}
 800a8ec:	200004c0 	.word	0x200004c0

0800a8f0 <_init>:
 800a8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8f2:	bf00      	nop
 800a8f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8f6:	bc08      	pop	{r3}
 800a8f8:	469e      	mov	lr, r3
 800a8fa:	4770      	bx	lr

0800a8fc <_fini>:
 800a8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8fe:	bf00      	nop
 800a900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a902:	bc08      	pop	{r3}
 800a904:	469e      	mov	lr, r3
 800a906:	4770      	bx	lr
