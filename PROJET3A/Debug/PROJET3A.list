
PROJET3A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006950  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08006b30  08006b30  00016b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c08  08006c08  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006c08  08006c08  00016c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c10  08006c10  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c10  08006c10  00016c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c14  08006c14  00016c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006c18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  20000070  08006c88  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  08006c88  000203c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017783  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029a5  00000000  00000000  00037823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001478  00000000  00000000  0003a1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001380  00000000  00000000  0003b640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fc51  00000000  00000000  0003c9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001660c  00000000  00000000  0005c611  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9642  00000000  00000000  00072c1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014c25f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cbc  00000000  00000000  0014c2b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006b18 	.word	0x08006b18

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08006b18 	.word	0x08006b18

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f000 fe7f 	bl	80012ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f83e 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 fb26 	bl	8000c20 <MX_GPIO_Init>
  MX_DMA_Init();
 80005d4:	f000 faf2 	bl	8000bbc <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005d8:	f000 faa4 	bl	8000b24 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80005dc:	f000 f9a4 	bl	8000928 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005e0:	f000 fa52 	bl	8000a88 <MX_TIM2_Init>
  MX_ADC1_Init();
 80005e4:	f000 f87e 	bl	80006e4 <MX_ADC1_Init>
  MX_ADC2_Init();
 80005e8:	f000 f916 	bl	8000818 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  sprintf (uartTX_Buffer,"PROJET 3A - Chargeur MPPT");
 80005ec:	490e      	ldr	r1, [pc, #56]	; (8000628 <main+0x64>)
 80005ee:	480f      	ldr	r0, [pc, #60]	; (800062c <main+0x68>)
 80005f0:	f005 fe24 	bl	800623c <siprintf>
  HAL_UART_Transmit(&huart2, uartTX_Buffer, UARTTX_BUFFER_SIZE, HAL_MAX_DELAY);
 80005f4:	f04f 33ff 	mov.w	r3, #4294967295
 80005f8:	2240      	movs	r2, #64	; 0x40
 80005fa:	490c      	ldr	r1, [pc, #48]	; (800062c <main+0x68>)
 80005fc:	480c      	ldr	r0, [pc, #48]	; (8000630 <main+0x6c>)
 80005fe:	f004 ffd1 	bl	80055a4 <HAL_UART_Transmit>

  //Start TIM1&2
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000602:	2100      	movs	r1, #0
 8000604:	480b      	ldr	r0, [pc, #44]	; (8000634 <main+0x70>)
 8000606:	f003 ff05 	bl	8004414 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim2);
 800060a:	480b      	ldr	r0, [pc, #44]	; (8000638 <main+0x74>)
 800060c:	f003 fe3e 	bl	800428c <HAL_TIM_Base_Start>

  //Start ADC1&2 in DMA Mode triggered by TIM2
  HAL_ADC_Start_DMA(&hadc1, adc1Buffer, ADC_BUFFER_SIZE);
 8000610:	2203      	movs	r2, #3
 8000612:	490a      	ldr	r1, [pc, #40]	; (800063c <main+0x78>)
 8000614:	480a      	ldr	r0, [pc, #40]	; (8000640 <main+0x7c>)
 8000616:	f001 fa75 	bl	8001b04 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, adc2Buffer, ADC_BUFFER_SIZE);
 800061a:	2203      	movs	r2, #3
 800061c:	4909      	ldr	r1, [pc, #36]	; (8000644 <main+0x80>)
 800061e:	480a      	ldr	r0, [pc, #40]	; (8000648 <main+0x84>)
 8000620:	f001 fa70 	bl	8001b04 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000624:	e7fe      	b.n	8000624 <main+0x60>
 8000626:	bf00      	nop
 8000628:	08006b30 	.word	0x08006b30
 800062c:	2000034c 	.word	0x2000034c
 8000630:	200002bc 	.word	0x200002bc
 8000634:	20000224 	.word	0x20000224
 8000638:	20000270 	.word	0x20000270
 800063c:	2000038c 	.word	0x2000038c
 8000640:	2000008c 	.word	0x2000008c
 8000644:	20000398 	.word	0x20000398
 8000648:	200000f8 	.word	0x200000f8

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b094      	sub	sp, #80	; 0x50
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0318 	add.w	r3, r7, #24
 8000656:	2238      	movs	r2, #56	; 0x38
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f005 fde6 	bl	800622c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800066e:	2000      	movs	r0, #0
 8000670:	f002 fddc 	bl	800322c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000674:	2302      	movs	r3, #2
 8000676:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000678:	f44f 7380 	mov.w	r3, #256	; 0x100
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800067e:	2340      	movs	r3, #64	; 0x40
 8000680:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000682:	2302      	movs	r3, #2
 8000684:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000686:	2302      	movs	r3, #2
 8000688:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800068a:	2304      	movs	r3, #4
 800068c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800068e:	2355      	movs	r3, #85	; 0x55
 8000690:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000692:	2302      	movs	r3, #2
 8000694:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000696:	2302      	movs	r3, #2
 8000698:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800069a:	2302      	movs	r3, #2
 800069c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069e:	f107 0318 	add.w	r3, r7, #24
 80006a2:	4618      	mov	r0, r3
 80006a4:	f002 fe76 	bl	8003394 <HAL_RCC_OscConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006ae:	f000 fb39 	bl	8000d24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b2:	230f      	movs	r3, #15
 80006b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b6:	2303      	movs	r3, #3
 80006b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2104      	movs	r1, #4
 80006ca:	4618      	mov	r0, r3
 80006cc:	f003 f97a 	bl	80039c4 <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006d6:	f000 fb25 	bl	8000d24 <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	3750      	adds	r7, #80	; 0x50
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08c      	sub	sp, #48	; 0x30
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	2220      	movs	r2, #32
 80006fa:	2100      	movs	r1, #0
 80006fc:	4618      	mov	r0, r3
 80006fe:	f005 fd95 	bl	800622c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000702:	4b41      	ldr	r3, [pc, #260]	; (8000808 <MX_ADC1_Init+0x124>)
 8000704:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000708:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800070a:	4b3f      	ldr	r3, [pc, #252]	; (8000808 <MX_ADC1_Init+0x124>)
 800070c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000710:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000712:	4b3d      	ldr	r3, [pc, #244]	; (8000808 <MX_ADC1_Init+0x124>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000718:	4b3b      	ldr	r3, [pc, #236]	; (8000808 <MX_ADC1_Init+0x124>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800071e:	4b3a      	ldr	r3, [pc, #232]	; (8000808 <MX_ADC1_Init+0x124>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000724:	4b38      	ldr	r3, [pc, #224]	; (8000808 <MX_ADC1_Init+0x124>)
 8000726:	2201      	movs	r2, #1
 8000728:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800072a:	4b37      	ldr	r3, [pc, #220]	; (8000808 <MX_ADC1_Init+0x124>)
 800072c:	2204      	movs	r2, #4
 800072e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000730:	4b35      	ldr	r3, [pc, #212]	; (8000808 <MX_ADC1_Init+0x124>)
 8000732:	2200      	movs	r2, #0
 8000734:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000736:	4b34      	ldr	r3, [pc, #208]	; (8000808 <MX_ADC1_Init+0x124>)
 8000738:	2200      	movs	r2, #0
 800073a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 800073c:	4b32      	ldr	r3, [pc, #200]	; (8000808 <MX_ADC1_Init+0x124>)
 800073e:	2203      	movs	r2, #3
 8000740:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000742:	4b31      	ldr	r3, [pc, #196]	; (8000808 <MX_ADC1_Init+0x124>)
 8000744:	2200      	movs	r2, #0
 8000746:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 800074a:	4b2f      	ldr	r3, [pc, #188]	; (8000808 <MX_ADC1_Init+0x124>)
 800074c:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 8000750:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000752:	4b2d      	ldr	r3, [pc, #180]	; (8000808 <MX_ADC1_Init+0x124>)
 8000754:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000758:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800075a:	4b2b      	ldr	r3, [pc, #172]	; (8000808 <MX_ADC1_Init+0x124>)
 800075c:	2201      	movs	r2, #1
 800075e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000762:	4b29      	ldr	r3, [pc, #164]	; (8000808 <MX_ADC1_Init+0x124>)
 8000764:	2200      	movs	r2, #0
 8000766:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000768:	4b27      	ldr	r3, [pc, #156]	; (8000808 <MX_ADC1_Init+0x124>)
 800076a:	2200      	movs	r2, #0
 800076c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000770:	4825      	ldr	r0, [pc, #148]	; (8000808 <MX_ADC1_Init+0x124>)
 8000772:	f001 f83d 	bl	80017f0 <HAL_ADC_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 800077c:	f000 fad2 	bl	8000d24 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000780:	2300      	movs	r3, #0
 8000782:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000788:	4619      	mov	r1, r3
 800078a:	481f      	ldr	r0, [pc, #124]	; (8000808 <MX_ADC1_Init+0x124>)
 800078c:	f001 ff8e 	bl	80026ac <HAL_ADCEx_MultiModeConfigChannel>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000796:	f000 fac5 	bl	8000d24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800079a:	4b1c      	ldr	r3, [pc, #112]	; (800080c <MX_ADC1_Init+0x128>)
 800079c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800079e:	2306      	movs	r3, #6
 80007a0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007a6:	237f      	movs	r3, #127	; 0x7f
 80007a8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007aa:	2304      	movs	r3, #4
 80007ac:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	4619      	mov	r1, r3
 80007b6:	4814      	ldr	r0, [pc, #80]	; (8000808 <MX_ADC1_Init+0x124>)
 80007b8:	f001 fa6c 	bl	8001c94 <HAL_ADC_ConfigChannel>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80007c2:	f000 faaf 	bl	8000d24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80007c6:	4b12      	ldr	r3, [pc, #72]	; (8000810 <MX_ADC1_Init+0x12c>)
 80007c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007ca:	230c      	movs	r3, #12
 80007cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	4619      	mov	r1, r3
 80007d2:	480d      	ldr	r0, [pc, #52]	; (8000808 <MX_ADC1_Init+0x124>)
 80007d4:	f001 fa5e 	bl	8001c94 <HAL_ADC_ConfigChannel>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80007de:	f000 faa1 	bl	8000d24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MX_ADC1_Init+0x130>)
 80007e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80007e6:	2312      	movs	r3, #18
 80007e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	4619      	mov	r1, r3
 80007ee:	4806      	ldr	r0, [pc, #24]	; (8000808 <MX_ADC1_Init+0x124>)
 80007f0:	f001 fa50 	bl	8001c94 <HAL_ADC_ConfigChannel>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 80007fa:	f000 fa93 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	3730      	adds	r7, #48	; 0x30
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	2000008c 	.word	0x2000008c
 800080c:	04300002 	.word	0x04300002
 8000810:	14f00020 	.word	0x14f00020
 8000814:	19200040 	.word	0x19200040

08000818 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b088      	sub	sp, #32
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800081e:	463b      	mov	r3, r7
 8000820:	2220      	movs	r2, #32
 8000822:	2100      	movs	r1, #0
 8000824:	4618      	mov	r0, r3
 8000826:	f005 fd01 	bl	800622c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800082a:	4b3a      	ldr	r3, [pc, #232]	; (8000914 <MX_ADC2_Init+0xfc>)
 800082c:	4a3a      	ldr	r2, [pc, #232]	; (8000918 <MX_ADC2_Init+0x100>)
 800082e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000830:	4b38      	ldr	r3, [pc, #224]	; (8000914 <MX_ADC2_Init+0xfc>)
 8000832:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000836:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000838:	4b36      	ldr	r3, [pc, #216]	; (8000914 <MX_ADC2_Init+0xfc>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800083e:	4b35      	ldr	r3, [pc, #212]	; (8000914 <MX_ADC2_Init+0xfc>)
 8000840:	2200      	movs	r2, #0
 8000842:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000844:	4b33      	ldr	r3, [pc, #204]	; (8000914 <MX_ADC2_Init+0xfc>)
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084a:	4b32      	ldr	r3, [pc, #200]	; (8000914 <MX_ADC2_Init+0xfc>)
 800084c:	2201      	movs	r2, #1
 800084e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000850:	4b30      	ldr	r3, [pc, #192]	; (8000914 <MX_ADC2_Init+0xfc>)
 8000852:	2204      	movs	r2, #4
 8000854:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000856:	4b2f      	ldr	r3, [pc, #188]	; (8000914 <MX_ADC2_Init+0xfc>)
 8000858:	2200      	movs	r2, #0
 800085a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800085c:	4b2d      	ldr	r3, [pc, #180]	; (8000914 <MX_ADC2_Init+0xfc>)
 800085e:	2200      	movs	r2, #0
 8000860:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 3;
 8000862:	4b2c      	ldr	r3, [pc, #176]	; (8000914 <MX_ADC2_Init+0xfc>)
 8000864:	2203      	movs	r2, #3
 8000866:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000868:	4b2a      	ldr	r3, [pc, #168]	; (8000914 <MX_ADC2_Init+0xfc>)
 800086a:	2200      	movs	r2, #0
 800086c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8000870:	4b28      	ldr	r3, [pc, #160]	; (8000914 <MX_ADC2_Init+0xfc>)
 8000872:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 8000876:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000878:	4b26      	ldr	r3, [pc, #152]	; (8000914 <MX_ADC2_Init+0xfc>)
 800087a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800087e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000880:	4b24      	ldr	r3, [pc, #144]	; (8000914 <MX_ADC2_Init+0xfc>)
 8000882:	2201      	movs	r2, #1
 8000884:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000888:	4b22      	ldr	r3, [pc, #136]	; (8000914 <MX_ADC2_Init+0xfc>)
 800088a:	2200      	movs	r2, #0
 800088c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800088e:	4b21      	ldr	r3, [pc, #132]	; (8000914 <MX_ADC2_Init+0xfc>)
 8000890:	2200      	movs	r2, #0
 8000892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000896:	481f      	ldr	r0, [pc, #124]	; (8000914 <MX_ADC2_Init+0xfc>)
 8000898:	f000 ffaa 	bl	80017f0 <HAL_ADC_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80008a2:	f000 fa3f 	bl	8000d24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80008a6:	4b1d      	ldr	r3, [pc, #116]	; (800091c <MX_ADC2_Init+0x104>)
 80008a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008aa:	2306      	movs	r3, #6
 80008ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b2:	237f      	movs	r3, #127	; 0x7f
 80008b4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008b6:	2304      	movs	r3, #4
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008be:	463b      	mov	r3, r7
 80008c0:	4619      	mov	r1, r3
 80008c2:	4814      	ldr	r0, [pc, #80]	; (8000914 <MX_ADC2_Init+0xfc>)
 80008c4:	f001 f9e6 	bl	8001c94 <HAL_ADC_ConfigChannel>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80008ce:	f000 fa29 	bl	8000d24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80008d2:	4b13      	ldr	r3, [pc, #76]	; (8000920 <MX_ADC2_Init+0x108>)
 80008d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008d6:	230c      	movs	r3, #12
 80008d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008da:	463b      	mov	r3, r7
 80008dc:	4619      	mov	r1, r3
 80008de:	480d      	ldr	r0, [pc, #52]	; (8000914 <MX_ADC2_Init+0xfc>)
 80008e0:	f001 f9d8 	bl	8001c94 <HAL_ADC_ConfigChannel>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 80008ea:	f000 fa1b 	bl	8000d24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80008ee:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <MX_ADC2_Init+0x10c>)
 80008f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008f2:	2312      	movs	r3, #18
 80008f4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008f6:	463b      	mov	r3, r7
 80008f8:	4619      	mov	r1, r3
 80008fa:	4806      	ldr	r0, [pc, #24]	; (8000914 <MX_ADC2_Init+0xfc>)
 80008fc:	f001 f9ca 	bl	8001c94 <HAL_ADC_ConfigChannel>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_ADC2_Init+0xf2>
  {
    Error_Handler();
 8000906:	f000 fa0d 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	3720      	adds	r7, #32
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200000f8 	.word	0x200000f8
 8000918:	50000100 	.word	0x50000100
 800091c:	08600004 	.word	0x08600004
 8000920:	0c900008 	.word	0x0c900008
 8000924:	10c00010 	.word	0x10c00010

08000928 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b09c      	sub	sp, #112	; 0x70
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800092e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000948:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
 8000958:	615a      	str	r2, [r3, #20]
 800095a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	2234      	movs	r2, #52	; 0x34
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f005 fc62 	bl	800622c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000968:	4b45      	ldr	r3, [pc, #276]	; (8000a80 <MX_TIM1_Init+0x158>)
 800096a:	4a46      	ldr	r2, [pc, #280]	; (8000a84 <MX_TIM1_Init+0x15c>)
 800096c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800096e:	4b44      	ldr	r3, [pc, #272]	; (8000a80 <MX_TIM1_Init+0x158>)
 8000970:	2200      	movs	r2, #0
 8000972:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000974:	4b42      	ldr	r3, [pc, #264]	; (8000a80 <MX_TIM1_Init+0x158>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 17199;
 800097a:	4b41      	ldr	r3, [pc, #260]	; (8000a80 <MX_TIM1_Init+0x158>)
 800097c:	f244 322f 	movw	r2, #17199	; 0x432f
 8000980:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000982:	4b3f      	ldr	r3, [pc, #252]	; (8000a80 <MX_TIM1_Init+0x158>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000988:	4b3d      	ldr	r3, [pc, #244]	; (8000a80 <MX_TIM1_Init+0x158>)
 800098a:	2200      	movs	r2, #0
 800098c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098e:	4b3c      	ldr	r3, [pc, #240]	; (8000a80 <MX_TIM1_Init+0x158>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000994:	483a      	ldr	r0, [pc, #232]	; (8000a80 <MX_TIM1_Init+0x158>)
 8000996:	f003 fc21 	bl	80041dc <HAL_TIM_Base_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80009a0:	f000 f9c0 	bl	8000d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a8:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009aa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80009ae:	4619      	mov	r1, r3
 80009b0:	4833      	ldr	r0, [pc, #204]	; (8000a80 <MX_TIM1_Init+0x158>)
 80009b2:	f003 ff43 	bl	800483c <HAL_TIM_ConfigClockSource>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80009bc:	f000 f9b2 	bl	8000d24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009c0:	482f      	ldr	r0, [pc, #188]	; (8000a80 <MX_TIM1_Init+0x158>)
 80009c2:	f003 fcc5 	bl	8004350 <HAL_TIM_PWM_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80009cc:	f000 f9aa 	bl	8000d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d0:	2300      	movs	r3, #0
 80009d2:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009d4:	2300      	movs	r3, #0
 80009d6:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d8:	2300      	movs	r3, #0
 80009da:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009e0:	4619      	mov	r1, r3
 80009e2:	4827      	ldr	r0, [pc, #156]	; (8000a80 <MX_TIM1_Init+0x158>)
 80009e4:	f004 fc6c 	bl	80052c0 <HAL_TIMEx_MasterConfigSynchronization>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80009ee:	f000 f999 	bl	8000d24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009f2:	2360      	movs	r3, #96	; 0x60
 80009f4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009fa:	2300      	movs	r3, #0
 80009fc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009fe:	2300      	movs	r3, #0
 8000a00:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a02:	2300      	movs	r3, #0
 8000a04:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a06:	2300      	movs	r3, #0
 8000a08:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a0e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a12:	2200      	movs	r2, #0
 8000a14:	4619      	mov	r1, r3
 8000a16:	481a      	ldr	r0, [pc, #104]	; (8000a80 <MX_TIM1_Init+0x158>)
 8000a18:	f003 fdfc 	bl	8004614 <HAL_TIM_PWM_ConfigChannel>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000a22:	f000 f97f 	bl	8000d24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a3e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a44:	2300      	movs	r3, #0
 8000a46:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a50:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000a56:	2300      	movs	r3, #0
 8000a58:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	4619      	mov	r1, r3
 8000a62:	4807      	ldr	r0, [pc, #28]	; (8000a80 <MX_TIM1_Init+0x158>)
 8000a64:	f004 fcae 	bl	80053c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8000a6e:	f000 f959 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a72:	4803      	ldr	r0, [pc, #12]	; (8000a80 <MX_TIM1_Init+0x158>)
 8000a74:	f000 faea 	bl	800104c <HAL_TIM_MspPostInit>

}
 8000a78:	bf00      	nop
 8000a7a:	3770      	adds	r7, #112	; 0x70
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000224 	.word	0x20000224
 8000a84:	40012c00 	.word	0x40012c00

08000a88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a8e:	f107 0310 	add.w	r3, r7, #16
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000aa6:	4b1e      	ldr	r3, [pc, #120]	; (8000b20 <MX_TIM2_Init+0x98>)
 8000aa8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000aae:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <MX_TIM2_Init+0x98>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab4:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <MX_TIM2_Init+0x98>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 17199;
 8000aba:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <MX_TIM2_Init+0x98>)
 8000abc:	f244 322f 	movw	r2, #17199	; 0x432f
 8000ac0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac2:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <MX_TIM2_Init+0x98>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac8:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <MX_TIM2_Init+0x98>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ace:	4814      	ldr	r0, [pc, #80]	; (8000b20 <MX_TIM2_Init+0x98>)
 8000ad0:	f003 fb84 	bl	80041dc <HAL_TIM_Base_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000ada:	f000 f923 	bl	8000d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ade:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ae4:	f107 0310 	add.w	r3, r7, #16
 8000ae8:	4619      	mov	r1, r3
 8000aea:	480d      	ldr	r0, [pc, #52]	; (8000b20 <MX_TIM2_Init+0x98>)
 8000aec:	f003 fea6 	bl	800483c <HAL_TIM_ConfigClockSource>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000af6:	f000 f915 	bl	8000d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000afa:	2320      	movs	r3, #32
 8000afc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000afe:	2380      	movs	r3, #128	; 0x80
 8000b00:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	4619      	mov	r1, r3
 8000b06:	4806      	ldr	r0, [pc, #24]	; (8000b20 <MX_TIM2_Init+0x98>)
 8000b08:	f004 fbda 	bl	80052c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000b12:	f000 f907 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b16:	bf00      	nop
 8000b18:	3720      	adds	r7, #32
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000270 	.word	0x20000270

08000b24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b28:	4b22      	ldr	r3, [pc, #136]	; (8000bb4 <MX_USART2_UART_Init+0x90>)
 8000b2a:	4a23      	ldr	r2, [pc, #140]	; (8000bb8 <MX_USART2_UART_Init+0x94>)
 8000b2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b2e:	4b21      	ldr	r3, [pc, #132]	; (8000bb4 <MX_USART2_UART_Init+0x90>)
 8000b30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b36:	4b1f      	ldr	r3, [pc, #124]	; (8000bb4 <MX_USART2_UART_Init+0x90>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b3c:	4b1d      	ldr	r3, [pc, #116]	; (8000bb4 <MX_USART2_UART_Init+0x90>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b42:	4b1c      	ldr	r3, [pc, #112]	; (8000bb4 <MX_USART2_UART_Init+0x90>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b48:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <MX_USART2_UART_Init+0x90>)
 8000b4a:	220c      	movs	r2, #12
 8000b4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4e:	4b19      	ldr	r3, [pc, #100]	; (8000bb4 <MX_USART2_UART_Init+0x90>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b54:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <MX_USART2_UART_Init+0x90>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b5a:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <MX_USART2_UART_Init+0x90>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b60:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <MX_USART2_UART_Init+0x90>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b66:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <MX_USART2_UART_Init+0x90>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b6c:	4811      	ldr	r0, [pc, #68]	; (8000bb4 <MX_USART2_UART_Init+0x90>)
 8000b6e:	f004 fcc9 	bl	8005504 <HAL_UART_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b78:	f000 f8d4 	bl	8000d24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	480d      	ldr	r0, [pc, #52]	; (8000bb4 <MX_USART2_UART_Init+0x90>)
 8000b80:	f005 fa60 	bl	8006044 <HAL_UARTEx_SetTxFifoThreshold>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000b8a:	f000 f8cb 	bl	8000d24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b8e:	2100      	movs	r1, #0
 8000b90:	4808      	ldr	r0, [pc, #32]	; (8000bb4 <MX_USART2_UART_Init+0x90>)
 8000b92:	f005 fa95 	bl	80060c0 <HAL_UARTEx_SetRxFifoThreshold>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b9c:	f000 f8c2 	bl	8000d24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ba0:	4804      	ldr	r0, [pc, #16]	; (8000bb4 <MX_USART2_UART_Init+0x90>)
 8000ba2:	f005 fa16 	bl	8005fd2 <HAL_UARTEx_DisableFifoMode>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000bac:	f000 f8ba 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	200002bc 	.word	0x200002bc
 8000bb8:	40004400 	.word	0x40004400

08000bbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000bc2:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <MX_DMA_Init+0x60>)
 8000bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bc6:	4a15      	ldr	r2, [pc, #84]	; (8000c1c <MX_DMA_Init+0x60>)
 8000bc8:	f043 0304 	orr.w	r3, r3, #4
 8000bcc:	6493      	str	r3, [r2, #72]	; 0x48
 8000bce:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <MX_DMA_Init+0x60>)
 8000bd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bd2:	f003 0304 	and.w	r3, r3, #4
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <MX_DMA_Init+0x60>)
 8000bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bde:	4a0f      	ldr	r2, [pc, #60]	; (8000c1c <MX_DMA_Init+0x60>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6493      	str	r3, [r2, #72]	; 0x48
 8000be6:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <MX_DMA_Init+0x60>)
 8000be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	200b      	movs	r0, #11
 8000bf8:	f001 fed7 	bl	80029aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000bfc:	200b      	movs	r0, #11
 8000bfe:	f001 feee 	bl	80029de <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2100      	movs	r1, #0
 8000c06:	200c      	movs	r0, #12
 8000c08:	f001 fecf 	bl	80029aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000c0c:	200c      	movs	r0, #12
 8000c0e:	f001 fee6 	bl	80029de <HAL_NVIC_EnableIRQ>

}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40021000 	.word	0x40021000

08000c20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	; 0x28
 8000c24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
 8000c34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c36:	4b2b      	ldr	r3, [pc, #172]	; (8000ce4 <MX_GPIO_Init+0xc4>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3a:	4a2a      	ldr	r2, [pc, #168]	; (8000ce4 <MX_GPIO_Init+0xc4>)
 8000c3c:	f043 0304 	orr.w	r3, r3, #4
 8000c40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c42:	4b28      	ldr	r3, [pc, #160]	; (8000ce4 <MX_GPIO_Init+0xc4>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c46:	f003 0304 	and.w	r3, r3, #4
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c4e:	4b25      	ldr	r3, [pc, #148]	; (8000ce4 <MX_GPIO_Init+0xc4>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c52:	4a24      	ldr	r2, [pc, #144]	; (8000ce4 <MX_GPIO_Init+0xc4>)
 8000c54:	f043 0320 	orr.w	r3, r3, #32
 8000c58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c5a:	4b22      	ldr	r3, [pc, #136]	; (8000ce4 <MX_GPIO_Init+0xc4>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5e:	f003 0320 	and.w	r3, r3, #32
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c66:	4b1f      	ldr	r3, [pc, #124]	; (8000ce4 <MX_GPIO_Init+0xc4>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6a:	4a1e      	ldr	r2, [pc, #120]	; (8000ce4 <MX_GPIO_Init+0xc4>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c72:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <MX_GPIO_Init+0xc4>)
 8000c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	60bb      	str	r3, [r7, #8]
 8000c7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7e:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <MX_GPIO_Init+0xc4>)
 8000c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c82:	4a18      	ldr	r2, [pc, #96]	; (8000ce4 <MX_GPIO_Init+0xc4>)
 8000c84:	f043 0302 	orr.w	r3, r3, #2
 8000c88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <MX_GPIO_Init+0xc4>)
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2120      	movs	r1, #32
 8000c9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c9e:	f002 faad 	bl	80031fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ca2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ca6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ca8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	480b      	ldr	r0, [pc, #44]	; (8000ce8 <MX_GPIO_Init+0xc8>)
 8000cba:	f002 f91d 	bl	8002ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cbe:	2320      	movs	r3, #32
 8000cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd8:	f002 f90e 	bl	8002ef8 <HAL_GPIO_Init>

}
 8000cdc:	bf00      	nop
 8000cde:	3728      	adds	r7, #40	; 0x28
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	48000800 	.word	0x48000800

08000cec <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

//ADC_Conversion complete callback
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  if (hadc == &hadc1)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a08      	ldr	r2, [pc, #32]	; (8000d18 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d103      	bne.n	8000d04 <HAL_ADC_ConvCpltCallback+0x18>
  {
	  adc1flag=1;
 8000cfc:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <HAL_ADC_ConvCpltCallback+0x30>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	601a      	str	r2, [r3, #0]
  }
  else{
	  adc2flag=1;
  }
}
 8000d02:	e002      	b.n	8000d0a <HAL_ADC_ConvCpltCallback+0x1e>
	  adc2flag=1;
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_ADC_ConvCpltCallback+0x34>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	601a      	str	r2, [r3, #0]
}
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	2000008c 	.word	0x2000008c
 8000d1c:	200003a4 	.word	0x200003a4
 8000d20:	200003a8 	.word	0x200003a8

08000d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d28:	b672      	cpsid	i
}
 8000d2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <Error_Handler+0x8>
	...

08000d30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d36:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <HAL_MspInit+0x44>)
 8000d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d3a:	4a0e      	ldr	r2, [pc, #56]	; (8000d74 <HAL_MspInit+0x44>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6613      	str	r3, [r2, #96]	; 0x60
 8000d42:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <HAL_MspInit+0x44>)
 8000d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4e:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <HAL_MspInit+0x44>)
 8000d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d52:	4a08      	ldr	r2, [pc, #32]	; (8000d74 <HAL_MspInit+0x44>)
 8000d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d58:	6593      	str	r3, [r2, #88]	; 0x58
 8000d5a:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <HAL_MspInit+0x44>)
 8000d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d62:	603b      	str	r3, [r7, #0]
 8000d64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d66:	f002 fb05 	bl	8003374 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40021000 	.word	0x40021000

08000d78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b09e      	sub	sp, #120	; 0x78
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d90:	f107 0320 	add.w	r3, r7, #32
 8000d94:	2244      	movs	r2, #68	; 0x44
 8000d96:	2100      	movs	r1, #0
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f005 fa47 	bl	800622c <memset>
  if(hadc->Instance==ADC1)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000da6:	f040 809b 	bne.w	8000ee0 <HAL_ADC_MspInit+0x168>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dae:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000db0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000db4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db6:	f107 0320 	add.w	r3, r7, #32
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f003 f81e 	bl	8003dfc <HAL_RCCEx_PeriphCLKConfig>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000dc6:	f7ff ffad 	bl	8000d24 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000dca:	4b7e      	ldr	r3, [pc, #504]	; (8000fc4 <HAL_ADC_MspInit+0x24c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	4a7c      	ldr	r2, [pc, #496]	; (8000fc4 <HAL_ADC_MspInit+0x24c>)
 8000dd2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000dd4:	4b7b      	ldr	r3, [pc, #492]	; (8000fc4 <HAL_ADC_MspInit+0x24c>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d10b      	bne.n	8000df4 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ddc:	4b7a      	ldr	r3, [pc, #488]	; (8000fc8 <HAL_ADC_MspInit+0x250>)
 8000dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de0:	4a79      	ldr	r2, [pc, #484]	; (8000fc8 <HAL_ADC_MspInit+0x250>)
 8000de2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000de6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de8:	4b77      	ldr	r3, [pc, #476]	; (8000fc8 <HAL_ADC_MspInit+0x250>)
 8000dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000df0:	61fb      	str	r3, [r7, #28]
 8000df2:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df4:	4b74      	ldr	r3, [pc, #464]	; (8000fc8 <HAL_ADC_MspInit+0x250>)
 8000df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df8:	4a73      	ldr	r2, [pc, #460]	; (8000fc8 <HAL_ADC_MspInit+0x250>)
 8000dfa:	f043 0304 	orr.w	r3, r3, #4
 8000dfe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e00:	4b71      	ldr	r3, [pc, #452]	; (8000fc8 <HAL_ADC_MspInit+0x250>)
 8000e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e04:	f003 0304 	and.w	r3, r3, #4
 8000e08:	61bb      	str	r3, [r7, #24]
 8000e0a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0c:	4b6e      	ldr	r3, [pc, #440]	; (8000fc8 <HAL_ADC_MspInit+0x250>)
 8000e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e10:	4a6d      	ldr	r2, [pc, #436]	; (8000fc8 <HAL_ADC_MspInit+0x250>)
 8000e12:	f043 0301 	orr.w	r3, r3, #1
 8000e16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e18:	4b6b      	ldr	r3, [pc, #428]	; (8000fc8 <HAL_ADC_MspInit+0x250>)
 8000e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	617b      	str	r3, [r7, #20]
 8000e22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e24:	4b68      	ldr	r3, [pc, #416]	; (8000fc8 <HAL_ADC_MspInit+0x250>)
 8000e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e28:	4a67      	ldr	r2, [pc, #412]	; (8000fc8 <HAL_ADC_MspInit+0x250>)
 8000e2a:	f043 0302 	orr.w	r3, r3, #2
 8000e2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e30:	4b65      	ldr	r3, [pc, #404]	; (8000fc8 <HAL_ADC_MspInit+0x250>)
 8000e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e34:	f003 0302 	and.w	r3, r3, #2
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PA0     ------> ADC1_IN1
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = IBat2_Pin;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e40:	2303      	movs	r3, #3
 8000e42:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(IBat2_GPIO_Port, &GPIO_InitStruct);
 8000e48:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	485f      	ldr	r0, [pc, #380]	; (8000fcc <HAL_ADC_MspInit+0x254>)
 8000e50:	f002 f852 	bl	8002ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Ipan_Pin;
 8000e54:	2301      	movs	r3, #1
 8000e56:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(Ipan_GPIO_Port, &GPIO_InitStruct);
 8000e60:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e64:	4619      	mov	r1, r3
 8000e66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6a:	f002 f845 	bl	8002ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IBat1_Pin;
 8000e6e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e72:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e74:	2303      	movs	r3, #3
 8000e76:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(IBat1_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e80:	4619      	mov	r1, r3
 8000e82:	4853      	ldr	r0, [pc, #332]	; (8000fd0 <HAL_ADC_MspInit+0x258>)
 8000e84:	f002 f838 	bl	8002ef8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e88:	4b52      	ldr	r3, [pc, #328]	; (8000fd4 <HAL_ADC_MspInit+0x25c>)
 8000e8a:	4a53      	ldr	r2, [pc, #332]	; (8000fd8 <HAL_ADC_MspInit+0x260>)
 8000e8c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000e8e:	4b51      	ldr	r3, [pc, #324]	; (8000fd4 <HAL_ADC_MspInit+0x25c>)
 8000e90:	2205      	movs	r2, #5
 8000e92:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e94:	4b4f      	ldr	r3, [pc, #316]	; (8000fd4 <HAL_ADC_MspInit+0x25c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e9a:	4b4e      	ldr	r3, [pc, #312]	; (8000fd4 <HAL_ADC_MspInit+0x25c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ea0:	4b4c      	ldr	r3, [pc, #304]	; (8000fd4 <HAL_ADC_MspInit+0x25c>)
 8000ea2:	2280      	movs	r2, #128	; 0x80
 8000ea4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ea6:	4b4b      	ldr	r3, [pc, #300]	; (8000fd4 <HAL_ADC_MspInit+0x25c>)
 8000ea8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000eae:	4b49      	ldr	r3, [pc, #292]	; (8000fd4 <HAL_ADC_MspInit+0x25c>)
 8000eb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000eb4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000eb6:	4b47      	ldr	r3, [pc, #284]	; (8000fd4 <HAL_ADC_MspInit+0x25c>)
 8000eb8:	2220      	movs	r2, #32
 8000eba:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ebc:	4b45      	ldr	r3, [pc, #276]	; (8000fd4 <HAL_ADC_MspInit+0x25c>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ec2:	4844      	ldr	r0, [pc, #272]	; (8000fd4 <HAL_ADC_MspInit+0x25c>)
 8000ec4:	f001 fda6 	bl	8002a14 <HAL_DMA_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <HAL_ADC_MspInit+0x15a>
    {
      Error_Handler();
 8000ece:	f7ff ff29 	bl	8000d24 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a3f      	ldr	r2, [pc, #252]	; (8000fd4 <HAL_ADC_MspInit+0x25c>)
 8000ed6:	655a      	str	r2, [r3, #84]	; 0x54
 8000ed8:	4a3e      	ldr	r2, [pc, #248]	; (8000fd4 <HAL_ADC_MspInit+0x25c>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000ede:	e06d      	b.n	8000fbc <HAL_ADC_MspInit+0x244>
  else if(hadc->Instance==ADC2)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a3d      	ldr	r2, [pc, #244]	; (8000fdc <HAL_ADC_MspInit+0x264>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d168      	bne.n	8000fbc <HAL_ADC_MspInit+0x244>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000eee:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000ef0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ef6:	f107 0320 	add.w	r3, r7, #32
 8000efa:	4618      	mov	r0, r3
 8000efc:	f002 ff7e 	bl	8003dfc <HAL_RCCEx_PeriphCLKConfig>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <HAL_ADC_MspInit+0x192>
      Error_Handler();
 8000f06:	f7ff ff0d 	bl	8000d24 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f0a:	4b2e      	ldr	r3, [pc, #184]	; (8000fc4 <HAL_ADC_MspInit+0x24c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	4a2c      	ldr	r2, [pc, #176]	; (8000fc4 <HAL_ADC_MspInit+0x24c>)
 8000f12:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f14:	4b2b      	ldr	r3, [pc, #172]	; (8000fc4 <HAL_ADC_MspInit+0x24c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d10b      	bne.n	8000f34 <HAL_ADC_MspInit+0x1bc>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000f1c:	4b2a      	ldr	r3, [pc, #168]	; (8000fc8 <HAL_ADC_MspInit+0x250>)
 8000f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f20:	4a29      	ldr	r2, [pc, #164]	; (8000fc8 <HAL_ADC_MspInit+0x250>)
 8000f22:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f28:	4b27      	ldr	r3, [pc, #156]	; (8000fc8 <HAL_ADC_MspInit+0x250>)
 8000f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f34:	4b24      	ldr	r3, [pc, #144]	; (8000fc8 <HAL_ADC_MspInit+0x250>)
 8000f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f38:	4a23      	ldr	r2, [pc, #140]	; (8000fc8 <HAL_ADC_MspInit+0x250>)
 8000f3a:	f043 0301 	orr.w	r3, r3, #1
 8000f3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f40:	4b21      	ldr	r3, [pc, #132]	; (8000fc8 <HAL_ADC_MspInit+0x250>)
 8000f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f44:	f003 0301 	and.w	r3, r3, #1
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Vpan_Pin|Vbat1_Pin|Vbat2_Pin;
 8000f4c:	23c2      	movs	r3, #194	; 0xc2
 8000f4e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f50:	2303      	movs	r3, #3
 8000f52:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f58:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f62:	f001 ffc9 	bl	8002ef8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8000f66:	4b1e      	ldr	r3, [pc, #120]	; (8000fe0 <HAL_ADC_MspInit+0x268>)
 8000f68:	4a1e      	ldr	r2, [pc, #120]	; (8000fe4 <HAL_ADC_MspInit+0x26c>)
 8000f6a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000f6c:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <HAL_ADC_MspInit+0x268>)
 8000f6e:	2224      	movs	r2, #36	; 0x24
 8000f70:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f72:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <HAL_ADC_MspInit+0x268>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f78:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <HAL_ADC_MspInit+0x268>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000f7e:	4b18      	ldr	r3, [pc, #96]	; (8000fe0 <HAL_ADC_MspInit+0x268>)
 8000f80:	2280      	movs	r2, #128	; 0x80
 8000f82:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f84:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <HAL_ADC_MspInit+0x268>)
 8000f86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f8a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f8c:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <HAL_ADC_MspInit+0x268>)
 8000f8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f92:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <HAL_ADC_MspInit+0x268>)
 8000f96:	2220      	movs	r2, #32
 8000f98:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000f9a:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <HAL_ADC_MspInit+0x268>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000fa0:	480f      	ldr	r0, [pc, #60]	; (8000fe0 <HAL_ADC_MspInit+0x268>)
 8000fa2:	f001 fd37 	bl	8002a14 <HAL_DMA_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <HAL_ADC_MspInit+0x238>
      Error_Handler();
 8000fac:	f7ff feba 	bl	8000d24 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a0b      	ldr	r2, [pc, #44]	; (8000fe0 <HAL_ADC_MspInit+0x268>)
 8000fb4:	655a      	str	r2, [r3, #84]	; 0x54
 8000fb6:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <HAL_ADC_MspInit+0x268>)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000fbc:	bf00      	nop
 8000fbe:	3778      	adds	r7, #120	; 0x78
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	200003ac 	.word	0x200003ac
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	48000800 	.word	0x48000800
 8000fd0:	48000400 	.word	0x48000400
 8000fd4:	20000164 	.word	0x20000164
 8000fd8:	40020008 	.word	0x40020008
 8000fdc:	50000100 	.word	0x50000100
 8000fe0:	200001c4 	.word	0x200001c4
 8000fe4:	4002001c 	.word	0x4002001c

08000fe8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a13      	ldr	r2, [pc, #76]	; (8001044 <HAL_TIM_Base_MspInit+0x5c>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d10c      	bne.n	8001014 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ffa:	4b13      	ldr	r3, [pc, #76]	; (8001048 <HAL_TIM_Base_MspInit+0x60>)
 8000ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ffe:	4a12      	ldr	r2, [pc, #72]	; (8001048 <HAL_TIM_Base_MspInit+0x60>)
 8001000:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001004:	6613      	str	r3, [r2, #96]	; 0x60
 8001006:	4b10      	ldr	r3, [pc, #64]	; (8001048 <HAL_TIM_Base_MspInit+0x60>)
 8001008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800100a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001012:	e010      	b.n	8001036 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800101c:	d10b      	bne.n	8001036 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800101e:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <HAL_TIM_Base_MspInit+0x60>)
 8001020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001022:	4a09      	ldr	r2, [pc, #36]	; (8001048 <HAL_TIM_Base_MspInit+0x60>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6593      	str	r3, [r2, #88]	; 0x58
 800102a:	4b07      	ldr	r3, [pc, #28]	; (8001048 <HAL_TIM_Base_MspInit+0x60>)
 800102c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]
}
 8001036:	bf00      	nop
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	40012c00 	.word	0x40012c00
 8001048:	40021000 	.word	0x40021000

0800104c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a12      	ldr	r2, [pc, #72]	; (80010b4 <HAL_TIM_MspPostInit+0x68>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d11d      	bne.n	80010aa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106e:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <HAL_TIM_MspPostInit+0x6c>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001072:	4a11      	ldr	r2, [pc, #68]	; (80010b8 <HAL_TIM_MspPostInit+0x6c>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107a:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <HAL_TIM_MspPostInit+0x6c>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001086:	f44f 7380 	mov.w	r3, #256	; 0x100
 800108a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	2302      	movs	r3, #2
 800108e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001094:	2300      	movs	r3, #0
 8001096:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001098:	2306      	movs	r3, #6
 800109a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	4619      	mov	r1, r3
 80010a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a6:	f001 ff27 	bl	8002ef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80010aa:	bf00      	nop
 80010ac:	3720      	adds	r7, #32
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40012c00 	.word	0x40012c00
 80010b8:	40021000 	.word	0x40021000

080010bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b09a      	sub	sp, #104	; 0x68
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010d4:	f107 0310 	add.w	r3, r7, #16
 80010d8:	2244      	movs	r2, #68	; 0x44
 80010da:	2100      	movs	r1, #0
 80010dc:	4618      	mov	r0, r3
 80010de:	f005 f8a5 	bl	800622c <memset>
  if(huart->Instance==USART2)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a1f      	ldr	r2, [pc, #124]	; (8001164 <HAL_UART_MspInit+0xa8>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d136      	bne.n	800115a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010ec:	2302      	movs	r3, #2
 80010ee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010f4:	f107 0310 	add.w	r3, r7, #16
 80010f8:	4618      	mov	r0, r3
 80010fa:	f002 fe7f 	bl	8003dfc <HAL_RCCEx_PeriphCLKConfig>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001104:	f7ff fe0e 	bl	8000d24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001108:	4b17      	ldr	r3, [pc, #92]	; (8001168 <HAL_UART_MspInit+0xac>)
 800110a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110c:	4a16      	ldr	r2, [pc, #88]	; (8001168 <HAL_UART_MspInit+0xac>)
 800110e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001112:	6593      	str	r3, [r2, #88]	; 0x58
 8001114:	4b14      	ldr	r3, [pc, #80]	; (8001168 <HAL_UART_MspInit+0xac>)
 8001116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001120:	4b11      	ldr	r3, [pc, #68]	; (8001168 <HAL_UART_MspInit+0xac>)
 8001122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001124:	4a10      	ldr	r2, [pc, #64]	; (8001168 <HAL_UART_MspInit+0xac>)
 8001126:	f043 0301 	orr.w	r3, r3, #1
 800112a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112c:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <HAL_UART_MspInit+0xac>)
 800112e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001138:	230c      	movs	r3, #12
 800113a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001148:	2307      	movs	r3, #7
 800114a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001150:	4619      	mov	r1, r3
 8001152:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001156:	f001 fecf 	bl	8002ef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800115a:	bf00      	nop
 800115c:	3768      	adds	r7, #104	; 0x68
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40004400 	.word	0x40004400
 8001168:	40021000 	.word	0x40021000

0800116c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001170:	e7fe      	b.n	8001170 <NMI_Handler+0x4>

08001172 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001176:	e7fe      	b.n	8001176 <HardFault_Handler+0x4>

08001178 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800117c:	e7fe      	b.n	800117c <MemManage_Handler+0x4>

0800117e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001182:	e7fe      	b.n	8001182 <BusFault_Handler+0x4>

08001184 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001188:	e7fe      	b.n	8001188 <UsageFault_Handler+0x4>

0800118a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011b8:	f000 f8da 	bl	8001370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011bc:	bf00      	nop
 80011be:	bd80      	pop	{r7, pc}

080011c0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80011c4:	4802      	ldr	r0, [pc, #8]	; (80011d0 <DMA1_Channel1_IRQHandler+0x10>)
 80011c6:	f001 fd48 	bl	8002c5a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000164 	.word	0x20000164

080011d4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <DMA1_Channel2_IRQHandler+0x10>)
 80011da:	f001 fd3e 	bl	8002c5a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200001c4 	.word	0x200001c4

080011e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011f0:	4a14      	ldr	r2, [pc, #80]	; (8001244 <_sbrk+0x5c>)
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <_sbrk+0x60>)
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011fc:	4b13      	ldr	r3, [pc, #76]	; (800124c <_sbrk+0x64>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d102      	bne.n	800120a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001204:	4b11      	ldr	r3, [pc, #68]	; (800124c <_sbrk+0x64>)
 8001206:	4a12      	ldr	r2, [pc, #72]	; (8001250 <_sbrk+0x68>)
 8001208:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800120a:	4b10      	ldr	r3, [pc, #64]	; (800124c <_sbrk+0x64>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	429a      	cmp	r2, r3
 8001216:	d207      	bcs.n	8001228 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001218:	f004 ffde 	bl	80061d8 <__errno>
 800121c:	4603      	mov	r3, r0
 800121e:	220c      	movs	r2, #12
 8001220:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001222:	f04f 33ff 	mov.w	r3, #4294967295
 8001226:	e009      	b.n	800123c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <_sbrk+0x64>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800122e:	4b07      	ldr	r3, [pc, #28]	; (800124c <_sbrk+0x64>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	4a05      	ldr	r2, [pc, #20]	; (800124c <_sbrk+0x64>)
 8001238:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800123a:	68fb      	ldr	r3, [r7, #12]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20008000 	.word	0x20008000
 8001248:	00000400 	.word	0x00000400
 800124c:	200003b0 	.word	0x200003b0
 8001250:	200003c8 	.word	0x200003c8

08001254 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <SystemInit+0x20>)
 800125a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800125e:	4a05      	ldr	r2, [pc, #20]	; (8001274 <SystemInit+0x20>)
 8001260:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001264:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001278:	480d      	ldr	r0, [pc, #52]	; (80012b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800127a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800127c:	480d      	ldr	r0, [pc, #52]	; (80012b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800127e:	490e      	ldr	r1, [pc, #56]	; (80012b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001280:	4a0e      	ldr	r2, [pc, #56]	; (80012bc <LoopForever+0xe>)
  movs r3, #0
 8001282:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001284:	e002      	b.n	800128c <LoopCopyDataInit>

08001286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800128a:	3304      	adds	r3, #4

0800128c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800128c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800128e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001290:	d3f9      	bcc.n	8001286 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001292:	4a0b      	ldr	r2, [pc, #44]	; (80012c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001294:	4c0b      	ldr	r4, [pc, #44]	; (80012c4 <LoopForever+0x16>)
  movs r3, #0
 8001296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001298:	e001      	b.n	800129e <LoopFillZerobss>

0800129a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800129a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800129c:	3204      	adds	r2, #4

0800129e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800129e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a0:	d3fb      	bcc.n	800129a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012a2:	f7ff ffd7 	bl	8001254 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012a6:	f004 ff9d 	bl	80061e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012aa:	f7ff f98b 	bl	80005c4 <main>

080012ae <LoopForever>:

LoopForever:
    b LoopForever
 80012ae:	e7fe      	b.n	80012ae <LoopForever>
  ldr   r0, =_estack
 80012b0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80012b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80012bc:	08006c18 	.word	0x08006c18
  ldr r2, =_sbss
 80012c0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80012c4:	200003c8 	.word	0x200003c8

080012c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012c8:	e7fe      	b.n	80012c8 <ADC1_2_IRQHandler>

080012ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012d0:	2300      	movs	r3, #0
 80012d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d4:	2003      	movs	r0, #3
 80012d6:	f001 fb5d 	bl	8002994 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012da:	2000      	movs	r0, #0
 80012dc:	f000 f80e 	bl	80012fc <HAL_InitTick>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d002      	beq.n	80012ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	71fb      	strb	r3, [r7, #7]
 80012ea:	e001      	b.n	80012f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012ec:	f7ff fd20 	bl	8000d30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012f0:	79fb      	ldrb	r3, [r7, #7]

}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001304:	2300      	movs	r3, #0
 8001306:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001308:	4b16      	ldr	r3, [pc, #88]	; (8001364 <HAL_InitTick+0x68>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d022      	beq.n	8001356 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001310:	4b15      	ldr	r3, [pc, #84]	; (8001368 <HAL_InitTick+0x6c>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b13      	ldr	r3, [pc, #76]	; (8001364 <HAL_InitTick+0x68>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800131c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001320:	fbb2 f3f3 	udiv	r3, r2, r3
 8001324:	4618      	mov	r0, r3
 8001326:	f001 fb68 	bl	80029fa <HAL_SYSTICK_Config>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d10f      	bne.n	8001350 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b0f      	cmp	r3, #15
 8001334:	d809      	bhi.n	800134a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001336:	2200      	movs	r2, #0
 8001338:	6879      	ldr	r1, [r7, #4]
 800133a:	f04f 30ff 	mov.w	r0, #4294967295
 800133e:	f001 fb34 	bl	80029aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001342:	4a0a      	ldr	r2, [pc, #40]	; (800136c <HAL_InitTick+0x70>)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6013      	str	r3, [r2, #0]
 8001348:	e007      	b.n	800135a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	73fb      	strb	r3, [r7, #15]
 800134e:	e004      	b.n	800135a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	73fb      	strb	r3, [r7, #15]
 8001354:	e001      	b.n	800135a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800135a:	7bfb      	ldrb	r3, [r7, #15]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3710      	adds	r7, #16
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000008 	.word	0x20000008
 8001368:	20000000 	.word	0x20000000
 800136c:	20000004 	.word	0x20000004

08001370 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001374:	4b05      	ldr	r3, [pc, #20]	; (800138c <HAL_IncTick+0x1c>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4b05      	ldr	r3, [pc, #20]	; (8001390 <HAL_IncTick+0x20>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4413      	add	r3, r2
 800137e:	4a03      	ldr	r2, [pc, #12]	; (800138c <HAL_IncTick+0x1c>)
 8001380:	6013      	str	r3, [r2, #0]
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	200003b4 	.word	0x200003b4
 8001390:	20000008 	.word	0x20000008

08001394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return uwTick;
 8001398:	4b03      	ldr	r3, [pc, #12]	; (80013a8 <HAL_GetTick+0x14>)
 800139a:	681b      	ldr	r3, [r3, #0]
}
 800139c:	4618      	mov	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	200003b4 	.word	0x200003b4

080013ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	431a      	orrs	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	609a      	str	r2, [r3, #8]
}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	431a      	orrs	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	609a      	str	r2, [r3, #8]
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001408:	4618      	mov	r0, r3
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001414:	b480      	push	{r7}
 8001416:	b087      	sub	sp, #28
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
 8001420:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	3360      	adds	r3, #96	; 0x60
 8001426:	461a      	mov	r2, r3
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4413      	add	r3, r2
 800142e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4b08      	ldr	r3, [pc, #32]	; (8001458 <LL_ADC_SetOffset+0x44>)
 8001436:	4013      	ands	r3, r2
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800143e:	683a      	ldr	r2, [r7, #0]
 8001440:	430a      	orrs	r2, r1
 8001442:	4313      	orrs	r3, r2
 8001444:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800144c:	bf00      	nop
 800144e:	371c      	adds	r7, #28
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	03fff000 	.word	0x03fff000

0800145c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	3360      	adds	r3, #96	; 0x60
 800146a:	461a      	mov	r2, r3
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4413      	add	r3, r2
 8001472:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800147c:	4618      	mov	r0, r3
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001488:	b480      	push	{r7}
 800148a:	b087      	sub	sp, #28
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	3360      	adds	r3, #96	; 0x60
 8001498:	461a      	mov	r2, r3
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	431a      	orrs	r2, r3
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80014b2:	bf00      	nop
 80014b4:	371c      	adds	r7, #28
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80014be:	b480      	push	{r7}
 80014c0:	b087      	sub	sp, #28
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	60f8      	str	r0, [r7, #12]
 80014c6:	60b9      	str	r1, [r7, #8]
 80014c8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	3360      	adds	r3, #96	; 0x60
 80014ce:	461a      	mov	r2, r3
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	431a      	orrs	r2, r3
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80014e8:	bf00      	nop
 80014ea:	371c      	adds	r7, #28
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b087      	sub	sp, #28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	3360      	adds	r3, #96	; 0x60
 8001504:	461a      	mov	r2, r3
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4413      	add	r3, r2
 800150c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	431a      	orrs	r2, r3
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800151e:	bf00      	nop
 8001520:	371c      	adds	r7, #28
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800152a:	b480      	push	{r7}
 800152c:	b083      	sub	sp, #12
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
 8001532:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	695b      	ldr	r3, [r3, #20]
 8001538:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	615a      	str	r2, [r3, #20]
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001560:	2b00      	cmp	r3, #0
 8001562:	d101      	bne.n	8001568 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001564:	2301      	movs	r3, #1
 8001566:	e000      	b.n	800156a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001576:	b480      	push	{r7}
 8001578:	b087      	sub	sp, #28
 800157a:	af00      	add	r7, sp, #0
 800157c:	60f8      	str	r0, [r7, #12]
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	3330      	adds	r3, #48	; 0x30
 8001586:	461a      	mov	r2, r3
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	0a1b      	lsrs	r3, r3, #8
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	f003 030c 	and.w	r3, r3, #12
 8001592:	4413      	add	r3, r2
 8001594:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	f003 031f 	and.w	r3, r3, #31
 80015a0:	211f      	movs	r1, #31
 80015a2:	fa01 f303 	lsl.w	r3, r1, r3
 80015a6:	43db      	mvns	r3, r3
 80015a8:	401a      	ands	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	0e9b      	lsrs	r3, r3, #26
 80015ae:	f003 011f 	and.w	r1, r3, #31
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	f003 031f 	and.w	r3, r3, #31
 80015b8:	fa01 f303 	lsl.w	r3, r1, r3
 80015bc:	431a      	orrs	r2, r3
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80015c2:	bf00      	nop
 80015c4:	371c      	adds	r7, #28
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b087      	sub	sp, #28
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	60f8      	str	r0, [r7, #12]
 80015d6:	60b9      	str	r1, [r7, #8]
 80015d8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	3314      	adds	r3, #20
 80015de:	461a      	mov	r2, r3
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	0e5b      	lsrs	r3, r3, #25
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	f003 0304 	and.w	r3, r3, #4
 80015ea:	4413      	add	r3, r2
 80015ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	0d1b      	lsrs	r3, r3, #20
 80015f6:	f003 031f 	and.w	r3, r3, #31
 80015fa:	2107      	movs	r1, #7
 80015fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001600:	43db      	mvns	r3, r3
 8001602:	401a      	ands	r2, r3
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	0d1b      	lsrs	r3, r3, #20
 8001608:	f003 031f 	and.w	r3, r3, #31
 800160c:	6879      	ldr	r1, [r7, #4]
 800160e:	fa01 f303 	lsl.w	r3, r1, r3
 8001612:	431a      	orrs	r2, r3
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001618:	bf00      	nop
 800161a:	371c      	adds	r7, #28
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a0f      	ldr	r2, [pc, #60]	; (8001670 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d10a      	bne.n	800164e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001644:	431a      	orrs	r2, r3
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 800164c:	e00a      	b.n	8001664 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800165a:	43db      	mvns	r3, r3
 800165c:	401a      	ands	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001664:	bf00      	nop
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	407f0000 	.word	0x407f0000

08001674 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f003 031f 	and.w	r3, r3, #31
}
 8001684:	4618      	mov	r0, r3
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80016a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	6093      	str	r3, [r2, #8]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80016c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016c8:	d101      	bne.n	80016ce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80016ca:	2301      	movs	r3, #1
 80016cc:	e000      	b.n	80016d0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80016ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001714:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001718:	d101      	bne.n	800171e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800171a:	2301      	movs	r3, #1
 800171c:	e000      	b.n	8001720 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800173c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001740:	f043 0201 	orr.w	r2, r3, #1
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	2b01      	cmp	r3, #1
 8001766:	d101      	bne.n	800176c <LL_ADC_IsEnabled+0x18>
 8001768:	2301      	movs	r3, #1
 800176a:	e000      	b.n	800176e <LL_ADC_IsEnabled+0x1a>
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800178a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800178e:	f043 0204 	orr.w	r2, r3, #4
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	d101      	bne.n	80017ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80017b6:	2301      	movs	r3, #1
 80017b8:	e000      	b.n	80017bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 0308 	and.w	r3, r3, #8
 80017d8:	2b08      	cmp	r3, #8
 80017da:	d101      	bne.n	80017e0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80017dc:	2301      	movs	r3, #1
 80017de:	e000      	b.n	80017e2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
	...

080017f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017f0:	b590      	push	{r4, r7, lr}
 80017f2:	b089      	sub	sp, #36	; 0x24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017f8:	2300      	movs	r3, #0
 80017fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e177      	b.n	8001afa <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001814:	2b00      	cmp	r3, #0
 8001816:	d109      	bne.n	800182c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff faad 	bl	8000d78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff3f 	bl	80016b4 <LL_ADC_IsDeepPowerDownEnabled>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d004      	beq.n	8001846 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff ff25 	bl	8001690 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff ff5a 	bl	8001704 <LL_ADC_IsInternalRegulatorEnabled>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d115      	bne.n	8001882 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff ff3e 	bl	80016dc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001860:	4b9c      	ldr	r3, [pc, #624]	; (8001ad4 <HAL_ADC_Init+0x2e4>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	099b      	lsrs	r3, r3, #6
 8001866:	4a9c      	ldr	r2, [pc, #624]	; (8001ad8 <HAL_ADC_Init+0x2e8>)
 8001868:	fba2 2303 	umull	r2, r3, r2, r3
 800186c:	099b      	lsrs	r3, r3, #6
 800186e:	3301      	adds	r3, #1
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001874:	e002      	b.n	800187c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	3b01      	subs	r3, #1
 800187a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f9      	bne.n	8001876 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff ff3c 	bl	8001704 <LL_ADC_IsInternalRegulatorEnabled>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d10d      	bne.n	80018ae <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001896:	f043 0210 	orr.w	r2, r3, #16
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a2:	f043 0201 	orr.w	r2, r3, #1
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff ff75 	bl	80017a2 <LL_ADC_REG_IsConversionOngoing>
 80018b8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018be:	f003 0310 	and.w	r3, r3, #16
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f040 8110 	bne.w	8001ae8 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f040 810c 	bne.w	8001ae8 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80018d8:	f043 0202 	orr.w	r2, r3, #2
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ff35 	bl	8001754 <LL_ADC_IsEnabled>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d111      	bne.n	8001914 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80018f0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80018f4:	f7ff ff2e 	bl	8001754 <LL_ADC_IsEnabled>
 80018f8:	4604      	mov	r4, r0
 80018fa:	4878      	ldr	r0, [pc, #480]	; (8001adc <HAL_ADC_Init+0x2ec>)
 80018fc:	f7ff ff2a 	bl	8001754 <LL_ADC_IsEnabled>
 8001900:	4603      	mov	r3, r0
 8001902:	4323      	orrs	r3, r4
 8001904:	2b00      	cmp	r3, #0
 8001906:	d105      	bne.n	8001914 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	4619      	mov	r1, r3
 800190e:	4874      	ldr	r0, [pc, #464]	; (8001ae0 <HAL_ADC_Init+0x2f0>)
 8001910:	f7ff fd4c 	bl	80013ac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	7f5b      	ldrb	r3, [r3, #29]
 8001918:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800191e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001924:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800192a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001932:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001934:	4313      	orrs	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800193e:	2b01      	cmp	r3, #1
 8001940:	d106      	bne.n	8001950 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001946:	3b01      	subs	r3, #1
 8001948:	045b      	lsls	r3, r3, #17
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4313      	orrs	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001954:	2b00      	cmp	r3, #0
 8001956:	d009      	beq.n	800196c <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001964:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4313      	orrs	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	68da      	ldr	r2, [r3, #12]
 8001972:	4b5c      	ldr	r3, [pc, #368]	; (8001ae4 <HAL_ADC_Init+0x2f4>)
 8001974:	4013      	ands	r3, r2
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	6812      	ldr	r2, [r2, #0]
 800197a:	69b9      	ldr	r1, [r7, #24]
 800197c:	430b      	orrs	r3, r1
 800197e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	430a      	orrs	r2, r1
 8001994:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff ff01 	bl	80017a2 <LL_ADC_REG_IsConversionOngoing>
 80019a0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff ff0e 	bl	80017c8 <LL_ADC_INJ_IsConversionOngoing>
 80019ac:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d16d      	bne.n	8001a90 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d16a      	bne.n	8001a90 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80019be:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80019c6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80019c8:	4313      	orrs	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019d6:	f023 0302 	bic.w	r3, r3, #2
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	6812      	ldr	r2, [r2, #0]
 80019de:	69b9      	ldr	r1, [r7, #24]
 80019e0:	430b      	orrs	r3, r1
 80019e2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d017      	beq.n	8001a1c <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	691a      	ldr	r2, [r3, #16]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80019fa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001a04:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001a08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	6911      	ldr	r1, [r2, #16]
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6812      	ldr	r2, [r2, #0]
 8001a14:	430b      	orrs	r3, r1
 8001a16:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001a1a:	e013      	b.n	8001a44 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	691a      	ldr	r2, [r3, #16]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a2a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	6812      	ldr	r2, [r2, #0]
 8001a38:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001a3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a40:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d118      	bne.n	8001a80 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001a58:	f023 0304 	bic.w	r3, r3, #4
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a64:	4311      	orrs	r1, r2
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001a6a:	4311      	orrs	r1, r2
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a70:	430a      	orrs	r2, r1
 8001a72:	431a      	orrs	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f042 0201 	orr.w	r2, r2, #1
 8001a7c:	611a      	str	r2, [r3, #16]
 8001a7e:	e007      	b.n	8001a90 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	691a      	ldr	r2, [r3, #16]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 0201 	bic.w	r2, r2, #1
 8001a8e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	695b      	ldr	r3, [r3, #20]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d10c      	bne.n	8001ab2 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	f023 010f 	bic.w	r1, r3, #15
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
 8001aa6:	1e5a      	subs	r2, r3, #1
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	430a      	orrs	r2, r1
 8001aae:	631a      	str	r2, [r3, #48]	; 0x30
 8001ab0:	e007      	b.n	8001ac2 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 020f 	bic.w	r2, r2, #15
 8001ac0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac6:	f023 0303 	bic.w	r3, r3, #3
 8001aca:	f043 0201 	orr.w	r2, r3, #1
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ad2:	e011      	b.n	8001af8 <HAL_ADC_Init+0x308>
 8001ad4:	20000000 	.word	0x20000000
 8001ad8:	053e2d63 	.word	0x053e2d63
 8001adc:	50000100 	.word	0x50000100
 8001ae0:	50000300 	.word	0x50000300
 8001ae4:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aec:	f043 0210 	orr.w	r2, r3, #16
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001af8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3724      	adds	r7, #36	; 0x24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd90      	pop	{r4, r7, pc}
 8001b02:	bf00      	nop

08001b04 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b10:	4851      	ldr	r0, [pc, #324]	; (8001c58 <HAL_ADC_Start_DMA+0x154>)
 8001b12:	f7ff fdaf 	bl	8001674 <LL_ADC_GetMultimode>
 8001b16:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fe40 	bl	80017a2 <LL_ADC_REG_IsConversionOngoing>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f040 808f 	bne.w	8001c48 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d101      	bne.n	8001b38 <HAL_ADC_Start_DMA+0x34>
 8001b34:	2302      	movs	r3, #2
 8001b36:	e08a      	b.n	8001c4e <HAL_ADC_Start_DMA+0x14a>
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d005      	beq.n	8001b52 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	2b05      	cmp	r3, #5
 8001b4a:	d002      	beq.n	8001b52 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	2b09      	cmp	r3, #9
 8001b50:	d173      	bne.n	8001c3a <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f000 fc8e 	bl	8002474 <ADC_Enable>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001b5c:	7dfb      	ldrb	r3, [r7, #23]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d166      	bne.n	8001c30 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b66:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b6a:	f023 0301 	bic.w	r3, r3, #1
 8001b6e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a38      	ldr	r2, [pc, #224]	; (8001c5c <HAL_ADC_Start_DMA+0x158>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d002      	beq.n	8001b86 <HAL_ADC_Start_DMA+0x82>
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	e001      	b.n	8001b8a <HAL_ADC_Start_DMA+0x86>
 8001b86:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	6812      	ldr	r2, [r2, #0]
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d002      	beq.n	8001b98 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d105      	bne.n	8001ba4 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b9c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d006      	beq.n	8001bbe <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bb4:	f023 0206 	bic.w	r2, r3, #6
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	661a      	str	r2, [r3, #96]	; 0x60
 8001bbc:	e002      	b.n	8001bc4 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc8:	4a25      	ldr	r2, [pc, #148]	; (8001c60 <HAL_ADC_Start_DMA+0x15c>)
 8001bca:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd0:	4a24      	ldr	r2, [pc, #144]	; (8001c64 <HAL_ADC_Start_DMA+0x160>)
 8001bd2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd8:	4a23      	ldr	r2, [pc, #140]	; (8001c68 <HAL_ADC_Start_DMA+0x164>)
 8001bda:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	221c      	movs	r2, #28
 8001be2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f042 0210 	orr.w	r2, r2, #16
 8001bfa:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68da      	ldr	r2, [r3, #12]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f042 0201 	orr.w	r2, r2, #1
 8001c0a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	3340      	adds	r3, #64	; 0x40
 8001c16:	4619      	mov	r1, r3
 8001c18:	68ba      	ldr	r2, [r7, #8]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f000 ffa2 	bl	8002b64 <HAL_DMA_Start_IT>
 8001c20:	4603      	mov	r3, r0
 8001c22:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff fda6 	bl	800177a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001c2e:	e00d      	b.n	8001c4c <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8001c38:	e008      	b.n	8001c4c <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001c46:	e001      	b.n	8001c4c <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3718      	adds	r7, #24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	50000300 	.word	0x50000300
 8001c5c:	50000100 	.word	0x50000100
 8001c60:	08002539 	.word	0x08002539
 8001c64:	08002611 	.word	0x08002611
 8001c68:	0800262d 	.word	0x0800262d

08001c6c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b0b6      	sub	sp, #216	; 0xd8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d101      	bne.n	8001cb6 <HAL_ADC_ConfigChannel+0x22>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	e3c8      	b.n	8002448 <HAL_ADC_ConfigChannel+0x7b4>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff fd6d 	bl	80017a2 <LL_ADC_REG_IsConversionOngoing>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f040 83ad 	bne.w	800242a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6818      	ldr	r0, [r3, #0]
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	6859      	ldr	r1, [r3, #4]
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	f7ff fc4a 	bl	8001576 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff fd5b 	bl	80017a2 <LL_ADC_REG_IsConversionOngoing>
 8001cec:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff fd67 	bl	80017c8 <LL_ADC_INJ_IsConversionOngoing>
 8001cfa:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cfe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f040 81d9 	bne.w	80020ba <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f040 81d4 	bne.w	80020ba <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d1a:	d10f      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6818      	ldr	r0, [r3, #0]
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2200      	movs	r2, #0
 8001d26:	4619      	mov	r1, r3
 8001d28:	f7ff fc51 	bl	80015ce <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff fbf8 	bl	800152a <LL_ADC_SetSamplingTimeCommonConfig>
 8001d3a:	e00e      	b.n	8001d5a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6818      	ldr	r0, [r3, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	6819      	ldr	r1, [r3, #0]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	f7ff fc40 	bl	80015ce <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2100      	movs	r1, #0
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff fbe8 	bl	800152a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	695a      	ldr	r2, [r3, #20]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	08db      	lsrs	r3, r3, #3
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	2b04      	cmp	r3, #4
 8001d7a:	d022      	beq.n	8001dc2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6818      	ldr	r0, [r3, #0]
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	6919      	ldr	r1, [r3, #16]
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001d8c:	f7ff fb42 	bl	8001414 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6818      	ldr	r0, [r3, #0]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	6919      	ldr	r1, [r3, #16]
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	f7ff fb8e 	bl	80014be <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6818      	ldr	r0, [r3, #0]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	6919      	ldr	r1, [r3, #16]
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	7f1b      	ldrb	r3, [r3, #28]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d102      	bne.n	8001db8 <HAL_ADC_ConfigChannel+0x124>
 8001db2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001db6:	e000      	b.n	8001dba <HAL_ADC_ConfigChannel+0x126>
 8001db8:	2300      	movs	r3, #0
 8001dba:	461a      	mov	r2, r3
 8001dbc:	f7ff fb9a 	bl	80014f4 <LL_ADC_SetOffsetSaturation>
 8001dc0:	e17b      	b.n	80020ba <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff fb47 	bl	800145c <LL_ADC_GetOffsetChannel>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10a      	bne.n	8001dee <HAL_ADC_ConfigChannel+0x15a>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff fb3c 	bl	800145c <LL_ADC_GetOffsetChannel>
 8001de4:	4603      	mov	r3, r0
 8001de6:	0e9b      	lsrs	r3, r3, #26
 8001de8:	f003 021f 	and.w	r2, r3, #31
 8001dec:	e01e      	b.n	8001e2c <HAL_ADC_ConfigChannel+0x198>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2100      	movs	r1, #0
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff fb31 	bl	800145c <LL_ADC_GetOffsetChannel>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e04:	fa93 f3a3 	rbit	r3, r3
 8001e08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001e1c:	2320      	movs	r3, #32
 8001e1e:	e004      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001e20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e24:	fab3 f383 	clz	r3, r3
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d105      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x1b0>
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	0e9b      	lsrs	r3, r3, #26
 8001e3e:	f003 031f 	and.w	r3, r3, #31
 8001e42:	e018      	b.n	8001e76 <HAL_ADC_ConfigChannel+0x1e2>
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e50:	fa93 f3a3 	rbit	r3, r3
 8001e54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001e58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001e60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001e68:	2320      	movs	r3, #32
 8001e6a:	e004      	b.n	8001e76 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001e6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e70:	fab3 f383 	clz	r3, r3
 8001e74:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d106      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2100      	movs	r1, #0
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff fb00 	bl	8001488 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff fae4 	bl	800145c <LL_ADC_GetOffsetChannel>
 8001e94:	4603      	mov	r3, r0
 8001e96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10a      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x220>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff fad9 	bl	800145c <LL_ADC_GetOffsetChannel>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	0e9b      	lsrs	r3, r3, #26
 8001eae:	f003 021f 	and.w	r2, r3, #31
 8001eb2:	e01e      	b.n	8001ef2 <HAL_ADC_ConfigChannel+0x25e>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2101      	movs	r1, #1
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff face 	bl	800145c <LL_ADC_GetOffsetChannel>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001eca:	fa93 f3a3 	rbit	r3, r3
 8001ece:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001ed2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ed6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001eda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001ee2:	2320      	movs	r3, #32
 8001ee4:	e004      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001ee6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001eea:	fab3 f383 	clz	r3, r3
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d105      	bne.n	8001f0a <HAL_ADC_ConfigChannel+0x276>
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	0e9b      	lsrs	r3, r3, #26
 8001f04:	f003 031f 	and.w	r3, r3, #31
 8001f08:	e018      	b.n	8001f3c <HAL_ADC_ConfigChannel+0x2a8>
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f12:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f16:	fa93 f3a3 	rbit	r3, r3
 8001f1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001f1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001f26:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001f2e:	2320      	movs	r3, #32
 8001f30:	e004      	b.n	8001f3c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001f32:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f36:	fab3 f383 	clz	r3, r3
 8001f3a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d106      	bne.n	8001f4e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2200      	movs	r2, #0
 8001f46:	2101      	movs	r1, #1
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff fa9d 	bl	8001488 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2102      	movs	r1, #2
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff fa81 	bl	800145c <LL_ADC_GetOffsetChannel>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d10a      	bne.n	8001f7a <HAL_ADC_ConfigChannel+0x2e6>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2102      	movs	r1, #2
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff fa76 	bl	800145c <LL_ADC_GetOffsetChannel>
 8001f70:	4603      	mov	r3, r0
 8001f72:	0e9b      	lsrs	r3, r3, #26
 8001f74:	f003 021f 	and.w	r2, r3, #31
 8001f78:	e01e      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x324>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2102      	movs	r1, #2
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff fa6b 	bl	800145c <LL_ADC_GetOffsetChannel>
 8001f86:	4603      	mov	r3, r0
 8001f88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f90:	fa93 f3a3 	rbit	r3, r3
 8001f94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001f98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001fa0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001fa8:	2320      	movs	r3, #32
 8001faa:	e004      	b.n	8001fb6 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001fac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fb0:	fab3 f383 	clz	r3, r3
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d105      	bne.n	8001fd0 <HAL_ADC_ConfigChannel+0x33c>
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	0e9b      	lsrs	r3, r3, #26
 8001fca:	f003 031f 	and.w	r3, r3, #31
 8001fce:	e016      	b.n	8001ffe <HAL_ADC_ConfigChannel+0x36a>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fdc:	fa93 f3a3 	rbit	r3, r3
 8001fe0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001fe2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fe4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001fe8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8001ff0:	2320      	movs	r3, #32
 8001ff2:	e004      	b.n	8001ffe <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001ff4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ff8:	fab3 f383 	clz	r3, r3
 8001ffc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d106      	bne.n	8002010 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2200      	movs	r2, #0
 8002008:	2102      	movs	r1, #2
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff fa3c 	bl	8001488 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2103      	movs	r1, #3
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff fa20 	bl	800145c <LL_ADC_GetOffsetChannel>
 800201c:	4603      	mov	r3, r0
 800201e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10a      	bne.n	800203c <HAL_ADC_ConfigChannel+0x3a8>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2103      	movs	r1, #3
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff fa15 	bl	800145c <LL_ADC_GetOffsetChannel>
 8002032:	4603      	mov	r3, r0
 8002034:	0e9b      	lsrs	r3, r3, #26
 8002036:	f003 021f 	and.w	r2, r3, #31
 800203a:	e017      	b.n	800206c <HAL_ADC_ConfigChannel+0x3d8>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2103      	movs	r1, #3
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff fa0a 	bl	800145c <LL_ADC_GetOffsetChannel>
 8002048:	4603      	mov	r3, r0
 800204a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800204e:	fa93 f3a3 	rbit	r3, r3
 8002052:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002054:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002056:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002058:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800205e:	2320      	movs	r3, #32
 8002060:	e003      	b.n	800206a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002062:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002064:	fab3 f383 	clz	r3, r3
 8002068:	b2db      	uxtb	r3, r3
 800206a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002074:	2b00      	cmp	r3, #0
 8002076:	d105      	bne.n	8002084 <HAL_ADC_ConfigChannel+0x3f0>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	0e9b      	lsrs	r3, r3, #26
 800207e:	f003 031f 	and.w	r3, r3, #31
 8002082:	e011      	b.n	80020a8 <HAL_ADC_ConfigChannel+0x414>
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800208c:	fa93 f3a3 	rbit	r3, r3
 8002090:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002092:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002094:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800209c:	2320      	movs	r3, #32
 800209e:	e003      	b.n	80020a8 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80020a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020a2:	fab3 f383 	clz	r3, r3
 80020a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d106      	bne.n	80020ba <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2200      	movs	r2, #0
 80020b2:	2103      	movs	r1, #3
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff f9e7 	bl	8001488 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff fb48 	bl	8001754 <LL_ADC_IsEnabled>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f040 8140 	bne.w	800234c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6818      	ldr	r0, [r3, #0]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	6819      	ldr	r1, [r3, #0]
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	461a      	mov	r2, r3
 80020da:	f7ff faa3 	bl	8001624 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	4a8f      	ldr	r2, [pc, #572]	; (8002320 <HAL_ADC_ConfigChannel+0x68c>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	f040 8131 	bne.w	800234c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10b      	bne.n	8002112 <HAL_ADC_ConfigChannel+0x47e>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	0e9b      	lsrs	r3, r3, #26
 8002100:	3301      	adds	r3, #1
 8002102:	f003 031f 	and.w	r3, r3, #31
 8002106:	2b09      	cmp	r3, #9
 8002108:	bf94      	ite	ls
 800210a:	2301      	movls	r3, #1
 800210c:	2300      	movhi	r3, #0
 800210e:	b2db      	uxtb	r3, r3
 8002110:	e019      	b.n	8002146 <HAL_ADC_ConfigChannel+0x4b2>
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002118:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800211a:	fa93 f3a3 	rbit	r3, r3
 800211e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002120:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002122:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002124:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800212a:	2320      	movs	r3, #32
 800212c:	e003      	b.n	8002136 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800212e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002130:	fab3 f383 	clz	r3, r3
 8002134:	b2db      	uxtb	r3, r3
 8002136:	3301      	adds	r3, #1
 8002138:	f003 031f 	and.w	r3, r3, #31
 800213c:	2b09      	cmp	r3, #9
 800213e:	bf94      	ite	ls
 8002140:	2301      	movls	r3, #1
 8002142:	2300      	movhi	r3, #0
 8002144:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002146:	2b00      	cmp	r3, #0
 8002148:	d079      	beq.n	800223e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002152:	2b00      	cmp	r3, #0
 8002154:	d107      	bne.n	8002166 <HAL_ADC_ConfigChannel+0x4d2>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	0e9b      	lsrs	r3, r3, #26
 800215c:	3301      	adds	r3, #1
 800215e:	069b      	lsls	r3, r3, #26
 8002160:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002164:	e015      	b.n	8002192 <HAL_ADC_ConfigChannel+0x4fe>
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800216e:	fa93 f3a3 	rbit	r3, r3
 8002172:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002176:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002178:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800217e:	2320      	movs	r3, #32
 8002180:	e003      	b.n	800218a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002182:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002184:	fab3 f383 	clz	r3, r3
 8002188:	b2db      	uxtb	r3, r3
 800218a:	3301      	adds	r3, #1
 800218c:	069b      	lsls	r3, r3, #26
 800218e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800219a:	2b00      	cmp	r3, #0
 800219c:	d109      	bne.n	80021b2 <HAL_ADC_ConfigChannel+0x51e>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	0e9b      	lsrs	r3, r3, #26
 80021a4:	3301      	adds	r3, #1
 80021a6:	f003 031f 	and.w	r3, r3, #31
 80021aa:	2101      	movs	r1, #1
 80021ac:	fa01 f303 	lsl.w	r3, r1, r3
 80021b0:	e017      	b.n	80021e2 <HAL_ADC_ConfigChannel+0x54e>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021ba:	fa93 f3a3 	rbit	r3, r3
 80021be:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80021c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021c2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80021c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80021ca:	2320      	movs	r3, #32
 80021cc:	e003      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80021ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021d0:	fab3 f383 	clz	r3, r3
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	3301      	adds	r3, #1
 80021d8:	f003 031f 	and.w	r3, r3, #31
 80021dc:	2101      	movs	r1, #1
 80021de:	fa01 f303 	lsl.w	r3, r1, r3
 80021e2:	ea42 0103 	orr.w	r1, r2, r3
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10a      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x574>
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	0e9b      	lsrs	r3, r3, #26
 80021f8:	3301      	adds	r3, #1
 80021fa:	f003 021f 	and.w	r2, r3, #31
 80021fe:	4613      	mov	r3, r2
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	4413      	add	r3, r2
 8002204:	051b      	lsls	r3, r3, #20
 8002206:	e018      	b.n	800223a <HAL_ADC_ConfigChannel+0x5a6>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002210:	fa93 f3a3 	rbit	r3, r3
 8002214:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002218:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800221a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002220:	2320      	movs	r3, #32
 8002222:	e003      	b.n	800222c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002226:	fab3 f383 	clz	r3, r3
 800222a:	b2db      	uxtb	r3, r3
 800222c:	3301      	adds	r3, #1
 800222e:	f003 021f 	and.w	r2, r3, #31
 8002232:	4613      	mov	r3, r2
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	4413      	add	r3, r2
 8002238:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800223a:	430b      	orrs	r3, r1
 800223c:	e081      	b.n	8002342 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002246:	2b00      	cmp	r3, #0
 8002248:	d107      	bne.n	800225a <HAL_ADC_ConfigChannel+0x5c6>
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	0e9b      	lsrs	r3, r3, #26
 8002250:	3301      	adds	r3, #1
 8002252:	069b      	lsls	r3, r3, #26
 8002254:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002258:	e015      	b.n	8002286 <HAL_ADC_ConfigChannel+0x5f2>
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002262:	fa93 f3a3 	rbit	r3, r3
 8002266:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800226c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002272:	2320      	movs	r3, #32
 8002274:	e003      	b.n	800227e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002278:	fab3 f383 	clz	r3, r3
 800227c:	b2db      	uxtb	r3, r3
 800227e:	3301      	adds	r3, #1
 8002280:	069b      	lsls	r3, r3, #26
 8002282:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800228e:	2b00      	cmp	r3, #0
 8002290:	d109      	bne.n	80022a6 <HAL_ADC_ConfigChannel+0x612>
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	0e9b      	lsrs	r3, r3, #26
 8002298:	3301      	adds	r3, #1
 800229a:	f003 031f 	and.w	r3, r3, #31
 800229e:	2101      	movs	r1, #1
 80022a0:	fa01 f303 	lsl.w	r3, r1, r3
 80022a4:	e017      	b.n	80022d6 <HAL_ADC_ConfigChannel+0x642>
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ac:	6a3b      	ldr	r3, [r7, #32]
 80022ae:	fa93 f3a3 	rbit	r3, r3
 80022b2:	61fb      	str	r3, [r7, #28]
  return result;
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80022b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80022be:	2320      	movs	r3, #32
 80022c0:	e003      	b.n	80022ca <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	fab3 f383 	clz	r3, r3
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	3301      	adds	r3, #1
 80022cc:	f003 031f 	and.w	r3, r3, #31
 80022d0:	2101      	movs	r1, #1
 80022d2:	fa01 f303 	lsl.w	r3, r1, r3
 80022d6:	ea42 0103 	orr.w	r1, r2, r3
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10d      	bne.n	8002302 <HAL_ADC_ConfigChannel+0x66e>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	0e9b      	lsrs	r3, r3, #26
 80022ec:	3301      	adds	r3, #1
 80022ee:	f003 021f 	and.w	r2, r3, #31
 80022f2:	4613      	mov	r3, r2
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	4413      	add	r3, r2
 80022f8:	3b1e      	subs	r3, #30
 80022fa:	051b      	lsls	r3, r3, #20
 80022fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002300:	e01e      	b.n	8002340 <HAL_ADC_ConfigChannel+0x6ac>
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	fa93 f3a3 	rbit	r3, r3
 800230e:	613b      	str	r3, [r7, #16]
  return result;
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d104      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800231a:	2320      	movs	r3, #32
 800231c:	e006      	b.n	800232c <HAL_ADC_ConfigChannel+0x698>
 800231e:	bf00      	nop
 8002320:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	fab3 f383 	clz	r3, r3
 800232a:	b2db      	uxtb	r3, r3
 800232c:	3301      	adds	r3, #1
 800232e:	f003 021f 	and.w	r2, r3, #31
 8002332:	4613      	mov	r3, r2
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	4413      	add	r3, r2
 8002338:	3b1e      	subs	r3, #30
 800233a:	051b      	lsls	r3, r3, #20
 800233c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002340:	430b      	orrs	r3, r1
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	6892      	ldr	r2, [r2, #8]
 8002346:	4619      	mov	r1, r3
 8002348:	f7ff f941 	bl	80015ce <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	4b3f      	ldr	r3, [pc, #252]	; (8002450 <HAL_ADC_ConfigChannel+0x7bc>)
 8002352:	4013      	ands	r3, r2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d071      	beq.n	800243c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002358:	483e      	ldr	r0, [pc, #248]	; (8002454 <HAL_ADC_ConfigChannel+0x7c0>)
 800235a:	f7ff f84d 	bl	80013f8 <LL_ADC_GetCommonPathInternalCh>
 800235e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a3c      	ldr	r2, [pc, #240]	; (8002458 <HAL_ADC_ConfigChannel+0x7c4>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d004      	beq.n	8002376 <HAL_ADC_ConfigChannel+0x6e2>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a3a      	ldr	r2, [pc, #232]	; (800245c <HAL_ADC_ConfigChannel+0x7c8>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d127      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002376:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800237a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d121      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800238a:	d157      	bne.n	800243c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800238c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002390:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002394:	4619      	mov	r1, r3
 8002396:	482f      	ldr	r0, [pc, #188]	; (8002454 <HAL_ADC_ConfigChannel+0x7c0>)
 8002398:	f7ff f81b 	bl	80013d2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800239c:	4b30      	ldr	r3, [pc, #192]	; (8002460 <HAL_ADC_ConfigChannel+0x7cc>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	099b      	lsrs	r3, r3, #6
 80023a2:	4a30      	ldr	r2, [pc, #192]	; (8002464 <HAL_ADC_ConfigChannel+0x7d0>)
 80023a4:	fba2 2303 	umull	r2, r3, r2, r3
 80023a8:	099b      	lsrs	r3, r3, #6
 80023aa:	1c5a      	adds	r2, r3, #1
 80023ac:	4613      	mov	r3, r2
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	4413      	add	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80023b6:	e002      	b.n	80023be <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1f9      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023c4:	e03a      	b.n	800243c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a27      	ldr	r2, [pc, #156]	; (8002468 <HAL_ADC_ConfigChannel+0x7d4>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d113      	bne.n	80023f8 <HAL_ADC_ConfigChannel+0x764>
 80023d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10d      	bne.n	80023f8 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a22      	ldr	r2, [pc, #136]	; (800246c <HAL_ADC_ConfigChannel+0x7d8>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d02a      	beq.n	800243c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023ee:	4619      	mov	r1, r3
 80023f0:	4818      	ldr	r0, [pc, #96]	; (8002454 <HAL_ADC_ConfigChannel+0x7c0>)
 80023f2:	f7fe ffee 	bl	80013d2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023f6:	e021      	b.n	800243c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a1c      	ldr	r2, [pc, #112]	; (8002470 <HAL_ADC_ConfigChannel+0x7dc>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d11c      	bne.n	800243c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002402:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d116      	bne.n	800243c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a16      	ldr	r2, [pc, #88]	; (800246c <HAL_ADC_ConfigChannel+0x7d8>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d011      	beq.n	800243c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002418:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800241c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002420:	4619      	mov	r1, r3
 8002422:	480c      	ldr	r0, [pc, #48]	; (8002454 <HAL_ADC_ConfigChannel+0x7c0>)
 8002424:	f7fe ffd5 	bl	80013d2 <LL_ADC_SetCommonPathInternalCh>
 8002428:	e008      	b.n	800243c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800242e:	f043 0220 	orr.w	r2, r3, #32
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002444:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002448:	4618      	mov	r0, r3
 800244a:	37d8      	adds	r7, #216	; 0xd8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	80080000 	.word	0x80080000
 8002454:	50000300 	.word	0x50000300
 8002458:	c3210000 	.word	0xc3210000
 800245c:	90c00010 	.word	0x90c00010
 8002460:	20000000 	.word	0x20000000
 8002464:	053e2d63 	.word	0x053e2d63
 8002468:	c7520000 	.word	0xc7520000
 800246c:	50000100 	.word	0x50000100
 8002470:	cb840000 	.word	0xcb840000

08002474 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff f967 	bl	8001754 <LL_ADC_IsEnabled>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d14d      	bne.n	8002528 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689a      	ldr	r2, [r3, #8]
 8002492:	4b28      	ldr	r3, [pc, #160]	; (8002534 <ADC_Enable+0xc0>)
 8002494:	4013      	ands	r3, r2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00d      	beq.n	80024b6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249e:	f043 0210 	orr.w	r2, r3, #16
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024aa:	f043 0201 	orr.w	r2, r3, #1
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e039      	b.n	800252a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff f936 	bl	800172c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80024c0:	f7fe ff68 	bl	8001394 <HAL_GetTick>
 80024c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024c6:	e028      	b.n	800251a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff f941 	bl	8001754 <LL_ADC_IsEnabled>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d104      	bne.n	80024e2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff f925 	bl	800172c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024e2:	f7fe ff57 	bl	8001394 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d914      	bls.n	800251a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d00d      	beq.n	800251a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002502:	f043 0210 	orr.w	r2, r3, #16
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800250e:	f043 0201 	orr.w	r2, r3, #1
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e007      	b.n	800252a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b01      	cmp	r3, #1
 8002526:	d1cf      	bne.n	80024c8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	8000003f 	.word	0x8000003f

08002538 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002544:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800254e:	2b00      	cmp	r3, #0
 8002550:	d14b      	bne.n	80025ea <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002556:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0308 	and.w	r3, r3, #8
 8002568:	2b00      	cmp	r3, #0
 800256a:	d021      	beq.n	80025b0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f7fe ffed 	bl	8001550 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d032      	beq.n	80025e2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d12b      	bne.n	80025e2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800258e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800259a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d11f      	bne.n	80025e2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a6:	f043 0201 	orr.w	r2, r3, #1
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	65da      	str	r2, [r3, #92]	; 0x5c
 80025ae:	e018      	b.n	80025e2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d111      	bne.n	80025e2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d105      	bne.n	80025e2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025da:	f043 0201 	orr.w	r2, r3, #1
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f7fe fb82 	bl	8000cec <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80025e8:	e00e      	b.n	8002608 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ee:	f003 0310 	and.w	r3, r3, #16
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f7ff fb42 	bl	8001c80 <HAL_ADC_ErrorCallback>
}
 80025fc:	e004      	b.n	8002608 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	4798      	blx	r3
}
 8002608:	bf00      	nop
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f7ff fb24 	bl	8001c6c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002624:	bf00      	nop
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002638:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800264a:	f043 0204 	orr.w	r2, r3, #4
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f7ff fb14 	bl	8001c80 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002658:	bf00      	nop
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <LL_ADC_IsEnabled>:
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b01      	cmp	r3, #1
 8002672:	d101      	bne.n	8002678 <LL_ADC_IsEnabled+0x18>
 8002674:	2301      	movs	r3, #1
 8002676:	e000      	b.n	800267a <LL_ADC_IsEnabled+0x1a>
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr

08002686 <LL_ADC_REG_IsConversionOngoing>:
{
 8002686:	b480      	push	{r7}
 8002688:	b083      	sub	sp, #12
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 0304 	and.w	r3, r3, #4
 8002696:	2b04      	cmp	r3, #4
 8002698:	d101      	bne.n	800269e <LL_ADC_REG_IsConversionOngoing+0x18>
 800269a:	2301      	movs	r3, #1
 800269c:	e000      	b.n	80026a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80026ac:	b590      	push	{r4, r7, lr}
 80026ae:	b0a1      	sub	sp, #132	; 0x84
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026b6:	2300      	movs	r3, #0
 80026b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d101      	bne.n	80026ca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e08b      	b.n	80027e2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80026d2:	2300      	movs	r3, #0
 80026d4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80026d6:	2300      	movs	r3, #0
 80026d8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026e2:	d102      	bne.n	80026ea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80026e4:	4b41      	ldr	r3, [pc, #260]	; (80027ec <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80026e6:	60bb      	str	r3, [r7, #8]
 80026e8:	e001      	b.n	80026ee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80026ea:	2300      	movs	r3, #0
 80026ec:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10b      	bne.n	800270c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f8:	f043 0220 	orr.w	r2, r3, #32
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e06a      	b.n	80027e2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff ffb9 	bl	8002686 <LL_ADC_REG_IsConversionOngoing>
 8002714:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff ffb3 	bl	8002686 <LL_ADC_REG_IsConversionOngoing>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d14c      	bne.n	80027c0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002726:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002728:	2b00      	cmp	r3, #0
 800272a:	d149      	bne.n	80027c0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800272c:	4b30      	ldr	r3, [pc, #192]	; (80027f0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800272e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d028      	beq.n	800278a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002738:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	6859      	ldr	r1, [r3, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800274a:	035b      	lsls	r3, r3, #13
 800274c:	430b      	orrs	r3, r1
 800274e:	431a      	orrs	r2, r3
 8002750:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002752:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002754:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002758:	f7ff ff82 	bl	8002660 <LL_ADC_IsEnabled>
 800275c:	4604      	mov	r4, r0
 800275e:	4823      	ldr	r0, [pc, #140]	; (80027ec <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002760:	f7ff ff7e 	bl	8002660 <LL_ADC_IsEnabled>
 8002764:	4603      	mov	r3, r0
 8002766:	4323      	orrs	r3, r4
 8002768:	2b00      	cmp	r3, #0
 800276a:	d133      	bne.n	80027d4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800276c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002774:	f023 030f 	bic.w	r3, r3, #15
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	6811      	ldr	r1, [r2, #0]
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	6892      	ldr	r2, [r2, #8]
 8002780:	430a      	orrs	r2, r1
 8002782:	431a      	orrs	r2, r3
 8002784:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002786:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002788:	e024      	b.n	80027d4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800278a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002792:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002794:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002796:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800279a:	f7ff ff61 	bl	8002660 <LL_ADC_IsEnabled>
 800279e:	4604      	mov	r4, r0
 80027a0:	4812      	ldr	r0, [pc, #72]	; (80027ec <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80027a2:	f7ff ff5d 	bl	8002660 <LL_ADC_IsEnabled>
 80027a6:	4603      	mov	r3, r0
 80027a8:	4323      	orrs	r3, r4
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d112      	bne.n	80027d4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80027ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80027b6:	f023 030f 	bic.w	r3, r3, #15
 80027ba:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80027bc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80027be:	e009      	b.n	80027d4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c4:	f043 0220 	orr.w	r2, r3, #32
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80027d2:	e000      	b.n	80027d6 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80027d4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80027de:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3784      	adds	r7, #132	; 0x84
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd90      	pop	{r4, r7, pc}
 80027ea:	bf00      	nop
 80027ec:	50000100 	.word	0x50000100
 80027f0:	50000300 	.word	0x50000300

080027f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002804:	4b0c      	ldr	r3, [pc, #48]	; (8002838 <__NVIC_SetPriorityGrouping+0x44>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002810:	4013      	ands	r3, r2
 8002812:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800281c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002826:	4a04      	ldr	r2, [pc, #16]	; (8002838 <__NVIC_SetPriorityGrouping+0x44>)
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	60d3      	str	r3, [r2, #12]
}
 800282c:	bf00      	nop
 800282e:	3714      	adds	r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	e000ed00 	.word	0xe000ed00

0800283c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002840:	4b04      	ldr	r3, [pc, #16]	; (8002854 <__NVIC_GetPriorityGrouping+0x18>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	0a1b      	lsrs	r3, r3, #8
 8002846:	f003 0307 	and.w	r3, r3, #7
}
 800284a:	4618      	mov	r0, r3
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	e000ed00 	.word	0xe000ed00

08002858 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002866:	2b00      	cmp	r3, #0
 8002868:	db0b      	blt.n	8002882 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	f003 021f 	and.w	r2, r3, #31
 8002870:	4907      	ldr	r1, [pc, #28]	; (8002890 <__NVIC_EnableIRQ+0x38>)
 8002872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002876:	095b      	lsrs	r3, r3, #5
 8002878:	2001      	movs	r0, #1
 800287a:	fa00 f202 	lsl.w	r2, r0, r2
 800287e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	e000e100 	.word	0xe000e100

08002894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	4603      	mov	r3, r0
 800289c:	6039      	str	r1, [r7, #0]
 800289e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	db0a      	blt.n	80028be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	490c      	ldr	r1, [pc, #48]	; (80028e0 <__NVIC_SetPriority+0x4c>)
 80028ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b2:	0112      	lsls	r2, r2, #4
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	440b      	add	r3, r1
 80028b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028bc:	e00a      	b.n	80028d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	4908      	ldr	r1, [pc, #32]	; (80028e4 <__NVIC_SetPriority+0x50>)
 80028c4:	79fb      	ldrb	r3, [r7, #7]
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	3b04      	subs	r3, #4
 80028cc:	0112      	lsls	r2, r2, #4
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	440b      	add	r3, r1
 80028d2:	761a      	strb	r2, [r3, #24]
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	e000e100 	.word	0xe000e100
 80028e4:	e000ed00 	.word	0xe000ed00

080028e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b089      	sub	sp, #36	; 0x24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f1c3 0307 	rsb	r3, r3, #7
 8002902:	2b04      	cmp	r3, #4
 8002904:	bf28      	it	cs
 8002906:	2304      	movcs	r3, #4
 8002908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	3304      	adds	r3, #4
 800290e:	2b06      	cmp	r3, #6
 8002910:	d902      	bls.n	8002918 <NVIC_EncodePriority+0x30>
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	3b03      	subs	r3, #3
 8002916:	e000      	b.n	800291a <NVIC_EncodePriority+0x32>
 8002918:	2300      	movs	r3, #0
 800291a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800291c:	f04f 32ff 	mov.w	r2, #4294967295
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	43da      	mvns	r2, r3
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	401a      	ands	r2, r3
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002930:	f04f 31ff 	mov.w	r1, #4294967295
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	fa01 f303 	lsl.w	r3, r1, r3
 800293a:	43d9      	mvns	r1, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002940:	4313      	orrs	r3, r2
         );
}
 8002942:	4618      	mov	r0, r3
 8002944:	3724      	adds	r7, #36	; 0x24
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
	...

08002950 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3b01      	subs	r3, #1
 800295c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002960:	d301      	bcc.n	8002966 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002962:	2301      	movs	r3, #1
 8002964:	e00f      	b.n	8002986 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002966:	4a0a      	ldr	r2, [pc, #40]	; (8002990 <SysTick_Config+0x40>)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3b01      	subs	r3, #1
 800296c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800296e:	210f      	movs	r1, #15
 8002970:	f04f 30ff 	mov.w	r0, #4294967295
 8002974:	f7ff ff8e 	bl	8002894 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002978:	4b05      	ldr	r3, [pc, #20]	; (8002990 <SysTick_Config+0x40>)
 800297a:	2200      	movs	r2, #0
 800297c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800297e:	4b04      	ldr	r3, [pc, #16]	; (8002990 <SysTick_Config+0x40>)
 8002980:	2207      	movs	r2, #7
 8002982:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	e000e010 	.word	0xe000e010

08002994 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7ff ff29 	bl	80027f4 <__NVIC_SetPriorityGrouping>
}
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b086      	sub	sp, #24
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	4603      	mov	r3, r0
 80029b2:	60b9      	str	r1, [r7, #8]
 80029b4:	607a      	str	r2, [r7, #4]
 80029b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029b8:	f7ff ff40 	bl	800283c <__NVIC_GetPriorityGrouping>
 80029bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	68b9      	ldr	r1, [r7, #8]
 80029c2:	6978      	ldr	r0, [r7, #20]
 80029c4:	f7ff ff90 	bl	80028e8 <NVIC_EncodePriority>
 80029c8:	4602      	mov	r2, r0
 80029ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ce:	4611      	mov	r1, r2
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff ff5f 	bl	8002894 <__NVIC_SetPriority>
}
 80029d6:	bf00      	nop
 80029d8:	3718      	adds	r7, #24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b082      	sub	sp, #8
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	4603      	mov	r3, r0
 80029e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff ff33 	bl	8002858 <__NVIC_EnableIRQ>
}
 80029f2:	bf00      	nop
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7ff ffa4 	bl	8002950 <SysTick_Config>
 8002a08:	4603      	mov	r3, r0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e08d      	b.n	8002b42 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	4b47      	ldr	r3, [pc, #284]	; (8002b4c <HAL_DMA_Init+0x138>)
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d80f      	bhi.n	8002a52 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	461a      	mov	r2, r3
 8002a38:	4b45      	ldr	r3, [pc, #276]	; (8002b50 <HAL_DMA_Init+0x13c>)
 8002a3a:	4413      	add	r3, r2
 8002a3c:	4a45      	ldr	r2, [pc, #276]	; (8002b54 <HAL_DMA_Init+0x140>)
 8002a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a42:	091b      	lsrs	r3, r3, #4
 8002a44:	009a      	lsls	r2, r3, #2
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a42      	ldr	r2, [pc, #264]	; (8002b58 <HAL_DMA_Init+0x144>)
 8002a4e:	641a      	str	r2, [r3, #64]	; 0x40
 8002a50:	e00e      	b.n	8002a70 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	461a      	mov	r2, r3
 8002a58:	4b40      	ldr	r3, [pc, #256]	; (8002b5c <HAL_DMA_Init+0x148>)
 8002a5a:	4413      	add	r3, r2
 8002a5c:	4a3d      	ldr	r2, [pc, #244]	; (8002b54 <HAL_DMA_Init+0x140>)
 8002a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a62:	091b      	lsrs	r3, r3, #4
 8002a64:	009a      	lsls	r2, r3, #2
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a3c      	ldr	r2, [pc, #240]	; (8002b60 <HAL_DMA_Init+0x14c>)
 8002a6e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2202      	movs	r2, #2
 8002a74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a8a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002a94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f9b6 	bl	8002e34 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ad0:	d102      	bne.n	8002ad8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ae0:	b2d2      	uxtb	r2, r2
 8002ae2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002aec:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d010      	beq.n	8002b18 <HAL_DMA_Init+0x104>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	d80c      	bhi.n	8002b18 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f9d6 	bl	8002eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002b14:	605a      	str	r2, [r3, #4]
 8002b16:	e008      	b.n	8002b2a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40020407 	.word	0x40020407
 8002b50:	bffdfff8 	.word	0xbffdfff8
 8002b54:	cccccccd 	.word	0xcccccccd
 8002b58:	40020000 	.word	0x40020000
 8002b5c:	bffdfbf8 	.word	0xbffdfbf8
 8002b60:	40020400 	.word	0x40020400

08002b64 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
 8002b70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b72:	2300      	movs	r3, #0
 8002b74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d101      	bne.n	8002b84 <HAL_DMA_Start_IT+0x20>
 8002b80:	2302      	movs	r3, #2
 8002b82:	e066      	b.n	8002c52 <HAL_DMA_Start_IT+0xee>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d155      	bne.n	8002c44 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 0201 	bic.w	r2, r2, #1
 8002bb4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	68b9      	ldr	r1, [r7, #8]
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 f8fb 	bl	8002db8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d008      	beq.n	8002bdc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f042 020e 	orr.w	r2, r2, #14
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	e00f      	b.n	8002bfc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0204 	bic.w	r2, r2, #4
 8002bea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 020a 	orr.w	r2, r2, #10
 8002bfa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d007      	beq.n	8002c1a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c18:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d007      	beq.n	8002c32 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c30:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f042 0201 	orr.w	r2, r2, #1
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	e005      	b.n	8002c50 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002c50:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3718      	adds	r7, #24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b084      	sub	sp, #16
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c76:	f003 031f 	and.w	r3, r3, #31
 8002c7a:	2204      	movs	r2, #4
 8002c7c:	409a      	lsls	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	4013      	ands	r3, r2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d026      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x7a>
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d021      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0320 	and.w	r3, r3, #32
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d107      	bne.n	8002cae <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0204 	bic.w	r2, r2, #4
 8002cac:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb2:	f003 021f 	and.w	r2, r3, #31
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	2104      	movs	r1, #4
 8002cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d071      	beq.n	8002dae <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002cd2:	e06c      	b.n	8002dae <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd8:	f003 031f 	and.w	r3, r3, #31
 8002cdc:	2202      	movs	r2, #2
 8002cde:	409a      	lsls	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d02e      	beq.n	8002d46 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d029      	beq.n	8002d46 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0320 	and.w	r3, r3, #32
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10b      	bne.n	8002d18 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 020a 	bic.w	r2, r2, #10
 8002d0e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1c:	f003 021f 	and.w	r2, r3, #31
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	2102      	movs	r1, #2
 8002d26:	fa01 f202 	lsl.w	r2, r1, r2
 8002d2a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d038      	beq.n	8002dae <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002d44:	e033      	b.n	8002dae <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4a:	f003 031f 	and.w	r3, r3, #31
 8002d4e:	2208      	movs	r2, #8
 8002d50:	409a      	lsls	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	4013      	ands	r3, r2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d02a      	beq.n	8002db0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	f003 0308 	and.w	r3, r3, #8
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d025      	beq.n	8002db0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 020e 	bic.w	r2, r2, #14
 8002d72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d78:	f003 021f 	and.w	r2, r3, #31
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d80:	2101      	movs	r1, #1
 8002d82:	fa01 f202 	lsl.w	r2, r1, r2
 8002d86:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d004      	beq.n	8002db0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002dae:	bf00      	nop
 8002db0:	bf00      	nop
}
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
 8002dc4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002dce:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d004      	beq.n	8002de2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002de0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de6:	f003 021f 	and.w	r2, r3, #31
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	2101      	movs	r1, #1
 8002df0:	fa01 f202 	lsl.w	r2, r1, r2
 8002df4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	2b10      	cmp	r3, #16
 8002e04:	d108      	bne.n	8002e18 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e16:	e007      	b.n	8002e28 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	60da      	str	r2, [r3, #12]
}
 8002e28:	bf00      	nop
 8002e2a:	3714      	adds	r7, #20
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b087      	sub	sp, #28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	461a      	mov	r2, r3
 8002e42:	4b16      	ldr	r3, [pc, #88]	; (8002e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d802      	bhi.n	8002e4e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002e48:	4b15      	ldr	r3, [pc, #84]	; (8002ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	e001      	b.n	8002e52 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002e4e:	4b15      	ldr	r3, [pc, #84]	; (8002ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002e50:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	3b08      	subs	r3, #8
 8002e5e:	4a12      	ldr	r2, [pc, #72]	; (8002ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002e60:	fba2 2303 	umull	r2, r3, r2, r3
 8002e64:	091b      	lsrs	r3, r3, #4
 8002e66:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6c:	089b      	lsrs	r3, r3, #2
 8002e6e:	009a      	lsls	r2, r3, #2
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	4413      	add	r3, r2
 8002e74:	461a      	mov	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a0b      	ldr	r2, [pc, #44]	; (8002eac <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002e7e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f003 031f 	and.w	r3, r3, #31
 8002e86:	2201      	movs	r2, #1
 8002e88:	409a      	lsls	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002e8e:	bf00      	nop
 8002e90:	371c      	adds	r7, #28
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	40020407 	.word	0x40020407
 8002ea0:	40020800 	.word	0x40020800
 8002ea4:	40020820 	.word	0x40020820
 8002ea8:	cccccccd 	.word	0xcccccccd
 8002eac:	40020880 	.word	0x40020880

08002eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002ec4:	4413      	add	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	461a      	mov	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a08      	ldr	r2, [pc, #32]	; (8002ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002ed2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	f003 031f 	and.w	r3, r3, #31
 8002edc:	2201      	movs	r2, #1
 8002ede:	409a      	lsls	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002ee4:	bf00      	nop
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	1000823f 	.word	0x1000823f
 8002ef4:	40020940 	.word	0x40020940

08002ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b087      	sub	sp, #28
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f02:	2300      	movs	r3, #0
 8002f04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002f06:	e15a      	b.n	80031be <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	fa01 f303 	lsl.w	r3, r1, r3
 8002f14:	4013      	ands	r3, r2
 8002f16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 814c 	beq.w	80031b8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f003 0303 	and.w	r3, r3, #3
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d005      	beq.n	8002f38 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d130      	bne.n	8002f9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	2203      	movs	r2, #3
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	68da      	ldr	r2, [r3, #12]
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f6e:	2201      	movs	r2, #1
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	43db      	mvns	r3, r3
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	091b      	lsrs	r3, r3, #4
 8002f84:	f003 0201 	and.w	r2, r3, #1
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f003 0303 	and.w	r3, r3, #3
 8002fa2:	2b03      	cmp	r3, #3
 8002fa4:	d017      	beq.n	8002fd6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	2203      	movs	r2, #3
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f003 0303 	and.w	r3, r3, #3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d123      	bne.n	800302a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	08da      	lsrs	r2, r3, #3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	3208      	adds	r2, #8
 8002fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	220f      	movs	r2, #15
 8002ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffe:	43db      	mvns	r3, r3
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	4013      	ands	r3, r2
 8003004:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	691a      	ldr	r2, [r3, #16]
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f003 0307 	and.w	r3, r3, #7
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	4313      	orrs	r3, r2
 800301a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	08da      	lsrs	r2, r3, #3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	3208      	adds	r2, #8
 8003024:	6939      	ldr	r1, [r7, #16]
 8003026:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	2203      	movs	r2, #3
 8003036:	fa02 f303 	lsl.w	r3, r2, r3
 800303a:	43db      	mvns	r3, r3
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	4013      	ands	r3, r2
 8003040:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f003 0203 	and.w	r2, r3, #3
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	4313      	orrs	r3, r2
 8003056:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 80a6 	beq.w	80031b8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800306c:	4b5b      	ldr	r3, [pc, #364]	; (80031dc <HAL_GPIO_Init+0x2e4>)
 800306e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003070:	4a5a      	ldr	r2, [pc, #360]	; (80031dc <HAL_GPIO_Init+0x2e4>)
 8003072:	f043 0301 	orr.w	r3, r3, #1
 8003076:	6613      	str	r3, [r2, #96]	; 0x60
 8003078:	4b58      	ldr	r3, [pc, #352]	; (80031dc <HAL_GPIO_Init+0x2e4>)
 800307a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	60bb      	str	r3, [r7, #8]
 8003082:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003084:	4a56      	ldr	r2, [pc, #344]	; (80031e0 <HAL_GPIO_Init+0x2e8>)
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	089b      	lsrs	r3, r3, #2
 800308a:	3302      	adds	r3, #2
 800308c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003090:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f003 0303 	and.w	r3, r3, #3
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	220f      	movs	r2, #15
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	43db      	mvns	r3, r3
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	4013      	ands	r3, r2
 80030a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80030ae:	d01f      	beq.n	80030f0 <HAL_GPIO_Init+0x1f8>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a4c      	ldr	r2, [pc, #304]	; (80031e4 <HAL_GPIO_Init+0x2ec>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d019      	beq.n	80030ec <HAL_GPIO_Init+0x1f4>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a4b      	ldr	r2, [pc, #300]	; (80031e8 <HAL_GPIO_Init+0x2f0>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d013      	beq.n	80030e8 <HAL_GPIO_Init+0x1f0>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a4a      	ldr	r2, [pc, #296]	; (80031ec <HAL_GPIO_Init+0x2f4>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d00d      	beq.n	80030e4 <HAL_GPIO_Init+0x1ec>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a49      	ldr	r2, [pc, #292]	; (80031f0 <HAL_GPIO_Init+0x2f8>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d007      	beq.n	80030e0 <HAL_GPIO_Init+0x1e8>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a48      	ldr	r2, [pc, #288]	; (80031f4 <HAL_GPIO_Init+0x2fc>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d101      	bne.n	80030dc <HAL_GPIO_Init+0x1e4>
 80030d8:	2305      	movs	r3, #5
 80030da:	e00a      	b.n	80030f2 <HAL_GPIO_Init+0x1fa>
 80030dc:	2306      	movs	r3, #6
 80030de:	e008      	b.n	80030f2 <HAL_GPIO_Init+0x1fa>
 80030e0:	2304      	movs	r3, #4
 80030e2:	e006      	b.n	80030f2 <HAL_GPIO_Init+0x1fa>
 80030e4:	2303      	movs	r3, #3
 80030e6:	e004      	b.n	80030f2 <HAL_GPIO_Init+0x1fa>
 80030e8:	2302      	movs	r3, #2
 80030ea:	e002      	b.n	80030f2 <HAL_GPIO_Init+0x1fa>
 80030ec:	2301      	movs	r3, #1
 80030ee:	e000      	b.n	80030f2 <HAL_GPIO_Init+0x1fa>
 80030f0:	2300      	movs	r3, #0
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	f002 0203 	and.w	r2, r2, #3
 80030f8:	0092      	lsls	r2, r2, #2
 80030fa:	4093      	lsls	r3, r2
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	4313      	orrs	r3, r2
 8003100:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003102:	4937      	ldr	r1, [pc, #220]	; (80031e0 <HAL_GPIO_Init+0x2e8>)
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	089b      	lsrs	r3, r3, #2
 8003108:	3302      	adds	r3, #2
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003110:	4b39      	ldr	r3, [pc, #228]	; (80031f8 <HAL_GPIO_Init+0x300>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	43db      	mvns	r3, r3
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	4013      	ands	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d003      	beq.n	8003134 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	4313      	orrs	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003134:	4a30      	ldr	r2, [pc, #192]	; (80031f8 <HAL_GPIO_Init+0x300>)
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800313a:	4b2f      	ldr	r3, [pc, #188]	; (80031f8 <HAL_GPIO_Init+0x300>)
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	43db      	mvns	r3, r3
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	4013      	ands	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4313      	orrs	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800315e:	4a26      	ldr	r2, [pc, #152]	; (80031f8 <HAL_GPIO_Init+0x300>)
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003164:	4b24      	ldr	r3, [pc, #144]	; (80031f8 <HAL_GPIO_Init+0x300>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	43db      	mvns	r3, r3
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	4013      	ands	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	4313      	orrs	r3, r2
 8003186:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003188:	4a1b      	ldr	r2, [pc, #108]	; (80031f8 <HAL_GPIO_Init+0x300>)
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800318e:	4b1a      	ldr	r3, [pc, #104]	; (80031f8 <HAL_GPIO_Init+0x300>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	43db      	mvns	r3, r3
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	4013      	ands	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80031b2:	4a11      	ldr	r2, [pc, #68]	; (80031f8 <HAL_GPIO_Init+0x300>)
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	3301      	adds	r3, #1
 80031bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	fa22 f303 	lsr.w	r3, r2, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f47f ae9d 	bne.w	8002f08 <HAL_GPIO_Init+0x10>
  }
}
 80031ce:	bf00      	nop
 80031d0:	bf00      	nop
 80031d2:	371c      	adds	r7, #28
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	40021000 	.word	0x40021000
 80031e0:	40010000 	.word	0x40010000
 80031e4:	48000400 	.word	0x48000400
 80031e8:	48000800 	.word	0x48000800
 80031ec:	48000c00 	.word	0x48000c00
 80031f0:	48001000 	.word	0x48001000
 80031f4:	48001400 	.word	0x48001400
 80031f8:	40010400 	.word	0x40010400

080031fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	460b      	mov	r3, r1
 8003206:	807b      	strh	r3, [r7, #2]
 8003208:	4613      	mov	r3, r2
 800320a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800320c:	787b      	ldrb	r3, [r7, #1]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003212:	887a      	ldrh	r2, [r7, #2]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003218:	e002      	b.n	8003220 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800321a:	887a      	ldrh	r2, [r7, #2]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d141      	bne.n	80032be <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800323a:	4b4b      	ldr	r3, [pc, #300]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003246:	d131      	bne.n	80032ac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003248:	4b47      	ldr	r3, [pc, #284]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800324a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800324e:	4a46      	ldr	r2, [pc, #280]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003250:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003254:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003258:	4b43      	ldr	r3, [pc, #268]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003260:	4a41      	ldr	r2, [pc, #260]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003262:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003266:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003268:	4b40      	ldr	r3, [pc, #256]	; (800336c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2232      	movs	r2, #50	; 0x32
 800326e:	fb02 f303 	mul.w	r3, r2, r3
 8003272:	4a3f      	ldr	r2, [pc, #252]	; (8003370 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003274:	fba2 2303 	umull	r2, r3, r2, r3
 8003278:	0c9b      	lsrs	r3, r3, #18
 800327a:	3301      	adds	r3, #1
 800327c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800327e:	e002      	b.n	8003286 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	3b01      	subs	r3, #1
 8003284:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003286:	4b38      	ldr	r3, [pc, #224]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800328e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003292:	d102      	bne.n	800329a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1f2      	bne.n	8003280 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800329a:	4b33      	ldr	r3, [pc, #204]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032a6:	d158      	bne.n	800335a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e057      	b.n	800335c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032ac:	4b2e      	ldr	r3, [pc, #184]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032b2:	4a2d      	ldr	r2, [pc, #180]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80032bc:	e04d      	b.n	800335a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032c4:	d141      	bne.n	800334a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032c6:	4b28      	ldr	r3, [pc, #160]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032d2:	d131      	bne.n	8003338 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032d4:	4b24      	ldr	r3, [pc, #144]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032da:	4a23      	ldr	r2, [pc, #140]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032e4:	4b20      	ldr	r3, [pc, #128]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032ec:	4a1e      	ldr	r2, [pc, #120]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032f4:	4b1d      	ldr	r3, [pc, #116]	; (800336c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2232      	movs	r2, #50	; 0x32
 80032fa:	fb02 f303 	mul.w	r3, r2, r3
 80032fe:	4a1c      	ldr	r2, [pc, #112]	; (8003370 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003300:	fba2 2303 	umull	r2, r3, r2, r3
 8003304:	0c9b      	lsrs	r3, r3, #18
 8003306:	3301      	adds	r3, #1
 8003308:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800330a:	e002      	b.n	8003312 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	3b01      	subs	r3, #1
 8003310:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003312:	4b15      	ldr	r3, [pc, #84]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800331a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800331e:	d102      	bne.n	8003326 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1f2      	bne.n	800330c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003326:	4b10      	ldr	r3, [pc, #64]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800332e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003332:	d112      	bne.n	800335a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e011      	b.n	800335c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003338:	4b0b      	ldr	r3, [pc, #44]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800333a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800333e:	4a0a      	ldr	r2, [pc, #40]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003344:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003348:	e007      	b.n	800335a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800334a:	4b07      	ldr	r3, [pc, #28]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003352:	4a05      	ldr	r2, [pc, #20]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003354:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003358:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	40007000 	.word	0x40007000
 800336c:	20000000 	.word	0x20000000
 8003370:	431bde83 	.word	0x431bde83

08003374 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003378:	4b05      	ldr	r3, [pc, #20]	; (8003390 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	4a04      	ldr	r2, [pc, #16]	; (8003390 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800337e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003382:	6093      	str	r3, [r2, #8]
}
 8003384:	bf00      	nop
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	40007000 	.word	0x40007000

08003394 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b088      	sub	sp, #32
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e306      	b.n	80039b4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d075      	beq.n	800349e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033b2:	4b97      	ldr	r3, [pc, #604]	; (8003610 <HAL_RCC_OscConfig+0x27c>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 030c 	and.w	r3, r3, #12
 80033ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033bc:	4b94      	ldr	r3, [pc, #592]	; (8003610 <HAL_RCC_OscConfig+0x27c>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	f003 0303 	and.w	r3, r3, #3
 80033c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	2b0c      	cmp	r3, #12
 80033ca:	d102      	bne.n	80033d2 <HAL_RCC_OscConfig+0x3e>
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	2b03      	cmp	r3, #3
 80033d0:	d002      	beq.n	80033d8 <HAL_RCC_OscConfig+0x44>
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	2b08      	cmp	r3, #8
 80033d6:	d10b      	bne.n	80033f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d8:	4b8d      	ldr	r3, [pc, #564]	; (8003610 <HAL_RCC_OscConfig+0x27c>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d05b      	beq.n	800349c <HAL_RCC_OscConfig+0x108>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d157      	bne.n	800349c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e2e1      	b.n	80039b4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033f8:	d106      	bne.n	8003408 <HAL_RCC_OscConfig+0x74>
 80033fa:	4b85      	ldr	r3, [pc, #532]	; (8003610 <HAL_RCC_OscConfig+0x27c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a84      	ldr	r2, [pc, #528]	; (8003610 <HAL_RCC_OscConfig+0x27c>)
 8003400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	e01d      	b.n	8003444 <HAL_RCC_OscConfig+0xb0>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003410:	d10c      	bne.n	800342c <HAL_RCC_OscConfig+0x98>
 8003412:	4b7f      	ldr	r3, [pc, #508]	; (8003610 <HAL_RCC_OscConfig+0x27c>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a7e      	ldr	r2, [pc, #504]	; (8003610 <HAL_RCC_OscConfig+0x27c>)
 8003418:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800341c:	6013      	str	r3, [r2, #0]
 800341e:	4b7c      	ldr	r3, [pc, #496]	; (8003610 <HAL_RCC_OscConfig+0x27c>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a7b      	ldr	r2, [pc, #492]	; (8003610 <HAL_RCC_OscConfig+0x27c>)
 8003424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	e00b      	b.n	8003444 <HAL_RCC_OscConfig+0xb0>
 800342c:	4b78      	ldr	r3, [pc, #480]	; (8003610 <HAL_RCC_OscConfig+0x27c>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a77      	ldr	r2, [pc, #476]	; (8003610 <HAL_RCC_OscConfig+0x27c>)
 8003432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003436:	6013      	str	r3, [r2, #0]
 8003438:	4b75      	ldr	r3, [pc, #468]	; (8003610 <HAL_RCC_OscConfig+0x27c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a74      	ldr	r2, [pc, #464]	; (8003610 <HAL_RCC_OscConfig+0x27c>)
 800343e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003442:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d013      	beq.n	8003474 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344c:	f7fd ffa2 	bl	8001394 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003454:	f7fd ff9e 	bl	8001394 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b64      	cmp	r3, #100	; 0x64
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e2a6      	b.n	80039b4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003466:	4b6a      	ldr	r3, [pc, #424]	; (8003610 <HAL_RCC_OscConfig+0x27c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d0f0      	beq.n	8003454 <HAL_RCC_OscConfig+0xc0>
 8003472:	e014      	b.n	800349e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003474:	f7fd ff8e 	bl	8001394 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800347c:	f7fd ff8a 	bl	8001394 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b64      	cmp	r3, #100	; 0x64
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e292      	b.n	80039b4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800348e:	4b60      	ldr	r3, [pc, #384]	; (8003610 <HAL_RCC_OscConfig+0x27c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1f0      	bne.n	800347c <HAL_RCC_OscConfig+0xe8>
 800349a:	e000      	b.n	800349e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800349c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d075      	beq.n	8003596 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034aa:	4b59      	ldr	r3, [pc, #356]	; (8003610 <HAL_RCC_OscConfig+0x27c>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 030c 	and.w	r3, r3, #12
 80034b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034b4:	4b56      	ldr	r3, [pc, #344]	; (8003610 <HAL_RCC_OscConfig+0x27c>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f003 0303 	and.w	r3, r3, #3
 80034bc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	2b0c      	cmp	r3, #12
 80034c2:	d102      	bne.n	80034ca <HAL_RCC_OscConfig+0x136>
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d002      	beq.n	80034d0 <HAL_RCC_OscConfig+0x13c>
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d11f      	bne.n	8003510 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034d0:	4b4f      	ldr	r3, [pc, #316]	; (8003610 <HAL_RCC_OscConfig+0x27c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d005      	beq.n	80034e8 <HAL_RCC_OscConfig+0x154>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e265      	b.n	80039b4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e8:	4b49      	ldr	r3, [pc, #292]	; (8003610 <HAL_RCC_OscConfig+0x27c>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	061b      	lsls	r3, r3, #24
 80034f6:	4946      	ldr	r1, [pc, #280]	; (8003610 <HAL_RCC_OscConfig+0x27c>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80034fc:	4b45      	ldr	r3, [pc, #276]	; (8003614 <HAL_RCC_OscConfig+0x280>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4618      	mov	r0, r3
 8003502:	f7fd fefb 	bl	80012fc <HAL_InitTick>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d043      	beq.n	8003594 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e251      	b.n	80039b4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d023      	beq.n	8003560 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003518:	4b3d      	ldr	r3, [pc, #244]	; (8003610 <HAL_RCC_OscConfig+0x27c>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a3c      	ldr	r2, [pc, #240]	; (8003610 <HAL_RCC_OscConfig+0x27c>)
 800351e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003522:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003524:	f7fd ff36 	bl	8001394 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800352c:	f7fd ff32 	bl	8001394 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e23a      	b.n	80039b4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800353e:	4b34      	ldr	r3, [pc, #208]	; (8003610 <HAL_RCC_OscConfig+0x27c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003546:	2b00      	cmp	r3, #0
 8003548:	d0f0      	beq.n	800352c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800354a:	4b31      	ldr	r3, [pc, #196]	; (8003610 <HAL_RCC_OscConfig+0x27c>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	061b      	lsls	r3, r3, #24
 8003558:	492d      	ldr	r1, [pc, #180]	; (8003610 <HAL_RCC_OscConfig+0x27c>)
 800355a:	4313      	orrs	r3, r2
 800355c:	604b      	str	r3, [r1, #4]
 800355e:	e01a      	b.n	8003596 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003560:	4b2b      	ldr	r3, [pc, #172]	; (8003610 <HAL_RCC_OscConfig+0x27c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a2a      	ldr	r2, [pc, #168]	; (8003610 <HAL_RCC_OscConfig+0x27c>)
 8003566:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800356a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356c:	f7fd ff12 	bl	8001394 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003574:	f7fd ff0e 	bl	8001394 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e216      	b.n	80039b4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003586:	4b22      	ldr	r3, [pc, #136]	; (8003610 <HAL_RCC_OscConfig+0x27c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f0      	bne.n	8003574 <HAL_RCC_OscConfig+0x1e0>
 8003592:	e000      	b.n	8003596 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003594:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0308 	and.w	r3, r3, #8
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d041      	beq.n	8003626 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d01c      	beq.n	80035e4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035aa:	4b19      	ldr	r3, [pc, #100]	; (8003610 <HAL_RCC_OscConfig+0x27c>)
 80035ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035b0:	4a17      	ldr	r2, [pc, #92]	; (8003610 <HAL_RCC_OscConfig+0x27c>)
 80035b2:	f043 0301 	orr.w	r3, r3, #1
 80035b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ba:	f7fd feeb 	bl	8001394 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035c2:	f7fd fee7 	bl	8001394 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e1ef      	b.n	80039b4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035d4:	4b0e      	ldr	r3, [pc, #56]	; (8003610 <HAL_RCC_OscConfig+0x27c>)
 80035d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0ef      	beq.n	80035c2 <HAL_RCC_OscConfig+0x22e>
 80035e2:	e020      	b.n	8003626 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035e4:	4b0a      	ldr	r3, [pc, #40]	; (8003610 <HAL_RCC_OscConfig+0x27c>)
 80035e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035ea:	4a09      	ldr	r2, [pc, #36]	; (8003610 <HAL_RCC_OscConfig+0x27c>)
 80035ec:	f023 0301 	bic.w	r3, r3, #1
 80035f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f4:	f7fd fece 	bl	8001394 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035fa:	e00d      	b.n	8003618 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035fc:	f7fd feca 	bl	8001394 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d906      	bls.n	8003618 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e1d2      	b.n	80039b4 <HAL_RCC_OscConfig+0x620>
 800360e:	bf00      	nop
 8003610:	40021000 	.word	0x40021000
 8003614:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003618:	4b8c      	ldr	r3, [pc, #560]	; (800384c <HAL_RCC_OscConfig+0x4b8>)
 800361a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1ea      	bne.n	80035fc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0304 	and.w	r3, r3, #4
 800362e:	2b00      	cmp	r3, #0
 8003630:	f000 80a6 	beq.w	8003780 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003634:	2300      	movs	r3, #0
 8003636:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003638:	4b84      	ldr	r3, [pc, #528]	; (800384c <HAL_RCC_OscConfig+0x4b8>)
 800363a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <HAL_RCC_OscConfig+0x2b4>
 8003644:	2301      	movs	r3, #1
 8003646:	e000      	b.n	800364a <HAL_RCC_OscConfig+0x2b6>
 8003648:	2300      	movs	r3, #0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00d      	beq.n	800366a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800364e:	4b7f      	ldr	r3, [pc, #508]	; (800384c <HAL_RCC_OscConfig+0x4b8>)
 8003650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003652:	4a7e      	ldr	r2, [pc, #504]	; (800384c <HAL_RCC_OscConfig+0x4b8>)
 8003654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003658:	6593      	str	r3, [r2, #88]	; 0x58
 800365a:	4b7c      	ldr	r3, [pc, #496]	; (800384c <HAL_RCC_OscConfig+0x4b8>)
 800365c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800365e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003666:	2301      	movs	r3, #1
 8003668:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800366a:	4b79      	ldr	r3, [pc, #484]	; (8003850 <HAL_RCC_OscConfig+0x4bc>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003672:	2b00      	cmp	r3, #0
 8003674:	d118      	bne.n	80036a8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003676:	4b76      	ldr	r3, [pc, #472]	; (8003850 <HAL_RCC_OscConfig+0x4bc>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a75      	ldr	r2, [pc, #468]	; (8003850 <HAL_RCC_OscConfig+0x4bc>)
 800367c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003680:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003682:	f7fd fe87 	bl	8001394 <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800368a:	f7fd fe83 	bl	8001394 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e18b      	b.n	80039b4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800369c:	4b6c      	ldr	r3, [pc, #432]	; (8003850 <HAL_RCC_OscConfig+0x4bc>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0f0      	beq.n	800368a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d108      	bne.n	80036c2 <HAL_RCC_OscConfig+0x32e>
 80036b0:	4b66      	ldr	r3, [pc, #408]	; (800384c <HAL_RCC_OscConfig+0x4b8>)
 80036b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b6:	4a65      	ldr	r2, [pc, #404]	; (800384c <HAL_RCC_OscConfig+0x4b8>)
 80036b8:	f043 0301 	orr.w	r3, r3, #1
 80036bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036c0:	e024      	b.n	800370c <HAL_RCC_OscConfig+0x378>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	2b05      	cmp	r3, #5
 80036c8:	d110      	bne.n	80036ec <HAL_RCC_OscConfig+0x358>
 80036ca:	4b60      	ldr	r3, [pc, #384]	; (800384c <HAL_RCC_OscConfig+0x4b8>)
 80036cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d0:	4a5e      	ldr	r2, [pc, #376]	; (800384c <HAL_RCC_OscConfig+0x4b8>)
 80036d2:	f043 0304 	orr.w	r3, r3, #4
 80036d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036da:	4b5c      	ldr	r3, [pc, #368]	; (800384c <HAL_RCC_OscConfig+0x4b8>)
 80036dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e0:	4a5a      	ldr	r2, [pc, #360]	; (800384c <HAL_RCC_OscConfig+0x4b8>)
 80036e2:	f043 0301 	orr.w	r3, r3, #1
 80036e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036ea:	e00f      	b.n	800370c <HAL_RCC_OscConfig+0x378>
 80036ec:	4b57      	ldr	r3, [pc, #348]	; (800384c <HAL_RCC_OscConfig+0x4b8>)
 80036ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f2:	4a56      	ldr	r2, [pc, #344]	; (800384c <HAL_RCC_OscConfig+0x4b8>)
 80036f4:	f023 0301 	bic.w	r3, r3, #1
 80036f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036fc:	4b53      	ldr	r3, [pc, #332]	; (800384c <HAL_RCC_OscConfig+0x4b8>)
 80036fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003702:	4a52      	ldr	r2, [pc, #328]	; (800384c <HAL_RCC_OscConfig+0x4b8>)
 8003704:	f023 0304 	bic.w	r3, r3, #4
 8003708:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d016      	beq.n	8003742 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003714:	f7fd fe3e 	bl	8001394 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800371a:	e00a      	b.n	8003732 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800371c:	f7fd fe3a 	bl	8001394 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	f241 3288 	movw	r2, #5000	; 0x1388
 800372a:	4293      	cmp	r3, r2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e140      	b.n	80039b4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003732:	4b46      	ldr	r3, [pc, #280]	; (800384c <HAL_RCC_OscConfig+0x4b8>)
 8003734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0ed      	beq.n	800371c <HAL_RCC_OscConfig+0x388>
 8003740:	e015      	b.n	800376e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003742:	f7fd fe27 	bl	8001394 <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003748:	e00a      	b.n	8003760 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800374a:	f7fd fe23 	bl	8001394 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	f241 3288 	movw	r2, #5000	; 0x1388
 8003758:	4293      	cmp	r3, r2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e129      	b.n	80039b4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003760:	4b3a      	ldr	r3, [pc, #232]	; (800384c <HAL_RCC_OscConfig+0x4b8>)
 8003762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1ed      	bne.n	800374a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800376e:	7ffb      	ldrb	r3, [r7, #31]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d105      	bne.n	8003780 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003774:	4b35      	ldr	r3, [pc, #212]	; (800384c <HAL_RCC_OscConfig+0x4b8>)
 8003776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003778:	4a34      	ldr	r2, [pc, #208]	; (800384c <HAL_RCC_OscConfig+0x4b8>)
 800377a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800377e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0320 	and.w	r3, r3, #32
 8003788:	2b00      	cmp	r3, #0
 800378a:	d03c      	beq.n	8003806 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d01c      	beq.n	80037ce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003794:	4b2d      	ldr	r3, [pc, #180]	; (800384c <HAL_RCC_OscConfig+0x4b8>)
 8003796:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800379a:	4a2c      	ldr	r2, [pc, #176]	; (800384c <HAL_RCC_OscConfig+0x4b8>)
 800379c:	f043 0301 	orr.w	r3, r3, #1
 80037a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a4:	f7fd fdf6 	bl	8001394 <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037ac:	f7fd fdf2 	bl	8001394 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e0fa      	b.n	80039b4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80037be:	4b23      	ldr	r3, [pc, #140]	; (800384c <HAL_RCC_OscConfig+0x4b8>)
 80037c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0ef      	beq.n	80037ac <HAL_RCC_OscConfig+0x418>
 80037cc:	e01b      	b.n	8003806 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80037ce:	4b1f      	ldr	r3, [pc, #124]	; (800384c <HAL_RCC_OscConfig+0x4b8>)
 80037d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037d4:	4a1d      	ldr	r2, [pc, #116]	; (800384c <HAL_RCC_OscConfig+0x4b8>)
 80037d6:	f023 0301 	bic.w	r3, r3, #1
 80037da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037de:	f7fd fdd9 	bl	8001394 <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037e6:	f7fd fdd5 	bl	8001394 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e0dd      	b.n	80039b4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037f8:	4b14      	ldr	r3, [pc, #80]	; (800384c <HAL_RCC_OscConfig+0x4b8>)
 80037fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1ef      	bne.n	80037e6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	2b00      	cmp	r3, #0
 800380c:	f000 80d1 	beq.w	80039b2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003810:	4b0e      	ldr	r3, [pc, #56]	; (800384c <HAL_RCC_OscConfig+0x4b8>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f003 030c 	and.w	r3, r3, #12
 8003818:	2b0c      	cmp	r3, #12
 800381a:	f000 808b 	beq.w	8003934 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	2b02      	cmp	r3, #2
 8003824:	d15e      	bne.n	80038e4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003826:	4b09      	ldr	r3, [pc, #36]	; (800384c <HAL_RCC_OscConfig+0x4b8>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a08      	ldr	r2, [pc, #32]	; (800384c <HAL_RCC_OscConfig+0x4b8>)
 800382c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003830:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003832:	f7fd fdaf 	bl	8001394 <HAL_GetTick>
 8003836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003838:	e00c      	b.n	8003854 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800383a:	f7fd fdab 	bl	8001394 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d905      	bls.n	8003854 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e0b3      	b.n	80039b4 <HAL_RCC_OscConfig+0x620>
 800384c:	40021000 	.word	0x40021000
 8003850:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003854:	4b59      	ldr	r3, [pc, #356]	; (80039bc <HAL_RCC_OscConfig+0x628>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1ec      	bne.n	800383a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003860:	4b56      	ldr	r3, [pc, #344]	; (80039bc <HAL_RCC_OscConfig+0x628>)
 8003862:	68da      	ldr	r2, [r3, #12]
 8003864:	4b56      	ldr	r3, [pc, #344]	; (80039c0 <HAL_RCC_OscConfig+0x62c>)
 8003866:	4013      	ands	r3, r2
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	6a11      	ldr	r1, [r2, #32]
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003870:	3a01      	subs	r2, #1
 8003872:	0112      	lsls	r2, r2, #4
 8003874:	4311      	orrs	r1, r2
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800387a:	0212      	lsls	r2, r2, #8
 800387c:	4311      	orrs	r1, r2
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003882:	0852      	lsrs	r2, r2, #1
 8003884:	3a01      	subs	r2, #1
 8003886:	0552      	lsls	r2, r2, #21
 8003888:	4311      	orrs	r1, r2
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800388e:	0852      	lsrs	r2, r2, #1
 8003890:	3a01      	subs	r2, #1
 8003892:	0652      	lsls	r2, r2, #25
 8003894:	4311      	orrs	r1, r2
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800389a:	06d2      	lsls	r2, r2, #27
 800389c:	430a      	orrs	r2, r1
 800389e:	4947      	ldr	r1, [pc, #284]	; (80039bc <HAL_RCC_OscConfig+0x628>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038a4:	4b45      	ldr	r3, [pc, #276]	; (80039bc <HAL_RCC_OscConfig+0x628>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a44      	ldr	r2, [pc, #272]	; (80039bc <HAL_RCC_OscConfig+0x628>)
 80038aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038ae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038b0:	4b42      	ldr	r3, [pc, #264]	; (80039bc <HAL_RCC_OscConfig+0x628>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	4a41      	ldr	r2, [pc, #260]	; (80039bc <HAL_RCC_OscConfig+0x628>)
 80038b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038bc:	f7fd fd6a 	bl	8001394 <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c4:	f7fd fd66 	bl	8001394 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e06e      	b.n	80039b4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038d6:	4b39      	ldr	r3, [pc, #228]	; (80039bc <HAL_RCC_OscConfig+0x628>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d0f0      	beq.n	80038c4 <HAL_RCC_OscConfig+0x530>
 80038e2:	e066      	b.n	80039b2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038e4:	4b35      	ldr	r3, [pc, #212]	; (80039bc <HAL_RCC_OscConfig+0x628>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a34      	ldr	r2, [pc, #208]	; (80039bc <HAL_RCC_OscConfig+0x628>)
 80038ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038ee:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80038f0:	4b32      	ldr	r3, [pc, #200]	; (80039bc <HAL_RCC_OscConfig+0x628>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	4a31      	ldr	r2, [pc, #196]	; (80039bc <HAL_RCC_OscConfig+0x628>)
 80038f6:	f023 0303 	bic.w	r3, r3, #3
 80038fa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80038fc:	4b2f      	ldr	r3, [pc, #188]	; (80039bc <HAL_RCC_OscConfig+0x628>)
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	4a2e      	ldr	r2, [pc, #184]	; (80039bc <HAL_RCC_OscConfig+0x628>)
 8003902:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800390a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390c:	f7fd fd42 	bl	8001394 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003914:	f7fd fd3e 	bl	8001394 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e046      	b.n	80039b4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003926:	4b25      	ldr	r3, [pc, #148]	; (80039bc <HAL_RCC_OscConfig+0x628>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1f0      	bne.n	8003914 <HAL_RCC_OscConfig+0x580>
 8003932:	e03e      	b.n	80039b2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d101      	bne.n	8003940 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e039      	b.n	80039b4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003940:	4b1e      	ldr	r3, [pc, #120]	; (80039bc <HAL_RCC_OscConfig+0x628>)
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f003 0203 	and.w	r2, r3, #3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	429a      	cmp	r2, r3
 8003952:	d12c      	bne.n	80039ae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	3b01      	subs	r3, #1
 8003960:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003962:	429a      	cmp	r2, r3
 8003964:	d123      	bne.n	80039ae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003970:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003972:	429a      	cmp	r2, r3
 8003974:	d11b      	bne.n	80039ae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003980:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003982:	429a      	cmp	r2, r3
 8003984:	d113      	bne.n	80039ae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003990:	085b      	lsrs	r3, r3, #1
 8003992:	3b01      	subs	r3, #1
 8003994:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003996:	429a      	cmp	r2, r3
 8003998:	d109      	bne.n	80039ae <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a4:	085b      	lsrs	r3, r3, #1
 80039a6:	3b01      	subs	r3, #1
 80039a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d001      	beq.n	80039b2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e000      	b.n	80039b4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3720      	adds	r7, #32
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	40021000 	.word	0x40021000
 80039c0:	019f800c 	.word	0x019f800c

080039c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80039ce:	2300      	movs	r3, #0
 80039d0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e11e      	b.n	8003c1a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039dc:	4b91      	ldr	r3, [pc, #580]	; (8003c24 <HAL_RCC_ClockConfig+0x260>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 030f 	and.w	r3, r3, #15
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d910      	bls.n	8003a0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ea:	4b8e      	ldr	r3, [pc, #568]	; (8003c24 <HAL_RCC_ClockConfig+0x260>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f023 020f 	bic.w	r2, r3, #15
 80039f2:	498c      	ldr	r1, [pc, #560]	; (8003c24 <HAL_RCC_ClockConfig+0x260>)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039fa:	4b8a      	ldr	r3, [pc, #552]	; (8003c24 <HAL_RCC_ClockConfig+0x260>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d001      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e106      	b.n	8003c1a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d073      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2b03      	cmp	r3, #3
 8003a1e:	d129      	bne.n	8003a74 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a20:	4b81      	ldr	r3, [pc, #516]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e0f4      	b.n	8003c1a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003a30:	f000 f99e 	bl	8003d70 <RCC_GetSysClockFreqFromPLLSource>
 8003a34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	4a7c      	ldr	r2, [pc, #496]	; (8003c2c <HAL_RCC_ClockConfig+0x268>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d93f      	bls.n	8003abe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a3e:	4b7a      	ldr	r3, [pc, #488]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d009      	beq.n	8003a5e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d033      	beq.n	8003abe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d12f      	bne.n	8003abe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a5e:	4b72      	ldr	r3, [pc, #456]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a66:	4a70      	ldr	r2, [pc, #448]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a6c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a6e:	2380      	movs	r3, #128	; 0x80
 8003a70:	617b      	str	r3, [r7, #20]
 8003a72:	e024      	b.n	8003abe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d107      	bne.n	8003a8c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a7c:	4b6a      	ldr	r3, [pc, #424]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d109      	bne.n	8003a9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e0c6      	b.n	8003c1a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a8c:	4b66      	ldr	r3, [pc, #408]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d101      	bne.n	8003a9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e0be      	b.n	8003c1a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003a9c:	f000 f8ce 	bl	8003c3c <HAL_RCC_GetSysClockFreq>
 8003aa0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	4a61      	ldr	r2, [pc, #388]	; (8003c2c <HAL_RCC_ClockConfig+0x268>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d909      	bls.n	8003abe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003aaa:	4b5f      	ldr	r3, [pc, #380]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ab2:	4a5d      	ldr	r2, [pc, #372]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ab8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003aba:	2380      	movs	r3, #128	; 0x80
 8003abc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003abe:	4b5a      	ldr	r3, [pc, #360]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f023 0203 	bic.w	r2, r3, #3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	4957      	ldr	r1, [pc, #348]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ad0:	f7fd fc60 	bl	8001394 <HAL_GetTick>
 8003ad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad6:	e00a      	b.n	8003aee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad8:	f7fd fc5c 	bl	8001394 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e095      	b.n	8003c1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aee:	4b4e      	ldr	r3, [pc, #312]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 020c 	and.w	r2, r3, #12
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d1eb      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d023      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d005      	beq.n	8003b24 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b18:	4b43      	ldr	r3, [pc, #268]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	4a42      	ldr	r2, [pc, #264]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003b1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b22:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0308 	and.w	r3, r3, #8
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d007      	beq.n	8003b40 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003b30:	4b3d      	ldr	r3, [pc, #244]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003b38:	4a3b      	ldr	r2, [pc, #236]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003b3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b3e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b40:	4b39      	ldr	r3, [pc, #228]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	4936      	ldr	r1, [pc, #216]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	608b      	str	r3, [r1, #8]
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	2b80      	cmp	r3, #128	; 0x80
 8003b58:	d105      	bne.n	8003b66 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003b5a:	4b33      	ldr	r3, [pc, #204]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	4a32      	ldr	r2, [pc, #200]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003b60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b64:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b66:	4b2f      	ldr	r3, [pc, #188]	; (8003c24 <HAL_RCC_ClockConfig+0x260>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 030f 	and.w	r3, r3, #15
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d21d      	bcs.n	8003bb0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b74:	4b2b      	ldr	r3, [pc, #172]	; (8003c24 <HAL_RCC_ClockConfig+0x260>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f023 020f 	bic.w	r2, r3, #15
 8003b7c:	4929      	ldr	r1, [pc, #164]	; (8003c24 <HAL_RCC_ClockConfig+0x260>)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b84:	f7fd fc06 	bl	8001394 <HAL_GetTick>
 8003b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b8a:	e00a      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b8c:	f7fd fc02 	bl	8001394 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e03b      	b.n	8003c1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba2:	4b20      	ldr	r3, [pc, #128]	; (8003c24 <HAL_RCC_ClockConfig+0x260>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 030f 	and.w	r3, r3, #15
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d1ed      	bne.n	8003b8c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0304 	and.w	r3, r3, #4
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d008      	beq.n	8003bce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bbc:	4b1a      	ldr	r3, [pc, #104]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	4917      	ldr	r1, [pc, #92]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0308 	and.w	r3, r3, #8
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d009      	beq.n	8003bee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bda:	4b13      	ldr	r3, [pc, #76]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	490f      	ldr	r1, [pc, #60]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003bee:	f000 f825 	bl	8003c3c <HAL_RCC_GetSysClockFreq>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	4b0c      	ldr	r3, [pc, #48]	; (8003c28 <HAL_RCC_ClockConfig+0x264>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	091b      	lsrs	r3, r3, #4
 8003bfa:	f003 030f 	and.w	r3, r3, #15
 8003bfe:	490c      	ldr	r1, [pc, #48]	; (8003c30 <HAL_RCC_ClockConfig+0x26c>)
 8003c00:	5ccb      	ldrb	r3, [r1, r3]
 8003c02:	f003 031f 	and.w	r3, r3, #31
 8003c06:	fa22 f303 	lsr.w	r3, r2, r3
 8003c0a:	4a0a      	ldr	r2, [pc, #40]	; (8003c34 <HAL_RCC_ClockConfig+0x270>)
 8003c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003c0e:	4b0a      	ldr	r3, [pc, #40]	; (8003c38 <HAL_RCC_ClockConfig+0x274>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fd fb72 	bl	80012fc <HAL_InitTick>
 8003c18:	4603      	mov	r3, r0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3718      	adds	r7, #24
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	40022000 	.word	0x40022000
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	04c4b400 	.word	0x04c4b400
 8003c30:	08006b94 	.word	0x08006b94
 8003c34:	20000000 	.word	0x20000000
 8003c38:	20000004 	.word	0x20000004

08003c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b087      	sub	sp, #28
 8003c40:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003c42:	4b2c      	ldr	r3, [pc, #176]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 030c 	and.w	r3, r3, #12
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	d102      	bne.n	8003c54 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c4e:	4b2a      	ldr	r3, [pc, #168]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c50:	613b      	str	r3, [r7, #16]
 8003c52:	e047      	b.n	8003ce4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003c54:	4b27      	ldr	r3, [pc, #156]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f003 030c 	and.w	r3, r3, #12
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d102      	bne.n	8003c66 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c60:	4b26      	ldr	r3, [pc, #152]	; (8003cfc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c62:	613b      	str	r3, [r7, #16]
 8003c64:	e03e      	b.n	8003ce4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003c66:	4b23      	ldr	r3, [pc, #140]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f003 030c 	and.w	r3, r3, #12
 8003c6e:	2b0c      	cmp	r3, #12
 8003c70:	d136      	bne.n	8003ce0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c72:	4b20      	ldr	r3, [pc, #128]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	f003 0303 	and.w	r3, r3, #3
 8003c7a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c7c:	4b1d      	ldr	r3, [pc, #116]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	091b      	lsrs	r3, r3, #4
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	3301      	adds	r3, #1
 8003c88:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2b03      	cmp	r3, #3
 8003c8e:	d10c      	bne.n	8003caa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c90:	4a1a      	ldr	r2, [pc, #104]	; (8003cfc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c98:	4a16      	ldr	r2, [pc, #88]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c9a:	68d2      	ldr	r2, [r2, #12]
 8003c9c:	0a12      	lsrs	r2, r2, #8
 8003c9e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ca2:	fb02 f303 	mul.w	r3, r2, r3
 8003ca6:	617b      	str	r3, [r7, #20]
      break;
 8003ca8:	e00c      	b.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003caa:	4a13      	ldr	r2, [pc, #76]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb2:	4a10      	ldr	r2, [pc, #64]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cb4:	68d2      	ldr	r2, [r2, #12]
 8003cb6:	0a12      	lsrs	r2, r2, #8
 8003cb8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003cbc:	fb02 f303 	mul.w	r3, r2, r3
 8003cc0:	617b      	str	r3, [r7, #20]
      break;
 8003cc2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cc4:	4b0b      	ldr	r3, [pc, #44]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	0e5b      	lsrs	r3, r3, #25
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	3301      	adds	r3, #1
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cdc:	613b      	str	r3, [r7, #16]
 8003cde:	e001      	b.n	8003ce4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003ce4:	693b      	ldr	r3, [r7, #16]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	371c      	adds	r7, #28
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	00f42400 	.word	0x00f42400
 8003cfc:	016e3600 	.word	0x016e3600

08003d00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d04:	4b03      	ldr	r3, [pc, #12]	; (8003d14 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d06:	681b      	ldr	r3, [r3, #0]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	20000000 	.word	0x20000000

08003d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d1c:	f7ff fff0 	bl	8003d00 <HAL_RCC_GetHCLKFreq>
 8003d20:	4602      	mov	r2, r0
 8003d22:	4b06      	ldr	r3, [pc, #24]	; (8003d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	0a1b      	lsrs	r3, r3, #8
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	4904      	ldr	r1, [pc, #16]	; (8003d40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d2e:	5ccb      	ldrb	r3, [r1, r3]
 8003d30:	f003 031f 	and.w	r3, r3, #31
 8003d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	08006ba4 	.word	0x08006ba4

08003d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d48:	f7ff ffda 	bl	8003d00 <HAL_RCC_GetHCLKFreq>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	4b06      	ldr	r3, [pc, #24]	; (8003d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	0adb      	lsrs	r3, r3, #11
 8003d54:	f003 0307 	and.w	r3, r3, #7
 8003d58:	4904      	ldr	r1, [pc, #16]	; (8003d6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d5a:	5ccb      	ldrb	r3, [r1, r3]
 8003d5c:	f003 031f 	and.w	r3, r3, #31
 8003d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	08006ba4 	.word	0x08006ba4

08003d70 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b087      	sub	sp, #28
 8003d74:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d76:	4b1e      	ldr	r3, [pc, #120]	; (8003df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	f003 0303 	and.w	r3, r3, #3
 8003d7e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d80:	4b1b      	ldr	r3, [pc, #108]	; (8003df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	091b      	lsrs	r3, r3, #4
 8003d86:	f003 030f 	and.w	r3, r3, #15
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	2b03      	cmp	r3, #3
 8003d92:	d10c      	bne.n	8003dae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d94:	4a17      	ldr	r2, [pc, #92]	; (8003df4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d9c:	4a14      	ldr	r2, [pc, #80]	; (8003df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d9e:	68d2      	ldr	r2, [r2, #12]
 8003da0:	0a12      	lsrs	r2, r2, #8
 8003da2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003da6:	fb02 f303 	mul.w	r3, r2, r3
 8003daa:	617b      	str	r3, [r7, #20]
    break;
 8003dac:	e00c      	b.n	8003dc8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003dae:	4a12      	ldr	r2, [pc, #72]	; (8003df8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db6:	4a0e      	ldr	r2, [pc, #56]	; (8003df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003db8:	68d2      	ldr	r2, [r2, #12]
 8003dba:	0a12      	lsrs	r2, r2, #8
 8003dbc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003dc0:	fb02 f303 	mul.w	r3, r2, r3
 8003dc4:	617b      	str	r3, [r7, #20]
    break;
 8003dc6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003dc8:	4b09      	ldr	r3, [pc, #36]	; (8003df0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	0e5b      	lsrs	r3, r3, #25
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003de2:	687b      	ldr	r3, [r7, #4]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	371c      	adds	r7, #28
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	40021000 	.word	0x40021000
 8003df4:	016e3600 	.word	0x016e3600
 8003df8:	00f42400 	.word	0x00f42400

08003dfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e04:	2300      	movs	r3, #0
 8003e06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e08:	2300      	movs	r3, #0
 8003e0a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 8098 	beq.w	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e1e:	4b43      	ldr	r3, [pc, #268]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10d      	bne.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e2a:	4b40      	ldr	r3, [pc, #256]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e2e:	4a3f      	ldr	r2, [pc, #252]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e34:	6593      	str	r3, [r2, #88]	; 0x58
 8003e36:	4b3d      	ldr	r3, [pc, #244]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e3e:	60bb      	str	r3, [r7, #8]
 8003e40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e42:	2301      	movs	r3, #1
 8003e44:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e46:	4b3a      	ldr	r3, [pc, #232]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a39      	ldr	r2, [pc, #228]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e50:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e52:	f7fd fa9f 	bl	8001394 <HAL_GetTick>
 8003e56:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e58:	e009      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e5a:	f7fd fa9b 	bl	8001394 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d902      	bls.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	74fb      	strb	r3, [r7, #19]
        break;
 8003e6c:	e005      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e6e:	4b30      	ldr	r3, [pc, #192]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0ef      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003e7a:	7cfb      	ldrb	r3, [r7, #19]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d159      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e80:	4b2a      	ldr	r3, [pc, #168]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e8a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d01e      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d019      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e9c:	4b23      	ldr	r3, [pc, #140]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ea6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ea8:	4b20      	ldr	r3, [pc, #128]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eae:	4a1f      	ldr	r2, [pc, #124]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003eb8:	4b1c      	ldr	r3, [pc, #112]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ebe:	4a1b      	ldr	r2, [pc, #108]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ec0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ec4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ec8:	4a18      	ldr	r2, [pc, #96]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d016      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eda:	f7fd fa5b 	bl	8001394 <HAL_GetTick>
 8003ede:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ee0:	e00b      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ee2:	f7fd fa57 	bl	8001394 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d902      	bls.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	74fb      	strb	r3, [r7, #19]
            break;
 8003ef8:	e006      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003efa:	4b0c      	ldr	r3, [pc, #48]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d0ec      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003f08:	7cfb      	ldrb	r3, [r7, #19]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10b      	bne.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f0e:	4b07      	ldr	r3, [pc, #28]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1c:	4903      	ldr	r1, [pc, #12]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f24:	e008      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f26:	7cfb      	ldrb	r3, [r7, #19]
 8003f28:	74bb      	strb	r3, [r7, #18]
 8003f2a:	e005      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003f2c:	40021000 	.word	0x40021000
 8003f30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f34:	7cfb      	ldrb	r3, [r7, #19]
 8003f36:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f38:	7c7b      	ldrb	r3, [r7, #17]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d105      	bne.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f3e:	4ba6      	ldr	r3, [pc, #664]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f42:	4aa5      	ldr	r2, [pc, #660]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f48:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00a      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f56:	4ba0      	ldr	r3, [pc, #640]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5c:	f023 0203 	bic.w	r2, r3, #3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	499c      	ldr	r1, [pc, #624]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00a      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f78:	4b97      	ldr	r3, [pc, #604]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7e:	f023 020c 	bic.w	r2, r3, #12
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	4994      	ldr	r1, [pc, #592]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0304 	and.w	r3, r3, #4
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00a      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f9a:	4b8f      	ldr	r3, [pc, #572]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	498b      	ldr	r1, [pc, #556]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0308 	and.w	r3, r3, #8
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00a      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fbc:	4b86      	ldr	r3, [pc, #536]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	4983      	ldr	r1, [pc, #524]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0320 	and.w	r3, r3, #32
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00a      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fde:	4b7e      	ldr	r3, [pc, #504]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	497a      	ldr	r1, [pc, #488]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00a      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004000:	4b75      	ldr	r3, [pc, #468]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004006:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	4972      	ldr	r1, [pc, #456]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004010:	4313      	orrs	r3, r2
 8004012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00a      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004022:	4b6d      	ldr	r3, [pc, #436]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004028:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	69db      	ldr	r3, [r3, #28]
 8004030:	4969      	ldr	r1, [pc, #420]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004032:	4313      	orrs	r3, r2
 8004034:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00a      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004044:	4b64      	ldr	r3, [pc, #400]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	4961      	ldr	r1, [pc, #388]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004054:	4313      	orrs	r3, r2
 8004056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00a      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004066:	4b5c      	ldr	r3, [pc, #368]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800406c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	4958      	ldr	r1, [pc, #352]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004076:	4313      	orrs	r3, r2
 8004078:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004084:	2b00      	cmp	r3, #0
 8004086:	d015      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004088:	4b53      	ldr	r3, [pc, #332]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800408a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800408e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004096:	4950      	ldr	r1, [pc, #320]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004098:	4313      	orrs	r3, r2
 800409a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040a6:	d105      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040a8:	4b4b      	ldr	r3, [pc, #300]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	4a4a      	ldr	r2, [pc, #296]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040b2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d015      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040c0:	4b45      	ldr	r3, [pc, #276]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ce:	4942      	ldr	r1, [pc, #264]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040de:	d105      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040e0:	4b3d      	ldr	r3, [pc, #244]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	4a3c      	ldr	r2, [pc, #240]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040ea:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d015      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80040f8:	4b37      	ldr	r3, [pc, #220]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004106:	4934      	ldr	r1, [pc, #208]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004108:	4313      	orrs	r3, r2
 800410a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004112:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004116:	d105      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004118:	4b2f      	ldr	r3, [pc, #188]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	4a2e      	ldr	r2, [pc, #184]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800411e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004122:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d015      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004130:	4b29      	ldr	r3, [pc, #164]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004136:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800413e:	4926      	ldr	r1, [pc, #152]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004140:	4313      	orrs	r3, r2
 8004142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800414a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800414e:	d105      	bne.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004150:	4b21      	ldr	r3, [pc, #132]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	4a20      	ldr	r2, [pc, #128]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004156:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800415a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d015      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004168:	4b1b      	ldr	r3, [pc, #108]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800416a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004176:	4918      	ldr	r1, [pc, #96]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004178:	4313      	orrs	r3, r2
 800417a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004182:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004186:	d105      	bne.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004188:	4b13      	ldr	r3, [pc, #76]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	4a12      	ldr	r2, [pc, #72]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800418e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004192:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d015      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80041a0:	4b0d      	ldr	r3, [pc, #52]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ae:	490a      	ldr	r1, [pc, #40]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041be:	d105      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80041c0:	4b05      	ldr	r3, [pc, #20]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	4a04      	ldr	r2, [pc, #16]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80041cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3718      	adds	r7, #24
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	40021000 	.word	0x40021000

080041dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e049      	b.n	8004282 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d106      	bne.n	8004208 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f7fc fef0 	bl	8000fe8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2202      	movs	r2, #2
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3304      	adds	r3, #4
 8004218:	4619      	mov	r1, r3
 800421a:	4610      	mov	r0, r2
 800421c:	f000 fc08 	bl	8004a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
	...

0800428c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b01      	cmp	r3, #1
 800429e:	d001      	beq.n	80042a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e042      	b.n	800432a <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a21      	ldr	r2, [pc, #132]	; (8004338 <HAL_TIM_Base_Start+0xac>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d018      	beq.n	80042e8 <HAL_TIM_Base_Start+0x5c>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042be:	d013      	beq.n	80042e8 <HAL_TIM_Base_Start+0x5c>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a1d      	ldr	r2, [pc, #116]	; (800433c <HAL_TIM_Base_Start+0xb0>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d00e      	beq.n	80042e8 <HAL_TIM_Base_Start+0x5c>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a1c      	ldr	r2, [pc, #112]	; (8004340 <HAL_TIM_Base_Start+0xb4>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d009      	beq.n	80042e8 <HAL_TIM_Base_Start+0x5c>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a1a      	ldr	r2, [pc, #104]	; (8004344 <HAL_TIM_Base_Start+0xb8>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d004      	beq.n	80042e8 <HAL_TIM_Base_Start+0x5c>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a19      	ldr	r2, [pc, #100]	; (8004348 <HAL_TIM_Base_Start+0xbc>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d115      	bne.n	8004314 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689a      	ldr	r2, [r3, #8]
 80042ee:	4b17      	ldr	r3, [pc, #92]	; (800434c <HAL_TIM_Base_Start+0xc0>)
 80042f0:	4013      	ands	r3, r2
 80042f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2b06      	cmp	r3, #6
 80042f8:	d015      	beq.n	8004326 <HAL_TIM_Base_Start+0x9a>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004300:	d011      	beq.n	8004326 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f042 0201 	orr.w	r2, r2, #1
 8004310:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004312:	e008      	b.n	8004326 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0201 	orr.w	r2, r2, #1
 8004322:	601a      	str	r2, [r3, #0]
 8004324:	e000      	b.n	8004328 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004326:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	40012c00 	.word	0x40012c00
 800433c:	40000400 	.word	0x40000400
 8004340:	40000800 	.word	0x40000800
 8004344:	40013400 	.word	0x40013400
 8004348:	40014000 	.word	0x40014000
 800434c:	00010007 	.word	0x00010007

08004350 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e049      	b.n	80043f6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d106      	bne.n	800437c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f841 	bl	80043fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2202      	movs	r2, #2
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	3304      	adds	r3, #4
 800438c:	4619      	mov	r1, r3
 800438e:	4610      	mov	r0, r2
 8004390:	f000 fb4e 	bl	8004a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80043fe:	b480      	push	{r7}
 8004400:	b083      	sub	sp, #12
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
	...

08004414 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d109      	bne.n	8004438 <HAL_TIM_PWM_Start+0x24>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b01      	cmp	r3, #1
 800442e:	bf14      	ite	ne
 8004430:	2301      	movne	r3, #1
 8004432:	2300      	moveq	r3, #0
 8004434:	b2db      	uxtb	r3, r3
 8004436:	e03c      	b.n	80044b2 <HAL_TIM_PWM_Start+0x9e>
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	2b04      	cmp	r3, #4
 800443c:	d109      	bne.n	8004452 <HAL_TIM_PWM_Start+0x3e>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b01      	cmp	r3, #1
 8004448:	bf14      	ite	ne
 800444a:	2301      	movne	r3, #1
 800444c:	2300      	moveq	r3, #0
 800444e:	b2db      	uxtb	r3, r3
 8004450:	e02f      	b.n	80044b2 <HAL_TIM_PWM_Start+0x9e>
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	2b08      	cmp	r3, #8
 8004456:	d109      	bne.n	800446c <HAL_TIM_PWM_Start+0x58>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800445e:	b2db      	uxtb	r3, r3
 8004460:	2b01      	cmp	r3, #1
 8004462:	bf14      	ite	ne
 8004464:	2301      	movne	r3, #1
 8004466:	2300      	moveq	r3, #0
 8004468:	b2db      	uxtb	r3, r3
 800446a:	e022      	b.n	80044b2 <HAL_TIM_PWM_Start+0x9e>
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	2b0c      	cmp	r3, #12
 8004470:	d109      	bne.n	8004486 <HAL_TIM_PWM_Start+0x72>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b01      	cmp	r3, #1
 800447c:	bf14      	ite	ne
 800447e:	2301      	movne	r3, #1
 8004480:	2300      	moveq	r3, #0
 8004482:	b2db      	uxtb	r3, r3
 8004484:	e015      	b.n	80044b2 <HAL_TIM_PWM_Start+0x9e>
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	2b10      	cmp	r3, #16
 800448a:	d109      	bne.n	80044a0 <HAL_TIM_PWM_Start+0x8c>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b01      	cmp	r3, #1
 8004496:	bf14      	ite	ne
 8004498:	2301      	movne	r3, #1
 800449a:	2300      	moveq	r3, #0
 800449c:	b2db      	uxtb	r3, r3
 800449e:	e008      	b.n	80044b2 <HAL_TIM_PWM_Start+0x9e>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	bf14      	ite	ne
 80044ac:	2301      	movne	r3, #1
 80044ae:	2300      	moveq	r3, #0
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e097      	b.n	80045ea <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d104      	bne.n	80044ca <HAL_TIM_PWM_Start+0xb6>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2202      	movs	r2, #2
 80044c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044c8:	e023      	b.n	8004512 <HAL_TIM_PWM_Start+0xfe>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b04      	cmp	r3, #4
 80044ce:	d104      	bne.n	80044da <HAL_TIM_PWM_Start+0xc6>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2202      	movs	r2, #2
 80044d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044d8:	e01b      	b.n	8004512 <HAL_TIM_PWM_Start+0xfe>
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	2b08      	cmp	r3, #8
 80044de:	d104      	bne.n	80044ea <HAL_TIM_PWM_Start+0xd6>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2202      	movs	r2, #2
 80044e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044e8:	e013      	b.n	8004512 <HAL_TIM_PWM_Start+0xfe>
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	2b0c      	cmp	r3, #12
 80044ee:	d104      	bne.n	80044fa <HAL_TIM_PWM_Start+0xe6>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2202      	movs	r2, #2
 80044f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044f8:	e00b      	b.n	8004512 <HAL_TIM_PWM_Start+0xfe>
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2b10      	cmp	r3, #16
 80044fe:	d104      	bne.n	800450a <HAL_TIM_PWM_Start+0xf6>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2202      	movs	r2, #2
 8004504:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004508:	e003      	b.n	8004512 <HAL_TIM_PWM_Start+0xfe>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2202      	movs	r2, #2
 800450e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2201      	movs	r2, #1
 8004518:	6839      	ldr	r1, [r7, #0]
 800451a:	4618      	mov	r0, r3
 800451c:	f000 feaa 	bl	8005274 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a33      	ldr	r2, [pc, #204]	; (80045f4 <HAL_TIM_PWM_Start+0x1e0>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d013      	beq.n	8004552 <HAL_TIM_PWM_Start+0x13e>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a32      	ldr	r2, [pc, #200]	; (80045f8 <HAL_TIM_PWM_Start+0x1e4>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d00e      	beq.n	8004552 <HAL_TIM_PWM_Start+0x13e>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a30      	ldr	r2, [pc, #192]	; (80045fc <HAL_TIM_PWM_Start+0x1e8>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d009      	beq.n	8004552 <HAL_TIM_PWM_Start+0x13e>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a2f      	ldr	r2, [pc, #188]	; (8004600 <HAL_TIM_PWM_Start+0x1ec>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d004      	beq.n	8004552 <HAL_TIM_PWM_Start+0x13e>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a2d      	ldr	r2, [pc, #180]	; (8004604 <HAL_TIM_PWM_Start+0x1f0>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d101      	bne.n	8004556 <HAL_TIM_PWM_Start+0x142>
 8004552:	2301      	movs	r3, #1
 8004554:	e000      	b.n	8004558 <HAL_TIM_PWM_Start+0x144>
 8004556:	2300      	movs	r3, #0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d007      	beq.n	800456c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800456a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a20      	ldr	r2, [pc, #128]	; (80045f4 <HAL_TIM_PWM_Start+0x1e0>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d018      	beq.n	80045a8 <HAL_TIM_PWM_Start+0x194>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800457e:	d013      	beq.n	80045a8 <HAL_TIM_PWM_Start+0x194>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a20      	ldr	r2, [pc, #128]	; (8004608 <HAL_TIM_PWM_Start+0x1f4>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d00e      	beq.n	80045a8 <HAL_TIM_PWM_Start+0x194>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a1f      	ldr	r2, [pc, #124]	; (800460c <HAL_TIM_PWM_Start+0x1f8>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d009      	beq.n	80045a8 <HAL_TIM_PWM_Start+0x194>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a17      	ldr	r2, [pc, #92]	; (80045f8 <HAL_TIM_PWM_Start+0x1e4>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d004      	beq.n	80045a8 <HAL_TIM_PWM_Start+0x194>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a16      	ldr	r2, [pc, #88]	; (80045fc <HAL_TIM_PWM_Start+0x1e8>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d115      	bne.n	80045d4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689a      	ldr	r2, [r3, #8]
 80045ae:	4b18      	ldr	r3, [pc, #96]	; (8004610 <HAL_TIM_PWM_Start+0x1fc>)
 80045b0:	4013      	ands	r3, r2
 80045b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2b06      	cmp	r3, #6
 80045b8:	d015      	beq.n	80045e6 <HAL_TIM_PWM_Start+0x1d2>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c0:	d011      	beq.n	80045e6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f042 0201 	orr.w	r2, r2, #1
 80045d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045d2:	e008      	b.n	80045e6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f042 0201 	orr.w	r2, r2, #1
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	e000      	b.n	80045e8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	40012c00 	.word	0x40012c00
 80045f8:	40013400 	.word	0x40013400
 80045fc:	40014000 	.word	0x40014000
 8004600:	40014400 	.word	0x40014400
 8004604:	40014800 	.word	0x40014800
 8004608:	40000400 	.word	0x40000400
 800460c:	40000800 	.word	0x40000800
 8004610:	00010007 	.word	0x00010007

08004614 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004620:	2300      	movs	r3, #0
 8004622:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800462a:	2b01      	cmp	r3, #1
 800462c:	d101      	bne.n	8004632 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800462e:	2302      	movs	r3, #2
 8004630:	e0ff      	b.n	8004832 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2b14      	cmp	r3, #20
 800463e:	f200 80f0 	bhi.w	8004822 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004642:	a201      	add	r2, pc, #4	; (adr r2, 8004648 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004648:	0800469d 	.word	0x0800469d
 800464c:	08004823 	.word	0x08004823
 8004650:	08004823 	.word	0x08004823
 8004654:	08004823 	.word	0x08004823
 8004658:	080046dd 	.word	0x080046dd
 800465c:	08004823 	.word	0x08004823
 8004660:	08004823 	.word	0x08004823
 8004664:	08004823 	.word	0x08004823
 8004668:	0800471f 	.word	0x0800471f
 800466c:	08004823 	.word	0x08004823
 8004670:	08004823 	.word	0x08004823
 8004674:	08004823 	.word	0x08004823
 8004678:	0800475f 	.word	0x0800475f
 800467c:	08004823 	.word	0x08004823
 8004680:	08004823 	.word	0x08004823
 8004684:	08004823 	.word	0x08004823
 8004688:	080047a1 	.word	0x080047a1
 800468c:	08004823 	.word	0x08004823
 8004690:	08004823 	.word	0x08004823
 8004694:	08004823 	.word	0x08004823
 8004698:	080047e1 	.word	0x080047e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68b9      	ldr	r1, [r7, #8]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 fa54 	bl	8004b50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	699a      	ldr	r2, [r3, #24]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f042 0208 	orr.w	r2, r2, #8
 80046b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	699a      	ldr	r2, [r3, #24]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 0204 	bic.w	r2, r2, #4
 80046c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6999      	ldr	r1, [r3, #24]
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	691a      	ldr	r2, [r3, #16]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	619a      	str	r2, [r3, #24]
      break;
 80046da:	e0a5      	b.n	8004828 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68b9      	ldr	r1, [r7, #8]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 fac4 	bl	8004c70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	699a      	ldr	r2, [r3, #24]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	699a      	ldr	r2, [r3, #24]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004706:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6999      	ldr	r1, [r3, #24]
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	021a      	lsls	r2, r3, #8
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	619a      	str	r2, [r3, #24]
      break;
 800471c:	e084      	b.n	8004828 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68b9      	ldr	r1, [r7, #8]
 8004724:	4618      	mov	r0, r3
 8004726:	f000 fb2d 	bl	8004d84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	69da      	ldr	r2, [r3, #28]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f042 0208 	orr.w	r2, r2, #8
 8004738:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	69da      	ldr	r2, [r3, #28]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 0204 	bic.w	r2, r2, #4
 8004748:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	69d9      	ldr	r1, [r3, #28]
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	691a      	ldr	r2, [r3, #16]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	430a      	orrs	r2, r1
 800475a:	61da      	str	r2, [r3, #28]
      break;
 800475c:	e064      	b.n	8004828 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68b9      	ldr	r1, [r7, #8]
 8004764:	4618      	mov	r0, r3
 8004766:	f000 fb95 	bl	8004e94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	69da      	ldr	r2, [r3, #28]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004778:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	69da      	ldr	r2, [r3, #28]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004788:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	69d9      	ldr	r1, [r3, #28]
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	021a      	lsls	r2, r3, #8
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	430a      	orrs	r2, r1
 800479c:	61da      	str	r2, [r3, #28]
      break;
 800479e:	e043      	b.n	8004828 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68b9      	ldr	r1, [r7, #8]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 fbfe 	bl	8004fa8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f042 0208 	orr.w	r2, r2, #8
 80047ba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 0204 	bic.w	r2, r2, #4
 80047ca:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	691a      	ldr	r2, [r3, #16]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80047de:	e023      	b.n	8004828 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68b9      	ldr	r1, [r7, #8]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 fc42 	bl	8005070 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047fa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800480a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	021a      	lsls	r2, r3, #8
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	430a      	orrs	r2, r1
 800481e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004820:	e002      	b.n	8004828 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	75fb      	strb	r3, [r7, #23]
      break;
 8004826:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004830:	7dfb      	ldrb	r3, [r7, #23]
}
 8004832:	4618      	mov	r0, r3
 8004834:	3718      	adds	r7, #24
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop

0800483c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004846:	2300      	movs	r3, #0
 8004848:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004850:	2b01      	cmp	r3, #1
 8004852:	d101      	bne.n	8004858 <HAL_TIM_ConfigClockSource+0x1c>
 8004854:	2302      	movs	r3, #2
 8004856:	e0de      	b.n	8004a16 <HAL_TIM_ConfigClockSource+0x1da>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2202      	movs	r2, #2
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004876:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800487a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004882:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a63      	ldr	r2, [pc, #396]	; (8004a20 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004892:	4293      	cmp	r3, r2
 8004894:	f000 80a9 	beq.w	80049ea <HAL_TIM_ConfigClockSource+0x1ae>
 8004898:	4a61      	ldr	r2, [pc, #388]	; (8004a20 <HAL_TIM_ConfigClockSource+0x1e4>)
 800489a:	4293      	cmp	r3, r2
 800489c:	f200 80ae 	bhi.w	80049fc <HAL_TIM_ConfigClockSource+0x1c0>
 80048a0:	4a60      	ldr	r2, [pc, #384]	; (8004a24 <HAL_TIM_ConfigClockSource+0x1e8>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	f000 80a1 	beq.w	80049ea <HAL_TIM_ConfigClockSource+0x1ae>
 80048a8:	4a5e      	ldr	r2, [pc, #376]	; (8004a24 <HAL_TIM_ConfigClockSource+0x1e8>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	f200 80a6 	bhi.w	80049fc <HAL_TIM_ConfigClockSource+0x1c0>
 80048b0:	4a5d      	ldr	r2, [pc, #372]	; (8004a28 <HAL_TIM_ConfigClockSource+0x1ec>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	f000 8099 	beq.w	80049ea <HAL_TIM_ConfigClockSource+0x1ae>
 80048b8:	4a5b      	ldr	r2, [pc, #364]	; (8004a28 <HAL_TIM_ConfigClockSource+0x1ec>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	f200 809e 	bhi.w	80049fc <HAL_TIM_ConfigClockSource+0x1c0>
 80048c0:	4a5a      	ldr	r2, [pc, #360]	; (8004a2c <HAL_TIM_ConfigClockSource+0x1f0>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	f000 8091 	beq.w	80049ea <HAL_TIM_ConfigClockSource+0x1ae>
 80048c8:	4a58      	ldr	r2, [pc, #352]	; (8004a2c <HAL_TIM_ConfigClockSource+0x1f0>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	f200 8096 	bhi.w	80049fc <HAL_TIM_ConfigClockSource+0x1c0>
 80048d0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80048d4:	f000 8089 	beq.w	80049ea <HAL_TIM_ConfigClockSource+0x1ae>
 80048d8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80048dc:	f200 808e 	bhi.w	80049fc <HAL_TIM_ConfigClockSource+0x1c0>
 80048e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048e4:	d03e      	beq.n	8004964 <HAL_TIM_ConfigClockSource+0x128>
 80048e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048ea:	f200 8087 	bhi.w	80049fc <HAL_TIM_ConfigClockSource+0x1c0>
 80048ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048f2:	f000 8086 	beq.w	8004a02 <HAL_TIM_ConfigClockSource+0x1c6>
 80048f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048fa:	d87f      	bhi.n	80049fc <HAL_TIM_ConfigClockSource+0x1c0>
 80048fc:	2b70      	cmp	r3, #112	; 0x70
 80048fe:	d01a      	beq.n	8004936 <HAL_TIM_ConfigClockSource+0xfa>
 8004900:	2b70      	cmp	r3, #112	; 0x70
 8004902:	d87b      	bhi.n	80049fc <HAL_TIM_ConfigClockSource+0x1c0>
 8004904:	2b60      	cmp	r3, #96	; 0x60
 8004906:	d050      	beq.n	80049aa <HAL_TIM_ConfigClockSource+0x16e>
 8004908:	2b60      	cmp	r3, #96	; 0x60
 800490a:	d877      	bhi.n	80049fc <HAL_TIM_ConfigClockSource+0x1c0>
 800490c:	2b50      	cmp	r3, #80	; 0x50
 800490e:	d03c      	beq.n	800498a <HAL_TIM_ConfigClockSource+0x14e>
 8004910:	2b50      	cmp	r3, #80	; 0x50
 8004912:	d873      	bhi.n	80049fc <HAL_TIM_ConfigClockSource+0x1c0>
 8004914:	2b40      	cmp	r3, #64	; 0x40
 8004916:	d058      	beq.n	80049ca <HAL_TIM_ConfigClockSource+0x18e>
 8004918:	2b40      	cmp	r3, #64	; 0x40
 800491a:	d86f      	bhi.n	80049fc <HAL_TIM_ConfigClockSource+0x1c0>
 800491c:	2b30      	cmp	r3, #48	; 0x30
 800491e:	d064      	beq.n	80049ea <HAL_TIM_ConfigClockSource+0x1ae>
 8004920:	2b30      	cmp	r3, #48	; 0x30
 8004922:	d86b      	bhi.n	80049fc <HAL_TIM_ConfigClockSource+0x1c0>
 8004924:	2b20      	cmp	r3, #32
 8004926:	d060      	beq.n	80049ea <HAL_TIM_ConfigClockSource+0x1ae>
 8004928:	2b20      	cmp	r3, #32
 800492a:	d867      	bhi.n	80049fc <HAL_TIM_ConfigClockSource+0x1c0>
 800492c:	2b00      	cmp	r3, #0
 800492e:	d05c      	beq.n	80049ea <HAL_TIM_ConfigClockSource+0x1ae>
 8004930:	2b10      	cmp	r3, #16
 8004932:	d05a      	beq.n	80049ea <HAL_TIM_ConfigClockSource+0x1ae>
 8004934:	e062      	b.n	80049fc <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6818      	ldr	r0, [r3, #0]
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	6899      	ldr	r1, [r3, #8]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	f000 fc75 	bl	8005234 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004958:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	609a      	str	r2, [r3, #8]
      break;
 8004962:	e04f      	b.n	8004a04 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6818      	ldr	r0, [r3, #0]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	6899      	ldr	r1, [r3, #8]
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	f000 fc5e 	bl	8005234 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689a      	ldr	r2, [r3, #8]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004986:	609a      	str	r2, [r3, #8]
      break;
 8004988:	e03c      	b.n	8004a04 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6818      	ldr	r0, [r3, #0]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	6859      	ldr	r1, [r3, #4]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	461a      	mov	r2, r3
 8004998:	f000 fbd0 	bl	800513c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2150      	movs	r1, #80	; 0x50
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 fc29 	bl	80051fa <TIM_ITRx_SetConfig>
      break;
 80049a8:	e02c      	b.n	8004a04 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6818      	ldr	r0, [r3, #0]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	6859      	ldr	r1, [r3, #4]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	461a      	mov	r2, r3
 80049b8:	f000 fbef 	bl	800519a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2160      	movs	r1, #96	; 0x60
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 fc19 	bl	80051fa <TIM_ITRx_SetConfig>
      break;
 80049c8:	e01c      	b.n	8004a04 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6818      	ldr	r0, [r3, #0]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	6859      	ldr	r1, [r3, #4]
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	461a      	mov	r2, r3
 80049d8:	f000 fbb0 	bl	800513c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2140      	movs	r1, #64	; 0x40
 80049e2:	4618      	mov	r0, r3
 80049e4:	f000 fc09 	bl	80051fa <TIM_ITRx_SetConfig>
      break;
 80049e8:	e00c      	b.n	8004a04 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4619      	mov	r1, r3
 80049f4:	4610      	mov	r0, r2
 80049f6:	f000 fc00 	bl	80051fa <TIM_ITRx_SetConfig>
      break;
 80049fa:	e003      	b.n	8004a04 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004a00:	e000      	b.n	8004a04 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8004a02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	00100070 	.word	0x00100070
 8004a24:	00100040 	.word	0x00100040
 8004a28:	00100030 	.word	0x00100030
 8004a2c:	00100020 	.word	0x00100020

08004a30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a3c      	ldr	r2, [pc, #240]	; (8004b34 <TIM_Base_SetConfig+0x104>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d00f      	beq.n	8004a68 <TIM_Base_SetConfig+0x38>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a4e:	d00b      	beq.n	8004a68 <TIM_Base_SetConfig+0x38>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a39      	ldr	r2, [pc, #228]	; (8004b38 <TIM_Base_SetConfig+0x108>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d007      	beq.n	8004a68 <TIM_Base_SetConfig+0x38>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a38      	ldr	r2, [pc, #224]	; (8004b3c <TIM_Base_SetConfig+0x10c>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d003      	beq.n	8004a68 <TIM_Base_SetConfig+0x38>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a37      	ldr	r2, [pc, #220]	; (8004b40 <TIM_Base_SetConfig+0x110>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d108      	bne.n	8004a7a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a2d      	ldr	r2, [pc, #180]	; (8004b34 <TIM_Base_SetConfig+0x104>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d01b      	beq.n	8004aba <TIM_Base_SetConfig+0x8a>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a88:	d017      	beq.n	8004aba <TIM_Base_SetConfig+0x8a>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a2a      	ldr	r2, [pc, #168]	; (8004b38 <TIM_Base_SetConfig+0x108>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d013      	beq.n	8004aba <TIM_Base_SetConfig+0x8a>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a29      	ldr	r2, [pc, #164]	; (8004b3c <TIM_Base_SetConfig+0x10c>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d00f      	beq.n	8004aba <TIM_Base_SetConfig+0x8a>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a28      	ldr	r2, [pc, #160]	; (8004b40 <TIM_Base_SetConfig+0x110>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d00b      	beq.n	8004aba <TIM_Base_SetConfig+0x8a>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a27      	ldr	r2, [pc, #156]	; (8004b44 <TIM_Base_SetConfig+0x114>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d007      	beq.n	8004aba <TIM_Base_SetConfig+0x8a>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a26      	ldr	r2, [pc, #152]	; (8004b48 <TIM_Base_SetConfig+0x118>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d003      	beq.n	8004aba <TIM_Base_SetConfig+0x8a>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a25      	ldr	r2, [pc, #148]	; (8004b4c <TIM_Base_SetConfig+0x11c>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d108      	bne.n	8004acc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ac0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a10      	ldr	r2, [pc, #64]	; (8004b34 <TIM_Base_SetConfig+0x104>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d00f      	beq.n	8004b18 <TIM_Base_SetConfig+0xe8>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a11      	ldr	r2, [pc, #68]	; (8004b40 <TIM_Base_SetConfig+0x110>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d00b      	beq.n	8004b18 <TIM_Base_SetConfig+0xe8>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a10      	ldr	r2, [pc, #64]	; (8004b44 <TIM_Base_SetConfig+0x114>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d007      	beq.n	8004b18 <TIM_Base_SetConfig+0xe8>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a0f      	ldr	r2, [pc, #60]	; (8004b48 <TIM_Base_SetConfig+0x118>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d003      	beq.n	8004b18 <TIM_Base_SetConfig+0xe8>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a0e      	ldr	r2, [pc, #56]	; (8004b4c <TIM_Base_SetConfig+0x11c>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d103      	bne.n	8004b20 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	691a      	ldr	r2, [r3, #16]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	615a      	str	r2, [r3, #20]
}
 8004b26:	bf00      	nop
 8004b28:	3714      	adds	r7, #20
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	40012c00 	.word	0x40012c00
 8004b38:	40000400 	.word	0x40000400
 8004b3c:	40000800 	.word	0x40000800
 8004b40:	40013400 	.word	0x40013400
 8004b44:	40014000 	.word	0x40014000
 8004b48:	40014400 	.word	0x40014400
 8004b4c:	40014800 	.word	0x40014800

08004b50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b087      	sub	sp, #28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	f023 0201 	bic.w	r2, r3, #1
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f023 0303 	bic.w	r3, r3, #3
 8004b8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f023 0302 	bic.w	r3, r3, #2
 8004b9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a2c      	ldr	r2, [pc, #176]	; (8004c5c <TIM_OC1_SetConfig+0x10c>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d00f      	beq.n	8004bd0 <TIM_OC1_SetConfig+0x80>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a2b      	ldr	r2, [pc, #172]	; (8004c60 <TIM_OC1_SetConfig+0x110>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d00b      	beq.n	8004bd0 <TIM_OC1_SetConfig+0x80>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a2a      	ldr	r2, [pc, #168]	; (8004c64 <TIM_OC1_SetConfig+0x114>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d007      	beq.n	8004bd0 <TIM_OC1_SetConfig+0x80>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a29      	ldr	r2, [pc, #164]	; (8004c68 <TIM_OC1_SetConfig+0x118>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d003      	beq.n	8004bd0 <TIM_OC1_SetConfig+0x80>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a28      	ldr	r2, [pc, #160]	; (8004c6c <TIM_OC1_SetConfig+0x11c>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d10c      	bne.n	8004bea <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f023 0308 	bic.w	r3, r3, #8
 8004bd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f023 0304 	bic.w	r3, r3, #4
 8004be8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a1b      	ldr	r2, [pc, #108]	; (8004c5c <TIM_OC1_SetConfig+0x10c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d00f      	beq.n	8004c12 <TIM_OC1_SetConfig+0xc2>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a1a      	ldr	r2, [pc, #104]	; (8004c60 <TIM_OC1_SetConfig+0x110>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d00b      	beq.n	8004c12 <TIM_OC1_SetConfig+0xc2>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a19      	ldr	r2, [pc, #100]	; (8004c64 <TIM_OC1_SetConfig+0x114>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d007      	beq.n	8004c12 <TIM_OC1_SetConfig+0xc2>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a18      	ldr	r2, [pc, #96]	; (8004c68 <TIM_OC1_SetConfig+0x118>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d003      	beq.n	8004c12 <TIM_OC1_SetConfig+0xc2>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a17      	ldr	r2, [pc, #92]	; (8004c6c <TIM_OC1_SetConfig+0x11c>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d111      	bne.n	8004c36 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	621a      	str	r2, [r3, #32]
}
 8004c50:	bf00      	nop
 8004c52:	371c      	adds	r7, #28
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	40012c00 	.word	0x40012c00
 8004c60:	40013400 	.word	0x40013400
 8004c64:	40014000 	.word	0x40014000
 8004c68:	40014400 	.word	0x40014400
 8004c6c:	40014800 	.word	0x40014800

08004c70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b087      	sub	sp, #28
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	f023 0210 	bic.w	r2, r3, #16
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	021b      	lsls	r3, r3, #8
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	f023 0320 	bic.w	r3, r3, #32
 8004cbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	011b      	lsls	r3, r3, #4
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a28      	ldr	r2, [pc, #160]	; (8004d70 <TIM_OC2_SetConfig+0x100>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d003      	beq.n	8004cdc <TIM_OC2_SetConfig+0x6c>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a27      	ldr	r2, [pc, #156]	; (8004d74 <TIM_OC2_SetConfig+0x104>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d10d      	bne.n	8004cf8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ce2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	011b      	lsls	r3, r3, #4
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cf6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a1d      	ldr	r2, [pc, #116]	; (8004d70 <TIM_OC2_SetConfig+0x100>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d00f      	beq.n	8004d20 <TIM_OC2_SetConfig+0xb0>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a1c      	ldr	r2, [pc, #112]	; (8004d74 <TIM_OC2_SetConfig+0x104>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d00b      	beq.n	8004d20 <TIM_OC2_SetConfig+0xb0>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a1b      	ldr	r2, [pc, #108]	; (8004d78 <TIM_OC2_SetConfig+0x108>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d007      	beq.n	8004d20 <TIM_OC2_SetConfig+0xb0>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a1a      	ldr	r2, [pc, #104]	; (8004d7c <TIM_OC2_SetConfig+0x10c>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d003      	beq.n	8004d20 <TIM_OC2_SetConfig+0xb0>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a19      	ldr	r2, [pc, #100]	; (8004d80 <TIM_OC2_SetConfig+0x110>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d113      	bne.n	8004d48 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	621a      	str	r2, [r3, #32]
}
 8004d62:	bf00      	nop
 8004d64:	371c      	adds	r7, #28
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	40012c00 	.word	0x40012c00
 8004d74:	40013400 	.word	0x40013400
 8004d78:	40014000 	.word	0x40014000
 8004d7c:	40014400 	.word	0x40014400
 8004d80:	40014800 	.word	0x40014800

08004d84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b087      	sub	sp, #28
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	69db      	ldr	r3, [r3, #28]
 8004daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f023 0303 	bic.w	r3, r3, #3
 8004dbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004dd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	021b      	lsls	r3, r3, #8
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a27      	ldr	r2, [pc, #156]	; (8004e80 <TIM_OC3_SetConfig+0xfc>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d003      	beq.n	8004dee <TIM_OC3_SetConfig+0x6a>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a26      	ldr	r2, [pc, #152]	; (8004e84 <TIM_OC3_SetConfig+0x100>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d10d      	bne.n	8004e0a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004df4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	021b      	lsls	r3, r3, #8
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a1c      	ldr	r2, [pc, #112]	; (8004e80 <TIM_OC3_SetConfig+0xfc>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d00f      	beq.n	8004e32 <TIM_OC3_SetConfig+0xae>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a1b      	ldr	r2, [pc, #108]	; (8004e84 <TIM_OC3_SetConfig+0x100>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d00b      	beq.n	8004e32 <TIM_OC3_SetConfig+0xae>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a1a      	ldr	r2, [pc, #104]	; (8004e88 <TIM_OC3_SetConfig+0x104>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d007      	beq.n	8004e32 <TIM_OC3_SetConfig+0xae>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a19      	ldr	r2, [pc, #100]	; (8004e8c <TIM_OC3_SetConfig+0x108>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d003      	beq.n	8004e32 <TIM_OC3_SetConfig+0xae>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a18      	ldr	r2, [pc, #96]	; (8004e90 <TIM_OC3_SetConfig+0x10c>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d113      	bne.n	8004e5a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	011b      	lsls	r3, r3, #4
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	011b      	lsls	r3, r3, #4
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	621a      	str	r2, [r3, #32]
}
 8004e74:	bf00      	nop
 8004e76:	371c      	adds	r7, #28
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr
 8004e80:	40012c00 	.word	0x40012c00
 8004e84:	40013400 	.word	0x40013400
 8004e88:	40014000 	.word	0x40014000
 8004e8c:	40014400 	.word	0x40014400
 8004e90:	40014800 	.word	0x40014800

08004e94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b087      	sub	sp, #28
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a1b      	ldr	r3, [r3, #32]
 8004eae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	69db      	ldr	r3, [r3, #28]
 8004eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	021b      	lsls	r3, r3, #8
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ee2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	031b      	lsls	r3, r3, #12
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a28      	ldr	r2, [pc, #160]	; (8004f94 <TIM_OC4_SetConfig+0x100>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d003      	beq.n	8004f00 <TIM_OC4_SetConfig+0x6c>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a27      	ldr	r2, [pc, #156]	; (8004f98 <TIM_OC4_SetConfig+0x104>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d10d      	bne.n	8004f1c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	031b      	lsls	r3, r3, #12
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a1d      	ldr	r2, [pc, #116]	; (8004f94 <TIM_OC4_SetConfig+0x100>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d00f      	beq.n	8004f44 <TIM_OC4_SetConfig+0xb0>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a1c      	ldr	r2, [pc, #112]	; (8004f98 <TIM_OC4_SetConfig+0x104>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d00b      	beq.n	8004f44 <TIM_OC4_SetConfig+0xb0>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a1b      	ldr	r2, [pc, #108]	; (8004f9c <TIM_OC4_SetConfig+0x108>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d007      	beq.n	8004f44 <TIM_OC4_SetConfig+0xb0>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a1a      	ldr	r2, [pc, #104]	; (8004fa0 <TIM_OC4_SetConfig+0x10c>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d003      	beq.n	8004f44 <TIM_OC4_SetConfig+0xb0>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a19      	ldr	r2, [pc, #100]	; (8004fa4 <TIM_OC4_SetConfig+0x110>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d113      	bne.n	8004f6c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f4a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f52:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	019b      	lsls	r3, r3, #6
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	019b      	lsls	r3, r3, #6
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	685a      	ldr	r2, [r3, #4]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	621a      	str	r2, [r3, #32]
}
 8004f86:	bf00      	nop
 8004f88:	371c      	adds	r7, #28
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	40012c00 	.word	0x40012c00
 8004f98:	40013400 	.word	0x40013400
 8004f9c:	40014000 	.word	0x40014000
 8004fa0:	40014400 	.word	0x40014400
 8004fa4:	40014800 	.word	0x40014800

08004fa8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b087      	sub	sp, #28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004fec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	041b      	lsls	r3, r3, #16
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a17      	ldr	r2, [pc, #92]	; (800505c <TIM_OC5_SetConfig+0xb4>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d00f      	beq.n	8005022 <TIM_OC5_SetConfig+0x7a>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a16      	ldr	r2, [pc, #88]	; (8005060 <TIM_OC5_SetConfig+0xb8>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d00b      	beq.n	8005022 <TIM_OC5_SetConfig+0x7a>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a15      	ldr	r2, [pc, #84]	; (8005064 <TIM_OC5_SetConfig+0xbc>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d007      	beq.n	8005022 <TIM_OC5_SetConfig+0x7a>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a14      	ldr	r2, [pc, #80]	; (8005068 <TIM_OC5_SetConfig+0xc0>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d003      	beq.n	8005022 <TIM_OC5_SetConfig+0x7a>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a13      	ldr	r2, [pc, #76]	; (800506c <TIM_OC5_SetConfig+0xc4>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d109      	bne.n	8005036 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005028:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	021b      	lsls	r3, r3, #8
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	4313      	orrs	r3, r2
 8005034:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	685a      	ldr	r2, [r3, #4]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	621a      	str	r2, [r3, #32]
}
 8005050:	bf00      	nop
 8005052:	371c      	adds	r7, #28
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr
 800505c:	40012c00 	.word	0x40012c00
 8005060:	40013400 	.word	0x40013400
 8005064:	40014000 	.word	0x40014000
 8005068:	40014400 	.word	0x40014400
 800506c:	40014800 	.word	0x40014800

08005070 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005070:	b480      	push	{r7}
 8005072:	b087      	sub	sp, #28
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800509e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	021b      	lsls	r3, r3, #8
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	051b      	lsls	r3, r3, #20
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a18      	ldr	r2, [pc, #96]	; (8005128 <TIM_OC6_SetConfig+0xb8>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d00f      	beq.n	80050ec <TIM_OC6_SetConfig+0x7c>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a17      	ldr	r2, [pc, #92]	; (800512c <TIM_OC6_SetConfig+0xbc>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d00b      	beq.n	80050ec <TIM_OC6_SetConfig+0x7c>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a16      	ldr	r2, [pc, #88]	; (8005130 <TIM_OC6_SetConfig+0xc0>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d007      	beq.n	80050ec <TIM_OC6_SetConfig+0x7c>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a15      	ldr	r2, [pc, #84]	; (8005134 <TIM_OC6_SetConfig+0xc4>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d003      	beq.n	80050ec <TIM_OC6_SetConfig+0x7c>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a14      	ldr	r2, [pc, #80]	; (8005138 <TIM_OC6_SetConfig+0xc8>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d109      	bne.n	8005100 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	695b      	ldr	r3, [r3, #20]
 80050f8:	029b      	lsls	r3, r3, #10
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	621a      	str	r2, [r3, #32]
}
 800511a:	bf00      	nop
 800511c:	371c      	adds	r7, #28
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	40012c00 	.word	0x40012c00
 800512c:	40013400 	.word	0x40013400
 8005130:	40014000 	.word	0x40014000
 8005134:	40014400 	.word	0x40014400
 8005138:	40014800 	.word	0x40014800

0800513c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800513c:	b480      	push	{r7}
 800513e:	b087      	sub	sp, #28
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6a1b      	ldr	r3, [r3, #32]
 800514c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	f023 0201 	bic.w	r2, r3, #1
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005166:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	011b      	lsls	r3, r3, #4
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	4313      	orrs	r3, r2
 8005170:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	f023 030a 	bic.w	r3, r3, #10
 8005178:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	4313      	orrs	r3, r2
 8005180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	621a      	str	r2, [r3, #32]
}
 800518e:	bf00      	nop
 8005190:	371c      	adds	r7, #28
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800519a:	b480      	push	{r7}
 800519c:	b087      	sub	sp, #28
 800519e:	af00      	add	r7, sp, #0
 80051a0:	60f8      	str	r0, [r7, #12]
 80051a2:	60b9      	str	r1, [r7, #8]
 80051a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	f023 0210 	bic.w	r2, r3, #16
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	031b      	lsls	r3, r3, #12
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	011b      	lsls	r3, r3, #4
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	4313      	orrs	r3, r2
 80051e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	621a      	str	r2, [r3, #32]
}
 80051ee:	bf00      	nop
 80051f0:	371c      	adds	r7, #28
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b085      	sub	sp, #20
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
 8005202:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005214:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4313      	orrs	r3, r2
 800521c:	f043 0307 	orr.w	r3, r3, #7
 8005220:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	609a      	str	r2, [r3, #8]
}
 8005228:	bf00      	nop
 800522a:	3714      	adds	r7, #20
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005234:	b480      	push	{r7}
 8005236:	b087      	sub	sp, #28
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]
 8005240:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800524e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	021a      	lsls	r2, r3, #8
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	431a      	orrs	r2, r3
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	4313      	orrs	r3, r2
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	4313      	orrs	r3, r2
 8005260:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	609a      	str	r2, [r3, #8]
}
 8005268:	bf00      	nop
 800526a:	371c      	adds	r7, #28
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005274:	b480      	push	{r7}
 8005276:	b087      	sub	sp, #28
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	f003 031f 	and.w	r3, r3, #31
 8005286:	2201      	movs	r2, #1
 8005288:	fa02 f303 	lsl.w	r3, r2, r3
 800528c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6a1a      	ldr	r2, [r3, #32]
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	43db      	mvns	r3, r3
 8005296:	401a      	ands	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6a1a      	ldr	r2, [r3, #32]
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	f003 031f 	and.w	r3, r3, #31
 80052a6:	6879      	ldr	r1, [r7, #4]
 80052a8:	fa01 f303 	lsl.w	r3, r1, r3
 80052ac:	431a      	orrs	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	621a      	str	r2, [r3, #32]
}
 80052b2:	bf00      	nop
 80052b4:	371c      	adds	r7, #28
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
	...

080052c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d101      	bne.n	80052d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052d4:	2302      	movs	r3, #2
 80052d6:	e065      	b.n	80053a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a2c      	ldr	r2, [pc, #176]	; (80053b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d004      	beq.n	800530c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a2b      	ldr	r2, [pc, #172]	; (80053b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d108      	bne.n	800531e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005312:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	4313      	orrs	r3, r2
 800531c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005324:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005328:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	4313      	orrs	r3, r2
 8005332:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a1b      	ldr	r2, [pc, #108]	; (80053b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d018      	beq.n	8005378 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800534e:	d013      	beq.n	8005378 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a18      	ldr	r2, [pc, #96]	; (80053b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d00e      	beq.n	8005378 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a17      	ldr	r2, [pc, #92]	; (80053bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d009      	beq.n	8005378 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a12      	ldr	r2, [pc, #72]	; (80053b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d004      	beq.n	8005378 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a13      	ldr	r2, [pc, #76]	; (80053c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d10c      	bne.n	8005392 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800537e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	4313      	orrs	r3, r2
 8005388:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3714      	adds	r7, #20
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr
 80053b0:	40012c00 	.word	0x40012c00
 80053b4:	40013400 	.word	0x40013400
 80053b8:	40000400 	.word	0x40000400
 80053bc:	40000800 	.word	0x40000800
 80053c0:	40014000 	.word	0x40014000

080053c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80053ce:	2300      	movs	r3, #0
 80053d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d101      	bne.n	80053e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80053dc:	2302      	movs	r3, #2
 80053de:	e087      	b.n	80054f0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	4313      	orrs	r3, r2
 8005402:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	4313      	orrs	r3, r2
 8005410:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4313      	orrs	r3, r2
 800541e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	4313      	orrs	r3, r2
 800542c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	4313      	orrs	r3, r2
 800543a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005446:	4313      	orrs	r3, r2
 8005448:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	041b      	lsls	r3, r3, #16
 8005456:	4313      	orrs	r3, r2
 8005458:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a27      	ldr	r2, [pc, #156]	; (80054fc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d004      	beq.n	800546e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a25      	ldr	r2, [pc, #148]	; (8005500 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d106      	bne.n	800547c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	69db      	ldr	r3, [r3, #28]
 8005478:	4313      	orrs	r3, r2
 800547a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a1e      	ldr	r2, [pc, #120]	; (80054fc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d004      	beq.n	8005490 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a1d      	ldr	r2, [pc, #116]	; (8005500 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d126      	bne.n	80054de <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549a:	051b      	lsls	r3, r3, #20
 800549c:	4313      	orrs	r3, r2
 800549e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b8:	4313      	orrs	r3, r2
 80054ba:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a0e      	ldr	r2, [pc, #56]	; (80054fc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d004      	beq.n	80054d0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a0d      	ldr	r2, [pc, #52]	; (8005500 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d106      	bne.n	80054de <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054da:	4313      	orrs	r3, r2
 80054dc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3714      	adds	r7, #20
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr
 80054fc:	40012c00 	.word	0x40012c00
 8005500:	40013400 	.word	0x40013400

08005504 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e042      	b.n	800559c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800551c:	2b00      	cmp	r3, #0
 800551e:	d106      	bne.n	800552e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f7fb fdc7 	bl	80010bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2224      	movs	r2, #36	; 0x24
 8005532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f022 0201 	bic.w	r2, r2, #1
 8005544:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f8c2 	bl	80056d0 <UART_SetConfig>
 800554c:	4603      	mov	r3, r0
 800554e:	2b01      	cmp	r3, #1
 8005550:	d101      	bne.n	8005556 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e022      	b.n	800559c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555a:	2b00      	cmp	r3, #0
 800555c:	d002      	beq.n	8005564 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 fb82 	bl	8005c68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	685a      	ldr	r2, [r3, #4]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005572:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	689a      	ldr	r2, [r3, #8]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005582:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f042 0201 	orr.w	r2, r2, #1
 8005592:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 fc09 	bl	8005dac <UART_CheckIdleState>
 800559a:	4603      	mov	r3, r0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3708      	adds	r7, #8
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b08a      	sub	sp, #40	; 0x28
 80055a8:	af02      	add	r7, sp, #8
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	603b      	str	r3, [r7, #0]
 80055b0:	4613      	mov	r3, r2
 80055b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055ba:	2b20      	cmp	r3, #32
 80055bc:	f040 8083 	bne.w	80056c6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d002      	beq.n	80055cc <HAL_UART_Transmit+0x28>
 80055c6:	88fb      	ldrh	r3, [r7, #6]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d101      	bne.n	80055d0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e07b      	b.n	80056c8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d101      	bne.n	80055de <HAL_UART_Transmit+0x3a>
 80055da:	2302      	movs	r3, #2
 80055dc:	e074      	b.n	80056c8 <HAL_UART_Transmit+0x124>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2221      	movs	r2, #33	; 0x21
 80055f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055f6:	f7fb fecd 	bl	8001394 <HAL_GetTick>
 80055fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	88fa      	ldrh	r2, [r7, #6]
 8005600:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	88fa      	ldrh	r2, [r7, #6]
 8005608:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005614:	d108      	bne.n	8005628 <HAL_UART_Transmit+0x84>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d104      	bne.n	8005628 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800561e:	2300      	movs	r3, #0
 8005620:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	61bb      	str	r3, [r7, #24]
 8005626:	e003      	b.n	8005630 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800562c:	2300      	movs	r3, #0
 800562e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005638:	e02c      	b.n	8005694 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	2200      	movs	r2, #0
 8005642:	2180      	movs	r1, #128	; 0x80
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 fbfc 	bl	8005e42 <UART_WaitOnFlagUntilTimeout>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d001      	beq.n	8005654 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e039      	b.n	80056c8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10b      	bne.n	8005672 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	881b      	ldrh	r3, [r3, #0]
 800565e:	461a      	mov	r2, r3
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005668:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	3302      	adds	r3, #2
 800566e:	61bb      	str	r3, [r7, #24]
 8005670:	e007      	b.n	8005682 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	781a      	ldrb	r2, [r3, #0]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	3301      	adds	r3, #1
 8005680:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005688:	b29b      	uxth	r3, r3
 800568a:	3b01      	subs	r3, #1
 800568c:	b29a      	uxth	r2, r3
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800569a:	b29b      	uxth	r3, r3
 800569c:	2b00      	cmp	r3, #0
 800569e:	d1cc      	bne.n	800563a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	9300      	str	r3, [sp, #0]
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	2200      	movs	r2, #0
 80056a8:	2140      	movs	r1, #64	; 0x40
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	f000 fbc9 	bl	8005e42 <UART_WaitOnFlagUntilTimeout>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e006      	b.n	80056c8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2220      	movs	r2, #32
 80056be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80056c2:	2300      	movs	r3, #0
 80056c4:	e000      	b.n	80056c8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80056c6:	2302      	movs	r3, #2
  }
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3720      	adds	r7, #32
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056d4:	b08c      	sub	sp, #48	; 0x30
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056da:	2300      	movs	r3, #0
 80056dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	689a      	ldr	r2, [r3, #8]
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	431a      	orrs	r2, r3
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	431a      	orrs	r2, r3
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	69db      	ldr	r3, [r3, #28]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	4bab      	ldr	r3, [pc, #684]	; (80059ac <UART_SetConfig+0x2dc>)
 8005700:	4013      	ands	r3, r2
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	6812      	ldr	r2, [r2, #0]
 8005706:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005708:	430b      	orrs	r3, r1
 800570a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	68da      	ldr	r2, [r3, #12]
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	430a      	orrs	r2, r1
 8005720:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4aa0      	ldr	r2, [pc, #640]	; (80059b0 <UART_SetConfig+0x2e0>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d004      	beq.n	800573c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005738:	4313      	orrs	r3, r2
 800573a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005746:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	6812      	ldr	r2, [r2, #0]
 800574e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005750:	430b      	orrs	r3, r1
 8005752:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575a:	f023 010f 	bic.w	r1, r3, #15
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	430a      	orrs	r2, r1
 8005768:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a91      	ldr	r2, [pc, #580]	; (80059b4 <UART_SetConfig+0x2e4>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d125      	bne.n	80057c0 <UART_SetConfig+0xf0>
 8005774:	4b90      	ldr	r3, [pc, #576]	; (80059b8 <UART_SetConfig+0x2e8>)
 8005776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800577a:	f003 0303 	and.w	r3, r3, #3
 800577e:	2b03      	cmp	r3, #3
 8005780:	d81a      	bhi.n	80057b8 <UART_SetConfig+0xe8>
 8005782:	a201      	add	r2, pc, #4	; (adr r2, 8005788 <UART_SetConfig+0xb8>)
 8005784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005788:	08005799 	.word	0x08005799
 800578c:	080057a9 	.word	0x080057a9
 8005790:	080057a1 	.word	0x080057a1
 8005794:	080057b1 	.word	0x080057b1
 8005798:	2301      	movs	r3, #1
 800579a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800579e:	e0d6      	b.n	800594e <UART_SetConfig+0x27e>
 80057a0:	2302      	movs	r3, #2
 80057a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057a6:	e0d2      	b.n	800594e <UART_SetConfig+0x27e>
 80057a8:	2304      	movs	r3, #4
 80057aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057ae:	e0ce      	b.n	800594e <UART_SetConfig+0x27e>
 80057b0:	2308      	movs	r3, #8
 80057b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057b6:	e0ca      	b.n	800594e <UART_SetConfig+0x27e>
 80057b8:	2310      	movs	r3, #16
 80057ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057be:	e0c6      	b.n	800594e <UART_SetConfig+0x27e>
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a7d      	ldr	r2, [pc, #500]	; (80059bc <UART_SetConfig+0x2ec>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d138      	bne.n	800583c <UART_SetConfig+0x16c>
 80057ca:	4b7b      	ldr	r3, [pc, #492]	; (80059b8 <UART_SetConfig+0x2e8>)
 80057cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d0:	f003 030c 	and.w	r3, r3, #12
 80057d4:	2b0c      	cmp	r3, #12
 80057d6:	d82d      	bhi.n	8005834 <UART_SetConfig+0x164>
 80057d8:	a201      	add	r2, pc, #4	; (adr r2, 80057e0 <UART_SetConfig+0x110>)
 80057da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057de:	bf00      	nop
 80057e0:	08005815 	.word	0x08005815
 80057e4:	08005835 	.word	0x08005835
 80057e8:	08005835 	.word	0x08005835
 80057ec:	08005835 	.word	0x08005835
 80057f0:	08005825 	.word	0x08005825
 80057f4:	08005835 	.word	0x08005835
 80057f8:	08005835 	.word	0x08005835
 80057fc:	08005835 	.word	0x08005835
 8005800:	0800581d 	.word	0x0800581d
 8005804:	08005835 	.word	0x08005835
 8005808:	08005835 	.word	0x08005835
 800580c:	08005835 	.word	0x08005835
 8005810:	0800582d 	.word	0x0800582d
 8005814:	2300      	movs	r3, #0
 8005816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800581a:	e098      	b.n	800594e <UART_SetConfig+0x27e>
 800581c:	2302      	movs	r3, #2
 800581e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005822:	e094      	b.n	800594e <UART_SetConfig+0x27e>
 8005824:	2304      	movs	r3, #4
 8005826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800582a:	e090      	b.n	800594e <UART_SetConfig+0x27e>
 800582c:	2308      	movs	r3, #8
 800582e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005832:	e08c      	b.n	800594e <UART_SetConfig+0x27e>
 8005834:	2310      	movs	r3, #16
 8005836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800583a:	e088      	b.n	800594e <UART_SetConfig+0x27e>
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a5f      	ldr	r2, [pc, #380]	; (80059c0 <UART_SetConfig+0x2f0>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d125      	bne.n	8005892 <UART_SetConfig+0x1c2>
 8005846:	4b5c      	ldr	r3, [pc, #368]	; (80059b8 <UART_SetConfig+0x2e8>)
 8005848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800584c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005850:	2b30      	cmp	r3, #48	; 0x30
 8005852:	d016      	beq.n	8005882 <UART_SetConfig+0x1b2>
 8005854:	2b30      	cmp	r3, #48	; 0x30
 8005856:	d818      	bhi.n	800588a <UART_SetConfig+0x1ba>
 8005858:	2b20      	cmp	r3, #32
 800585a:	d00a      	beq.n	8005872 <UART_SetConfig+0x1a2>
 800585c:	2b20      	cmp	r3, #32
 800585e:	d814      	bhi.n	800588a <UART_SetConfig+0x1ba>
 8005860:	2b00      	cmp	r3, #0
 8005862:	d002      	beq.n	800586a <UART_SetConfig+0x19a>
 8005864:	2b10      	cmp	r3, #16
 8005866:	d008      	beq.n	800587a <UART_SetConfig+0x1aa>
 8005868:	e00f      	b.n	800588a <UART_SetConfig+0x1ba>
 800586a:	2300      	movs	r3, #0
 800586c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005870:	e06d      	b.n	800594e <UART_SetConfig+0x27e>
 8005872:	2302      	movs	r3, #2
 8005874:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005878:	e069      	b.n	800594e <UART_SetConfig+0x27e>
 800587a:	2304      	movs	r3, #4
 800587c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005880:	e065      	b.n	800594e <UART_SetConfig+0x27e>
 8005882:	2308      	movs	r3, #8
 8005884:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005888:	e061      	b.n	800594e <UART_SetConfig+0x27e>
 800588a:	2310      	movs	r3, #16
 800588c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005890:	e05d      	b.n	800594e <UART_SetConfig+0x27e>
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a4b      	ldr	r2, [pc, #300]	; (80059c4 <UART_SetConfig+0x2f4>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d125      	bne.n	80058e8 <UART_SetConfig+0x218>
 800589c:	4b46      	ldr	r3, [pc, #280]	; (80059b8 <UART_SetConfig+0x2e8>)
 800589e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80058a6:	2bc0      	cmp	r3, #192	; 0xc0
 80058a8:	d016      	beq.n	80058d8 <UART_SetConfig+0x208>
 80058aa:	2bc0      	cmp	r3, #192	; 0xc0
 80058ac:	d818      	bhi.n	80058e0 <UART_SetConfig+0x210>
 80058ae:	2b80      	cmp	r3, #128	; 0x80
 80058b0:	d00a      	beq.n	80058c8 <UART_SetConfig+0x1f8>
 80058b2:	2b80      	cmp	r3, #128	; 0x80
 80058b4:	d814      	bhi.n	80058e0 <UART_SetConfig+0x210>
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d002      	beq.n	80058c0 <UART_SetConfig+0x1f0>
 80058ba:	2b40      	cmp	r3, #64	; 0x40
 80058bc:	d008      	beq.n	80058d0 <UART_SetConfig+0x200>
 80058be:	e00f      	b.n	80058e0 <UART_SetConfig+0x210>
 80058c0:	2300      	movs	r3, #0
 80058c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058c6:	e042      	b.n	800594e <UART_SetConfig+0x27e>
 80058c8:	2302      	movs	r3, #2
 80058ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058ce:	e03e      	b.n	800594e <UART_SetConfig+0x27e>
 80058d0:	2304      	movs	r3, #4
 80058d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058d6:	e03a      	b.n	800594e <UART_SetConfig+0x27e>
 80058d8:	2308      	movs	r3, #8
 80058da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058de:	e036      	b.n	800594e <UART_SetConfig+0x27e>
 80058e0:	2310      	movs	r3, #16
 80058e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058e6:	e032      	b.n	800594e <UART_SetConfig+0x27e>
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a30      	ldr	r2, [pc, #192]	; (80059b0 <UART_SetConfig+0x2e0>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d12a      	bne.n	8005948 <UART_SetConfig+0x278>
 80058f2:	4b31      	ldr	r3, [pc, #196]	; (80059b8 <UART_SetConfig+0x2e8>)
 80058f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80058fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005900:	d01a      	beq.n	8005938 <UART_SetConfig+0x268>
 8005902:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005906:	d81b      	bhi.n	8005940 <UART_SetConfig+0x270>
 8005908:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800590c:	d00c      	beq.n	8005928 <UART_SetConfig+0x258>
 800590e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005912:	d815      	bhi.n	8005940 <UART_SetConfig+0x270>
 8005914:	2b00      	cmp	r3, #0
 8005916:	d003      	beq.n	8005920 <UART_SetConfig+0x250>
 8005918:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800591c:	d008      	beq.n	8005930 <UART_SetConfig+0x260>
 800591e:	e00f      	b.n	8005940 <UART_SetConfig+0x270>
 8005920:	2300      	movs	r3, #0
 8005922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005926:	e012      	b.n	800594e <UART_SetConfig+0x27e>
 8005928:	2302      	movs	r3, #2
 800592a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800592e:	e00e      	b.n	800594e <UART_SetConfig+0x27e>
 8005930:	2304      	movs	r3, #4
 8005932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005936:	e00a      	b.n	800594e <UART_SetConfig+0x27e>
 8005938:	2308      	movs	r3, #8
 800593a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800593e:	e006      	b.n	800594e <UART_SetConfig+0x27e>
 8005940:	2310      	movs	r3, #16
 8005942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005946:	e002      	b.n	800594e <UART_SetConfig+0x27e>
 8005948:	2310      	movs	r3, #16
 800594a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a17      	ldr	r2, [pc, #92]	; (80059b0 <UART_SetConfig+0x2e0>)
 8005954:	4293      	cmp	r3, r2
 8005956:	f040 80a8 	bne.w	8005aaa <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800595a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800595e:	2b08      	cmp	r3, #8
 8005960:	d834      	bhi.n	80059cc <UART_SetConfig+0x2fc>
 8005962:	a201      	add	r2, pc, #4	; (adr r2, 8005968 <UART_SetConfig+0x298>)
 8005964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005968:	0800598d 	.word	0x0800598d
 800596c:	080059cd 	.word	0x080059cd
 8005970:	08005995 	.word	0x08005995
 8005974:	080059cd 	.word	0x080059cd
 8005978:	0800599b 	.word	0x0800599b
 800597c:	080059cd 	.word	0x080059cd
 8005980:	080059cd 	.word	0x080059cd
 8005984:	080059cd 	.word	0x080059cd
 8005988:	080059a3 	.word	0x080059a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800598c:	f7fe f9c4 	bl	8003d18 <HAL_RCC_GetPCLK1Freq>
 8005990:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005992:	e021      	b.n	80059d8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005994:	4b0c      	ldr	r3, [pc, #48]	; (80059c8 <UART_SetConfig+0x2f8>)
 8005996:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005998:	e01e      	b.n	80059d8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800599a:	f7fe f94f 	bl	8003c3c <HAL_RCC_GetSysClockFreq>
 800599e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80059a0:	e01a      	b.n	80059d8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80059a8:	e016      	b.n	80059d8 <UART_SetConfig+0x308>
 80059aa:	bf00      	nop
 80059ac:	cfff69f3 	.word	0xcfff69f3
 80059b0:	40008000 	.word	0x40008000
 80059b4:	40013800 	.word	0x40013800
 80059b8:	40021000 	.word	0x40021000
 80059bc:	40004400 	.word	0x40004400
 80059c0:	40004800 	.word	0x40004800
 80059c4:	40004c00 	.word	0x40004c00
 80059c8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80059cc:	2300      	movs	r3, #0
 80059ce:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80059d6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80059d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059da:	2b00      	cmp	r3, #0
 80059dc:	f000 812a 	beq.w	8005c34 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	4a9e      	ldr	r2, [pc, #632]	; (8005c60 <UART_SetConfig+0x590>)
 80059e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059ea:	461a      	mov	r2, r3
 80059ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80059f2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	685a      	ldr	r2, [r3, #4]
 80059f8:	4613      	mov	r3, r2
 80059fa:	005b      	lsls	r3, r3, #1
 80059fc:	4413      	add	r3, r2
 80059fe:	69ba      	ldr	r2, [r7, #24]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d305      	bcc.n	8005a10 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d903      	bls.n	8005a18 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005a16:	e10d      	b.n	8005c34 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	60bb      	str	r3, [r7, #8]
 8005a1e:	60fa      	str	r2, [r7, #12]
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a24:	4a8e      	ldr	r2, [pc, #568]	; (8005c60 <UART_SetConfig+0x590>)
 8005a26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	603b      	str	r3, [r7, #0]
 8005a30:	607a      	str	r2, [r7, #4]
 8005a32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a3a:	f7fa fc41 	bl	80002c0 <__aeabi_uldivmod>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	460b      	mov	r3, r1
 8005a42:	4610      	mov	r0, r2
 8005a44:	4619      	mov	r1, r3
 8005a46:	f04f 0200 	mov.w	r2, #0
 8005a4a:	f04f 0300 	mov.w	r3, #0
 8005a4e:	020b      	lsls	r3, r1, #8
 8005a50:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005a54:	0202      	lsls	r2, r0, #8
 8005a56:	6979      	ldr	r1, [r7, #20]
 8005a58:	6849      	ldr	r1, [r1, #4]
 8005a5a:	0849      	lsrs	r1, r1, #1
 8005a5c:	2000      	movs	r0, #0
 8005a5e:	460c      	mov	r4, r1
 8005a60:	4605      	mov	r5, r0
 8005a62:	eb12 0804 	adds.w	r8, r2, r4
 8005a66:	eb43 0905 	adc.w	r9, r3, r5
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	469a      	mov	sl, r3
 8005a72:	4693      	mov	fp, r2
 8005a74:	4652      	mov	r2, sl
 8005a76:	465b      	mov	r3, fp
 8005a78:	4640      	mov	r0, r8
 8005a7a:	4649      	mov	r1, r9
 8005a7c:	f7fa fc20 	bl	80002c0 <__aeabi_uldivmod>
 8005a80:	4602      	mov	r2, r0
 8005a82:	460b      	mov	r3, r1
 8005a84:	4613      	mov	r3, r2
 8005a86:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a88:	6a3b      	ldr	r3, [r7, #32]
 8005a8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a8e:	d308      	bcc.n	8005aa2 <UART_SetConfig+0x3d2>
 8005a90:	6a3b      	ldr	r3, [r7, #32]
 8005a92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a96:	d204      	bcs.n	8005aa2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6a3a      	ldr	r2, [r7, #32]
 8005a9e:	60da      	str	r2, [r3, #12]
 8005aa0:	e0c8      	b.n	8005c34 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005aa8:	e0c4      	b.n	8005c34 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	69db      	ldr	r3, [r3, #28]
 8005aae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ab2:	d167      	bne.n	8005b84 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005ab4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ab8:	2b08      	cmp	r3, #8
 8005aba:	d828      	bhi.n	8005b0e <UART_SetConfig+0x43e>
 8005abc:	a201      	add	r2, pc, #4	; (adr r2, 8005ac4 <UART_SetConfig+0x3f4>)
 8005abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac2:	bf00      	nop
 8005ac4:	08005ae9 	.word	0x08005ae9
 8005ac8:	08005af1 	.word	0x08005af1
 8005acc:	08005af9 	.word	0x08005af9
 8005ad0:	08005b0f 	.word	0x08005b0f
 8005ad4:	08005aff 	.word	0x08005aff
 8005ad8:	08005b0f 	.word	0x08005b0f
 8005adc:	08005b0f 	.word	0x08005b0f
 8005ae0:	08005b0f 	.word	0x08005b0f
 8005ae4:	08005b07 	.word	0x08005b07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ae8:	f7fe f916 	bl	8003d18 <HAL_RCC_GetPCLK1Freq>
 8005aec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005aee:	e014      	b.n	8005b1a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005af0:	f7fe f928 	bl	8003d44 <HAL_RCC_GetPCLK2Freq>
 8005af4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005af6:	e010      	b.n	8005b1a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005af8:	4b5a      	ldr	r3, [pc, #360]	; (8005c64 <UART_SetConfig+0x594>)
 8005afa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005afc:	e00d      	b.n	8005b1a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005afe:	f7fe f89d 	bl	8003c3c <HAL_RCC_GetSysClockFreq>
 8005b02:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b04:	e009      	b.n	8005b1a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b0c:	e005      	b.n	8005b1a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005b18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f000 8089 	beq.w	8005c34 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b26:	4a4e      	ldr	r2, [pc, #312]	; (8005c60 <UART_SetConfig+0x590>)
 8005b28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b30:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b34:	005a      	lsls	r2, r3, #1
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	085b      	lsrs	r3, r3, #1
 8005b3c:	441a      	add	r2, r3
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b46:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	2b0f      	cmp	r3, #15
 8005b4c:	d916      	bls.n	8005b7c <UART_SetConfig+0x4ac>
 8005b4e:	6a3b      	ldr	r3, [r7, #32]
 8005b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b54:	d212      	bcs.n	8005b7c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b56:	6a3b      	ldr	r3, [r7, #32]
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	f023 030f 	bic.w	r3, r3, #15
 8005b5e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b60:	6a3b      	ldr	r3, [r7, #32]
 8005b62:	085b      	lsrs	r3, r3, #1
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	f003 0307 	and.w	r3, r3, #7
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	8bfb      	ldrh	r3, [r7, #30]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	8bfa      	ldrh	r2, [r7, #30]
 8005b78:	60da      	str	r2, [r3, #12]
 8005b7a:	e05b      	b.n	8005c34 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005b82:	e057      	b.n	8005c34 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b84:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b88:	2b08      	cmp	r3, #8
 8005b8a:	d828      	bhi.n	8005bde <UART_SetConfig+0x50e>
 8005b8c:	a201      	add	r2, pc, #4	; (adr r2, 8005b94 <UART_SetConfig+0x4c4>)
 8005b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b92:	bf00      	nop
 8005b94:	08005bb9 	.word	0x08005bb9
 8005b98:	08005bc1 	.word	0x08005bc1
 8005b9c:	08005bc9 	.word	0x08005bc9
 8005ba0:	08005bdf 	.word	0x08005bdf
 8005ba4:	08005bcf 	.word	0x08005bcf
 8005ba8:	08005bdf 	.word	0x08005bdf
 8005bac:	08005bdf 	.word	0x08005bdf
 8005bb0:	08005bdf 	.word	0x08005bdf
 8005bb4:	08005bd7 	.word	0x08005bd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bb8:	f7fe f8ae 	bl	8003d18 <HAL_RCC_GetPCLK1Freq>
 8005bbc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005bbe:	e014      	b.n	8005bea <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bc0:	f7fe f8c0 	bl	8003d44 <HAL_RCC_GetPCLK2Freq>
 8005bc4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005bc6:	e010      	b.n	8005bea <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bc8:	4b26      	ldr	r3, [pc, #152]	; (8005c64 <UART_SetConfig+0x594>)
 8005bca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005bcc:	e00d      	b.n	8005bea <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bce:	f7fe f835 	bl	8003c3c <HAL_RCC_GetSysClockFreq>
 8005bd2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005bd4:	e009      	b.n	8005bea <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005bdc:	e005      	b.n	8005bea <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8005bde:	2300      	movs	r3, #0
 8005be0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005be8:	bf00      	nop
    }

    if (pclk != 0U)
 8005bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d021      	beq.n	8005c34 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf4:	4a1a      	ldr	r2, [pc, #104]	; (8005c60 <UART_SetConfig+0x590>)
 8005bf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfe:	fbb3 f2f2 	udiv	r2, r3, r2
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	085b      	lsrs	r3, r3, #1
 8005c08:	441a      	add	r2, r3
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c12:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c14:	6a3b      	ldr	r3, [r7, #32]
 8005c16:	2b0f      	cmp	r3, #15
 8005c18:	d909      	bls.n	8005c2e <UART_SetConfig+0x55e>
 8005c1a:	6a3b      	ldr	r3, [r7, #32]
 8005c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c20:	d205      	bcs.n	8005c2e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c22:	6a3b      	ldr	r3, [r7, #32]
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	60da      	str	r2, [r3, #12]
 8005c2c:	e002      	b.n	8005c34 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	2200      	movs	r2, #0
 8005c48:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005c50:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3730      	adds	r7, #48	; 0x30
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c5e:	bf00      	nop
 8005c60:	08006bac 	.word	0x08006bac
 8005c64:	00f42400 	.word	0x00f42400

08005c68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c74:	f003 0301 	and.w	r3, r3, #1
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00a      	beq.n	8005c92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c96:	f003 0302 	and.w	r3, r3, #2
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00a      	beq.n	8005cb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	430a      	orrs	r2, r1
 8005cb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb8:	f003 0304 	and.w	r3, r3, #4
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00a      	beq.n	8005cd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cda:	f003 0308 	and.w	r3, r3, #8
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00a      	beq.n	8005cf8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	430a      	orrs	r2, r1
 8005cf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cfc:	f003 0310 	and.w	r3, r3, #16
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00a      	beq.n	8005d1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	430a      	orrs	r2, r1
 8005d18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1e:	f003 0320 	and.w	r3, r3, #32
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00a      	beq.n	8005d3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d01a      	beq.n	8005d7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d66:	d10a      	bne.n	8005d7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00a      	beq.n	8005da0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	430a      	orrs	r2, r1
 8005d9e:	605a      	str	r2, [r3, #4]
  }
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b086      	sub	sp, #24
 8005db0:	af02      	add	r7, sp, #8
 8005db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005dbc:	f7fb faea 	bl	8001394 <HAL_GetTick>
 8005dc0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0308 	and.w	r3, r3, #8
 8005dcc:	2b08      	cmp	r3, #8
 8005dce:	d10e      	bne.n	8005dee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005dd4:	9300      	str	r3, [sp, #0]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f82f 	bl	8005e42 <UART_WaitOnFlagUntilTimeout>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d001      	beq.n	8005dee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e025      	b.n	8005e3a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0304 	and.w	r3, r3, #4
 8005df8:	2b04      	cmp	r3, #4
 8005dfa:	d10e      	bne.n	8005e1a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e00:	9300      	str	r3, [sp, #0]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 f819 	bl	8005e42 <UART_WaitOnFlagUntilTimeout>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d001      	beq.n	8005e1a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e00f      	b.n	8005e3a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2220      	movs	r2, #32
 8005e1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2220      	movs	r2, #32
 8005e26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b09c      	sub	sp, #112	; 0x70
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	60f8      	str	r0, [r7, #12]
 8005e4a:	60b9      	str	r1, [r7, #8]
 8005e4c:	603b      	str	r3, [r7, #0]
 8005e4e:	4613      	mov	r3, r2
 8005e50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e52:	e0a9      	b.n	8005fa8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e5a:	f000 80a5 	beq.w	8005fa8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e5e:	f7fb fa99 	bl	8001394 <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d302      	bcc.n	8005e74 <UART_WaitOnFlagUntilTimeout+0x32>
 8005e6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d140      	bne.n	8005ef6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e7c:	e853 3f00 	ldrex	r3, [r3]
 8005e80:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e88:	667b      	str	r3, [r7, #100]	; 0x64
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	461a      	mov	r2, r3
 8005e90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e94:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005e98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005e9a:	e841 2300 	strex	r3, r2, [r1]
 8005e9e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005ea0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1e6      	bne.n	8005e74 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	3308      	adds	r3, #8
 8005eac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eb0:	e853 3f00 	ldrex	r3, [r3]
 8005eb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb8:	f023 0301 	bic.w	r3, r3, #1
 8005ebc:	663b      	str	r3, [r7, #96]	; 0x60
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	3308      	adds	r3, #8
 8005ec4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005ec6:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ec8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ecc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ece:	e841 2300 	strex	r3, r2, [r1]
 8005ed2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005ed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d1e5      	bne.n	8005ea6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2220      	movs	r2, #32
 8005ede:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2220      	movs	r2, #32
 8005ee6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e069      	b.n	8005fca <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0304 	and.w	r3, r3, #4
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d051      	beq.n	8005fa8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	69db      	ldr	r3, [r3, #28]
 8005f0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f12:	d149      	bne.n	8005fa8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f1c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f26:	e853 3f00 	ldrex	r3, [r3]
 8005f2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	461a      	mov	r2, r3
 8005f3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f3c:	637b      	str	r3, [r7, #52]	; 0x34
 8005f3e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f44:	e841 2300 	strex	r3, r2, [r1]
 8005f48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1e6      	bne.n	8005f1e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	3308      	adds	r3, #8
 8005f56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	e853 3f00 	ldrex	r3, [r3]
 8005f5e:	613b      	str	r3, [r7, #16]
   return(result);
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	f023 0301 	bic.w	r3, r3, #1
 8005f66:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	3308      	adds	r3, #8
 8005f6e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005f70:	623a      	str	r2, [r7, #32]
 8005f72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f74:	69f9      	ldr	r1, [r7, #28]
 8005f76:	6a3a      	ldr	r2, [r7, #32]
 8005f78:	e841 2300 	strex	r3, r2, [r1]
 8005f7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1e5      	bne.n	8005f50 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2220      	movs	r2, #32
 8005f88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2220      	movs	r2, #32
 8005f90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2220      	movs	r2, #32
 8005f98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e010      	b.n	8005fca <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	69da      	ldr	r2, [r3, #28]
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	bf0c      	ite	eq
 8005fb8:	2301      	moveq	r3, #1
 8005fba:	2300      	movne	r3, #0
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	79fb      	ldrb	r3, [r7, #7]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	f43f af46 	beq.w	8005e54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3770      	adds	r7, #112	; 0x70
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b085      	sub	sp, #20
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d101      	bne.n	8005fe8 <HAL_UARTEx_DisableFifoMode+0x16>
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	e027      	b.n	8006038 <HAL_UARTEx_DisableFifoMode+0x66>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2224      	movs	r2, #36	; 0x24
 8005ff4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f022 0201 	bic.w	r2, r2, #1
 800600e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006016:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2220      	movs	r2, #32
 800602a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3714      	adds	r7, #20
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006054:	2b01      	cmp	r3, #1
 8006056:	d101      	bne.n	800605c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006058:	2302      	movs	r3, #2
 800605a:	e02d      	b.n	80060b8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2224      	movs	r2, #36	; 0x24
 8006068:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f022 0201 	bic.w	r2, r2, #1
 8006082:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	430a      	orrs	r2, r1
 8006096:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 f84f 	bl	800613c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2220      	movs	r2, #32
 80060aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d101      	bne.n	80060d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80060d4:	2302      	movs	r3, #2
 80060d6:	e02d      	b.n	8006134 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2224      	movs	r2, #36	; 0x24
 80060e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f022 0201 	bic.w	r2, r2, #1
 80060fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	683a      	ldr	r2, [r7, #0]
 8006110:	430a      	orrs	r2, r1
 8006112:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 f811 	bl	800613c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2220      	movs	r2, #32
 8006126:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3710      	adds	r7, #16
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006148:	2b00      	cmp	r3, #0
 800614a:	d108      	bne.n	800615e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800615c:	e031      	b.n	80061c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800615e:	2308      	movs	r3, #8
 8006160:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006162:	2308      	movs	r3, #8
 8006164:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	0e5b      	lsrs	r3, r3, #25
 800616e:	b2db      	uxtb	r3, r3
 8006170:	f003 0307 	and.w	r3, r3, #7
 8006174:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	0f5b      	lsrs	r3, r3, #29
 800617e:	b2db      	uxtb	r3, r3
 8006180:	f003 0307 	and.w	r3, r3, #7
 8006184:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006186:	7bbb      	ldrb	r3, [r7, #14]
 8006188:	7b3a      	ldrb	r2, [r7, #12]
 800618a:	4911      	ldr	r1, [pc, #68]	; (80061d0 <UARTEx_SetNbDataToProcess+0x94>)
 800618c:	5c8a      	ldrb	r2, [r1, r2]
 800618e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006192:	7b3a      	ldrb	r2, [r7, #12]
 8006194:	490f      	ldr	r1, [pc, #60]	; (80061d4 <UARTEx_SetNbDataToProcess+0x98>)
 8006196:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006198:	fb93 f3f2 	sdiv	r3, r3, r2
 800619c:	b29a      	uxth	r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061a4:	7bfb      	ldrb	r3, [r7, #15]
 80061a6:	7b7a      	ldrb	r2, [r7, #13]
 80061a8:	4909      	ldr	r1, [pc, #36]	; (80061d0 <UARTEx_SetNbDataToProcess+0x94>)
 80061aa:	5c8a      	ldrb	r2, [r1, r2]
 80061ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80061b0:	7b7a      	ldrb	r2, [r7, #13]
 80061b2:	4908      	ldr	r1, [pc, #32]	; (80061d4 <UARTEx_SetNbDataToProcess+0x98>)
 80061b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80061c2:	bf00      	nop
 80061c4:	3714      	adds	r7, #20
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	08006bc4 	.word	0x08006bc4
 80061d4:	08006bcc 	.word	0x08006bcc

080061d8 <__errno>:
 80061d8:	4b01      	ldr	r3, [pc, #4]	; (80061e0 <__errno+0x8>)
 80061da:	6818      	ldr	r0, [r3, #0]
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	2000000c 	.word	0x2000000c

080061e4 <__libc_init_array>:
 80061e4:	b570      	push	{r4, r5, r6, lr}
 80061e6:	4d0d      	ldr	r5, [pc, #52]	; (800621c <__libc_init_array+0x38>)
 80061e8:	4c0d      	ldr	r4, [pc, #52]	; (8006220 <__libc_init_array+0x3c>)
 80061ea:	1b64      	subs	r4, r4, r5
 80061ec:	10a4      	asrs	r4, r4, #2
 80061ee:	2600      	movs	r6, #0
 80061f0:	42a6      	cmp	r6, r4
 80061f2:	d109      	bne.n	8006208 <__libc_init_array+0x24>
 80061f4:	4d0b      	ldr	r5, [pc, #44]	; (8006224 <__libc_init_array+0x40>)
 80061f6:	4c0c      	ldr	r4, [pc, #48]	; (8006228 <__libc_init_array+0x44>)
 80061f8:	f000 fc8e 	bl	8006b18 <_init>
 80061fc:	1b64      	subs	r4, r4, r5
 80061fe:	10a4      	asrs	r4, r4, #2
 8006200:	2600      	movs	r6, #0
 8006202:	42a6      	cmp	r6, r4
 8006204:	d105      	bne.n	8006212 <__libc_init_array+0x2e>
 8006206:	bd70      	pop	{r4, r5, r6, pc}
 8006208:	f855 3b04 	ldr.w	r3, [r5], #4
 800620c:	4798      	blx	r3
 800620e:	3601      	adds	r6, #1
 8006210:	e7ee      	b.n	80061f0 <__libc_init_array+0xc>
 8006212:	f855 3b04 	ldr.w	r3, [r5], #4
 8006216:	4798      	blx	r3
 8006218:	3601      	adds	r6, #1
 800621a:	e7f2      	b.n	8006202 <__libc_init_array+0x1e>
 800621c:	08006c10 	.word	0x08006c10
 8006220:	08006c10 	.word	0x08006c10
 8006224:	08006c10 	.word	0x08006c10
 8006228:	08006c14 	.word	0x08006c14

0800622c <memset>:
 800622c:	4402      	add	r2, r0
 800622e:	4603      	mov	r3, r0
 8006230:	4293      	cmp	r3, r2
 8006232:	d100      	bne.n	8006236 <memset+0xa>
 8006234:	4770      	bx	lr
 8006236:	f803 1b01 	strb.w	r1, [r3], #1
 800623a:	e7f9      	b.n	8006230 <memset+0x4>

0800623c <siprintf>:
 800623c:	b40e      	push	{r1, r2, r3}
 800623e:	b500      	push	{lr}
 8006240:	b09c      	sub	sp, #112	; 0x70
 8006242:	ab1d      	add	r3, sp, #116	; 0x74
 8006244:	9002      	str	r0, [sp, #8]
 8006246:	9006      	str	r0, [sp, #24]
 8006248:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800624c:	4809      	ldr	r0, [pc, #36]	; (8006274 <siprintf+0x38>)
 800624e:	9107      	str	r1, [sp, #28]
 8006250:	9104      	str	r1, [sp, #16]
 8006252:	4909      	ldr	r1, [pc, #36]	; (8006278 <siprintf+0x3c>)
 8006254:	f853 2b04 	ldr.w	r2, [r3], #4
 8006258:	9105      	str	r1, [sp, #20]
 800625a:	6800      	ldr	r0, [r0, #0]
 800625c:	9301      	str	r3, [sp, #4]
 800625e:	a902      	add	r1, sp, #8
 8006260:	f000 f868 	bl	8006334 <_svfiprintf_r>
 8006264:	9b02      	ldr	r3, [sp, #8]
 8006266:	2200      	movs	r2, #0
 8006268:	701a      	strb	r2, [r3, #0]
 800626a:	b01c      	add	sp, #112	; 0x70
 800626c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006270:	b003      	add	sp, #12
 8006272:	4770      	bx	lr
 8006274:	2000000c 	.word	0x2000000c
 8006278:	ffff0208 	.word	0xffff0208

0800627c <__ssputs_r>:
 800627c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006280:	688e      	ldr	r6, [r1, #8]
 8006282:	429e      	cmp	r6, r3
 8006284:	4682      	mov	sl, r0
 8006286:	460c      	mov	r4, r1
 8006288:	4690      	mov	r8, r2
 800628a:	461f      	mov	r7, r3
 800628c:	d838      	bhi.n	8006300 <__ssputs_r+0x84>
 800628e:	898a      	ldrh	r2, [r1, #12]
 8006290:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006294:	d032      	beq.n	80062fc <__ssputs_r+0x80>
 8006296:	6825      	ldr	r5, [r4, #0]
 8006298:	6909      	ldr	r1, [r1, #16]
 800629a:	eba5 0901 	sub.w	r9, r5, r1
 800629e:	6965      	ldr	r5, [r4, #20]
 80062a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80062a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80062a8:	3301      	adds	r3, #1
 80062aa:	444b      	add	r3, r9
 80062ac:	106d      	asrs	r5, r5, #1
 80062ae:	429d      	cmp	r5, r3
 80062b0:	bf38      	it	cc
 80062b2:	461d      	movcc	r5, r3
 80062b4:	0553      	lsls	r3, r2, #21
 80062b6:	d531      	bpl.n	800631c <__ssputs_r+0xa0>
 80062b8:	4629      	mov	r1, r5
 80062ba:	f000 fb63 	bl	8006984 <_malloc_r>
 80062be:	4606      	mov	r6, r0
 80062c0:	b950      	cbnz	r0, 80062d8 <__ssputs_r+0x5c>
 80062c2:	230c      	movs	r3, #12
 80062c4:	f8ca 3000 	str.w	r3, [sl]
 80062c8:	89a3      	ldrh	r3, [r4, #12]
 80062ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062ce:	81a3      	strh	r3, [r4, #12]
 80062d0:	f04f 30ff 	mov.w	r0, #4294967295
 80062d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062d8:	6921      	ldr	r1, [r4, #16]
 80062da:	464a      	mov	r2, r9
 80062dc:	f000 fabe 	bl	800685c <memcpy>
 80062e0:	89a3      	ldrh	r3, [r4, #12]
 80062e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80062e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ea:	81a3      	strh	r3, [r4, #12]
 80062ec:	6126      	str	r6, [r4, #16]
 80062ee:	6165      	str	r5, [r4, #20]
 80062f0:	444e      	add	r6, r9
 80062f2:	eba5 0509 	sub.w	r5, r5, r9
 80062f6:	6026      	str	r6, [r4, #0]
 80062f8:	60a5      	str	r5, [r4, #8]
 80062fa:	463e      	mov	r6, r7
 80062fc:	42be      	cmp	r6, r7
 80062fe:	d900      	bls.n	8006302 <__ssputs_r+0x86>
 8006300:	463e      	mov	r6, r7
 8006302:	6820      	ldr	r0, [r4, #0]
 8006304:	4632      	mov	r2, r6
 8006306:	4641      	mov	r1, r8
 8006308:	f000 fab6 	bl	8006878 <memmove>
 800630c:	68a3      	ldr	r3, [r4, #8]
 800630e:	1b9b      	subs	r3, r3, r6
 8006310:	60a3      	str	r3, [r4, #8]
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	4433      	add	r3, r6
 8006316:	6023      	str	r3, [r4, #0]
 8006318:	2000      	movs	r0, #0
 800631a:	e7db      	b.n	80062d4 <__ssputs_r+0x58>
 800631c:	462a      	mov	r2, r5
 800631e:	f000 fba5 	bl	8006a6c <_realloc_r>
 8006322:	4606      	mov	r6, r0
 8006324:	2800      	cmp	r0, #0
 8006326:	d1e1      	bne.n	80062ec <__ssputs_r+0x70>
 8006328:	6921      	ldr	r1, [r4, #16]
 800632a:	4650      	mov	r0, sl
 800632c:	f000 fabe 	bl	80068ac <_free_r>
 8006330:	e7c7      	b.n	80062c2 <__ssputs_r+0x46>
	...

08006334 <_svfiprintf_r>:
 8006334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006338:	4698      	mov	r8, r3
 800633a:	898b      	ldrh	r3, [r1, #12]
 800633c:	061b      	lsls	r3, r3, #24
 800633e:	b09d      	sub	sp, #116	; 0x74
 8006340:	4607      	mov	r7, r0
 8006342:	460d      	mov	r5, r1
 8006344:	4614      	mov	r4, r2
 8006346:	d50e      	bpl.n	8006366 <_svfiprintf_r+0x32>
 8006348:	690b      	ldr	r3, [r1, #16]
 800634a:	b963      	cbnz	r3, 8006366 <_svfiprintf_r+0x32>
 800634c:	2140      	movs	r1, #64	; 0x40
 800634e:	f000 fb19 	bl	8006984 <_malloc_r>
 8006352:	6028      	str	r0, [r5, #0]
 8006354:	6128      	str	r0, [r5, #16]
 8006356:	b920      	cbnz	r0, 8006362 <_svfiprintf_r+0x2e>
 8006358:	230c      	movs	r3, #12
 800635a:	603b      	str	r3, [r7, #0]
 800635c:	f04f 30ff 	mov.w	r0, #4294967295
 8006360:	e0d1      	b.n	8006506 <_svfiprintf_r+0x1d2>
 8006362:	2340      	movs	r3, #64	; 0x40
 8006364:	616b      	str	r3, [r5, #20]
 8006366:	2300      	movs	r3, #0
 8006368:	9309      	str	r3, [sp, #36]	; 0x24
 800636a:	2320      	movs	r3, #32
 800636c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006370:	f8cd 800c 	str.w	r8, [sp, #12]
 8006374:	2330      	movs	r3, #48	; 0x30
 8006376:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006520 <_svfiprintf_r+0x1ec>
 800637a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800637e:	f04f 0901 	mov.w	r9, #1
 8006382:	4623      	mov	r3, r4
 8006384:	469a      	mov	sl, r3
 8006386:	f813 2b01 	ldrb.w	r2, [r3], #1
 800638a:	b10a      	cbz	r2, 8006390 <_svfiprintf_r+0x5c>
 800638c:	2a25      	cmp	r2, #37	; 0x25
 800638e:	d1f9      	bne.n	8006384 <_svfiprintf_r+0x50>
 8006390:	ebba 0b04 	subs.w	fp, sl, r4
 8006394:	d00b      	beq.n	80063ae <_svfiprintf_r+0x7a>
 8006396:	465b      	mov	r3, fp
 8006398:	4622      	mov	r2, r4
 800639a:	4629      	mov	r1, r5
 800639c:	4638      	mov	r0, r7
 800639e:	f7ff ff6d 	bl	800627c <__ssputs_r>
 80063a2:	3001      	adds	r0, #1
 80063a4:	f000 80aa 	beq.w	80064fc <_svfiprintf_r+0x1c8>
 80063a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063aa:	445a      	add	r2, fp
 80063ac:	9209      	str	r2, [sp, #36]	; 0x24
 80063ae:	f89a 3000 	ldrb.w	r3, [sl]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	f000 80a2 	beq.w	80064fc <_svfiprintf_r+0x1c8>
 80063b8:	2300      	movs	r3, #0
 80063ba:	f04f 32ff 	mov.w	r2, #4294967295
 80063be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063c2:	f10a 0a01 	add.w	sl, sl, #1
 80063c6:	9304      	str	r3, [sp, #16]
 80063c8:	9307      	str	r3, [sp, #28]
 80063ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063ce:	931a      	str	r3, [sp, #104]	; 0x68
 80063d0:	4654      	mov	r4, sl
 80063d2:	2205      	movs	r2, #5
 80063d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063d8:	4851      	ldr	r0, [pc, #324]	; (8006520 <_svfiprintf_r+0x1ec>)
 80063da:	f7f9 ff21 	bl	8000220 <memchr>
 80063de:	9a04      	ldr	r2, [sp, #16]
 80063e0:	b9d8      	cbnz	r0, 800641a <_svfiprintf_r+0xe6>
 80063e2:	06d0      	lsls	r0, r2, #27
 80063e4:	bf44      	itt	mi
 80063e6:	2320      	movmi	r3, #32
 80063e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063ec:	0711      	lsls	r1, r2, #28
 80063ee:	bf44      	itt	mi
 80063f0:	232b      	movmi	r3, #43	; 0x2b
 80063f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063f6:	f89a 3000 	ldrb.w	r3, [sl]
 80063fa:	2b2a      	cmp	r3, #42	; 0x2a
 80063fc:	d015      	beq.n	800642a <_svfiprintf_r+0xf6>
 80063fe:	9a07      	ldr	r2, [sp, #28]
 8006400:	4654      	mov	r4, sl
 8006402:	2000      	movs	r0, #0
 8006404:	f04f 0c0a 	mov.w	ip, #10
 8006408:	4621      	mov	r1, r4
 800640a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800640e:	3b30      	subs	r3, #48	; 0x30
 8006410:	2b09      	cmp	r3, #9
 8006412:	d94e      	bls.n	80064b2 <_svfiprintf_r+0x17e>
 8006414:	b1b0      	cbz	r0, 8006444 <_svfiprintf_r+0x110>
 8006416:	9207      	str	r2, [sp, #28]
 8006418:	e014      	b.n	8006444 <_svfiprintf_r+0x110>
 800641a:	eba0 0308 	sub.w	r3, r0, r8
 800641e:	fa09 f303 	lsl.w	r3, r9, r3
 8006422:	4313      	orrs	r3, r2
 8006424:	9304      	str	r3, [sp, #16]
 8006426:	46a2      	mov	sl, r4
 8006428:	e7d2      	b.n	80063d0 <_svfiprintf_r+0x9c>
 800642a:	9b03      	ldr	r3, [sp, #12]
 800642c:	1d19      	adds	r1, r3, #4
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	9103      	str	r1, [sp, #12]
 8006432:	2b00      	cmp	r3, #0
 8006434:	bfbb      	ittet	lt
 8006436:	425b      	neglt	r3, r3
 8006438:	f042 0202 	orrlt.w	r2, r2, #2
 800643c:	9307      	strge	r3, [sp, #28]
 800643e:	9307      	strlt	r3, [sp, #28]
 8006440:	bfb8      	it	lt
 8006442:	9204      	strlt	r2, [sp, #16]
 8006444:	7823      	ldrb	r3, [r4, #0]
 8006446:	2b2e      	cmp	r3, #46	; 0x2e
 8006448:	d10c      	bne.n	8006464 <_svfiprintf_r+0x130>
 800644a:	7863      	ldrb	r3, [r4, #1]
 800644c:	2b2a      	cmp	r3, #42	; 0x2a
 800644e:	d135      	bne.n	80064bc <_svfiprintf_r+0x188>
 8006450:	9b03      	ldr	r3, [sp, #12]
 8006452:	1d1a      	adds	r2, r3, #4
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	9203      	str	r2, [sp, #12]
 8006458:	2b00      	cmp	r3, #0
 800645a:	bfb8      	it	lt
 800645c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006460:	3402      	adds	r4, #2
 8006462:	9305      	str	r3, [sp, #20]
 8006464:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006530 <_svfiprintf_r+0x1fc>
 8006468:	7821      	ldrb	r1, [r4, #0]
 800646a:	2203      	movs	r2, #3
 800646c:	4650      	mov	r0, sl
 800646e:	f7f9 fed7 	bl	8000220 <memchr>
 8006472:	b140      	cbz	r0, 8006486 <_svfiprintf_r+0x152>
 8006474:	2340      	movs	r3, #64	; 0x40
 8006476:	eba0 000a 	sub.w	r0, r0, sl
 800647a:	fa03 f000 	lsl.w	r0, r3, r0
 800647e:	9b04      	ldr	r3, [sp, #16]
 8006480:	4303      	orrs	r3, r0
 8006482:	3401      	adds	r4, #1
 8006484:	9304      	str	r3, [sp, #16]
 8006486:	f814 1b01 	ldrb.w	r1, [r4], #1
 800648a:	4826      	ldr	r0, [pc, #152]	; (8006524 <_svfiprintf_r+0x1f0>)
 800648c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006490:	2206      	movs	r2, #6
 8006492:	f7f9 fec5 	bl	8000220 <memchr>
 8006496:	2800      	cmp	r0, #0
 8006498:	d038      	beq.n	800650c <_svfiprintf_r+0x1d8>
 800649a:	4b23      	ldr	r3, [pc, #140]	; (8006528 <_svfiprintf_r+0x1f4>)
 800649c:	bb1b      	cbnz	r3, 80064e6 <_svfiprintf_r+0x1b2>
 800649e:	9b03      	ldr	r3, [sp, #12]
 80064a0:	3307      	adds	r3, #7
 80064a2:	f023 0307 	bic.w	r3, r3, #7
 80064a6:	3308      	adds	r3, #8
 80064a8:	9303      	str	r3, [sp, #12]
 80064aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ac:	4433      	add	r3, r6
 80064ae:	9309      	str	r3, [sp, #36]	; 0x24
 80064b0:	e767      	b.n	8006382 <_svfiprintf_r+0x4e>
 80064b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80064b6:	460c      	mov	r4, r1
 80064b8:	2001      	movs	r0, #1
 80064ba:	e7a5      	b.n	8006408 <_svfiprintf_r+0xd4>
 80064bc:	2300      	movs	r3, #0
 80064be:	3401      	adds	r4, #1
 80064c0:	9305      	str	r3, [sp, #20]
 80064c2:	4619      	mov	r1, r3
 80064c4:	f04f 0c0a 	mov.w	ip, #10
 80064c8:	4620      	mov	r0, r4
 80064ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064ce:	3a30      	subs	r2, #48	; 0x30
 80064d0:	2a09      	cmp	r2, #9
 80064d2:	d903      	bls.n	80064dc <_svfiprintf_r+0x1a8>
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d0c5      	beq.n	8006464 <_svfiprintf_r+0x130>
 80064d8:	9105      	str	r1, [sp, #20]
 80064da:	e7c3      	b.n	8006464 <_svfiprintf_r+0x130>
 80064dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80064e0:	4604      	mov	r4, r0
 80064e2:	2301      	movs	r3, #1
 80064e4:	e7f0      	b.n	80064c8 <_svfiprintf_r+0x194>
 80064e6:	ab03      	add	r3, sp, #12
 80064e8:	9300      	str	r3, [sp, #0]
 80064ea:	462a      	mov	r2, r5
 80064ec:	4b0f      	ldr	r3, [pc, #60]	; (800652c <_svfiprintf_r+0x1f8>)
 80064ee:	a904      	add	r1, sp, #16
 80064f0:	4638      	mov	r0, r7
 80064f2:	f3af 8000 	nop.w
 80064f6:	1c42      	adds	r2, r0, #1
 80064f8:	4606      	mov	r6, r0
 80064fa:	d1d6      	bne.n	80064aa <_svfiprintf_r+0x176>
 80064fc:	89ab      	ldrh	r3, [r5, #12]
 80064fe:	065b      	lsls	r3, r3, #25
 8006500:	f53f af2c 	bmi.w	800635c <_svfiprintf_r+0x28>
 8006504:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006506:	b01d      	add	sp, #116	; 0x74
 8006508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800650c:	ab03      	add	r3, sp, #12
 800650e:	9300      	str	r3, [sp, #0]
 8006510:	462a      	mov	r2, r5
 8006512:	4b06      	ldr	r3, [pc, #24]	; (800652c <_svfiprintf_r+0x1f8>)
 8006514:	a904      	add	r1, sp, #16
 8006516:	4638      	mov	r0, r7
 8006518:	f000 f87a 	bl	8006610 <_printf_i>
 800651c:	e7eb      	b.n	80064f6 <_svfiprintf_r+0x1c2>
 800651e:	bf00      	nop
 8006520:	08006bd4 	.word	0x08006bd4
 8006524:	08006bde 	.word	0x08006bde
 8006528:	00000000 	.word	0x00000000
 800652c:	0800627d 	.word	0x0800627d
 8006530:	08006bda 	.word	0x08006bda

08006534 <_printf_common>:
 8006534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006538:	4616      	mov	r6, r2
 800653a:	4699      	mov	r9, r3
 800653c:	688a      	ldr	r2, [r1, #8]
 800653e:	690b      	ldr	r3, [r1, #16]
 8006540:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006544:	4293      	cmp	r3, r2
 8006546:	bfb8      	it	lt
 8006548:	4613      	movlt	r3, r2
 800654a:	6033      	str	r3, [r6, #0]
 800654c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006550:	4607      	mov	r7, r0
 8006552:	460c      	mov	r4, r1
 8006554:	b10a      	cbz	r2, 800655a <_printf_common+0x26>
 8006556:	3301      	adds	r3, #1
 8006558:	6033      	str	r3, [r6, #0]
 800655a:	6823      	ldr	r3, [r4, #0]
 800655c:	0699      	lsls	r1, r3, #26
 800655e:	bf42      	ittt	mi
 8006560:	6833      	ldrmi	r3, [r6, #0]
 8006562:	3302      	addmi	r3, #2
 8006564:	6033      	strmi	r3, [r6, #0]
 8006566:	6825      	ldr	r5, [r4, #0]
 8006568:	f015 0506 	ands.w	r5, r5, #6
 800656c:	d106      	bne.n	800657c <_printf_common+0x48>
 800656e:	f104 0a19 	add.w	sl, r4, #25
 8006572:	68e3      	ldr	r3, [r4, #12]
 8006574:	6832      	ldr	r2, [r6, #0]
 8006576:	1a9b      	subs	r3, r3, r2
 8006578:	42ab      	cmp	r3, r5
 800657a:	dc26      	bgt.n	80065ca <_printf_common+0x96>
 800657c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006580:	1e13      	subs	r3, r2, #0
 8006582:	6822      	ldr	r2, [r4, #0]
 8006584:	bf18      	it	ne
 8006586:	2301      	movne	r3, #1
 8006588:	0692      	lsls	r2, r2, #26
 800658a:	d42b      	bmi.n	80065e4 <_printf_common+0xb0>
 800658c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006590:	4649      	mov	r1, r9
 8006592:	4638      	mov	r0, r7
 8006594:	47c0      	blx	r8
 8006596:	3001      	adds	r0, #1
 8006598:	d01e      	beq.n	80065d8 <_printf_common+0xa4>
 800659a:	6823      	ldr	r3, [r4, #0]
 800659c:	68e5      	ldr	r5, [r4, #12]
 800659e:	6832      	ldr	r2, [r6, #0]
 80065a0:	f003 0306 	and.w	r3, r3, #6
 80065a4:	2b04      	cmp	r3, #4
 80065a6:	bf08      	it	eq
 80065a8:	1aad      	subeq	r5, r5, r2
 80065aa:	68a3      	ldr	r3, [r4, #8]
 80065ac:	6922      	ldr	r2, [r4, #16]
 80065ae:	bf0c      	ite	eq
 80065b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065b4:	2500      	movne	r5, #0
 80065b6:	4293      	cmp	r3, r2
 80065b8:	bfc4      	itt	gt
 80065ba:	1a9b      	subgt	r3, r3, r2
 80065bc:	18ed      	addgt	r5, r5, r3
 80065be:	2600      	movs	r6, #0
 80065c0:	341a      	adds	r4, #26
 80065c2:	42b5      	cmp	r5, r6
 80065c4:	d11a      	bne.n	80065fc <_printf_common+0xc8>
 80065c6:	2000      	movs	r0, #0
 80065c8:	e008      	b.n	80065dc <_printf_common+0xa8>
 80065ca:	2301      	movs	r3, #1
 80065cc:	4652      	mov	r2, sl
 80065ce:	4649      	mov	r1, r9
 80065d0:	4638      	mov	r0, r7
 80065d2:	47c0      	blx	r8
 80065d4:	3001      	adds	r0, #1
 80065d6:	d103      	bne.n	80065e0 <_printf_common+0xac>
 80065d8:	f04f 30ff 	mov.w	r0, #4294967295
 80065dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065e0:	3501      	adds	r5, #1
 80065e2:	e7c6      	b.n	8006572 <_printf_common+0x3e>
 80065e4:	18e1      	adds	r1, r4, r3
 80065e6:	1c5a      	adds	r2, r3, #1
 80065e8:	2030      	movs	r0, #48	; 0x30
 80065ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065ee:	4422      	add	r2, r4
 80065f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065f8:	3302      	adds	r3, #2
 80065fa:	e7c7      	b.n	800658c <_printf_common+0x58>
 80065fc:	2301      	movs	r3, #1
 80065fe:	4622      	mov	r2, r4
 8006600:	4649      	mov	r1, r9
 8006602:	4638      	mov	r0, r7
 8006604:	47c0      	blx	r8
 8006606:	3001      	adds	r0, #1
 8006608:	d0e6      	beq.n	80065d8 <_printf_common+0xa4>
 800660a:	3601      	adds	r6, #1
 800660c:	e7d9      	b.n	80065c2 <_printf_common+0x8e>
	...

08006610 <_printf_i>:
 8006610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006614:	7e0f      	ldrb	r7, [r1, #24]
 8006616:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006618:	2f78      	cmp	r7, #120	; 0x78
 800661a:	4691      	mov	r9, r2
 800661c:	4680      	mov	r8, r0
 800661e:	460c      	mov	r4, r1
 8006620:	469a      	mov	sl, r3
 8006622:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006626:	d807      	bhi.n	8006638 <_printf_i+0x28>
 8006628:	2f62      	cmp	r7, #98	; 0x62
 800662a:	d80a      	bhi.n	8006642 <_printf_i+0x32>
 800662c:	2f00      	cmp	r7, #0
 800662e:	f000 80d8 	beq.w	80067e2 <_printf_i+0x1d2>
 8006632:	2f58      	cmp	r7, #88	; 0x58
 8006634:	f000 80a3 	beq.w	800677e <_printf_i+0x16e>
 8006638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800663c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006640:	e03a      	b.n	80066b8 <_printf_i+0xa8>
 8006642:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006646:	2b15      	cmp	r3, #21
 8006648:	d8f6      	bhi.n	8006638 <_printf_i+0x28>
 800664a:	a101      	add	r1, pc, #4	; (adr r1, 8006650 <_printf_i+0x40>)
 800664c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006650:	080066a9 	.word	0x080066a9
 8006654:	080066bd 	.word	0x080066bd
 8006658:	08006639 	.word	0x08006639
 800665c:	08006639 	.word	0x08006639
 8006660:	08006639 	.word	0x08006639
 8006664:	08006639 	.word	0x08006639
 8006668:	080066bd 	.word	0x080066bd
 800666c:	08006639 	.word	0x08006639
 8006670:	08006639 	.word	0x08006639
 8006674:	08006639 	.word	0x08006639
 8006678:	08006639 	.word	0x08006639
 800667c:	080067c9 	.word	0x080067c9
 8006680:	080066ed 	.word	0x080066ed
 8006684:	080067ab 	.word	0x080067ab
 8006688:	08006639 	.word	0x08006639
 800668c:	08006639 	.word	0x08006639
 8006690:	080067eb 	.word	0x080067eb
 8006694:	08006639 	.word	0x08006639
 8006698:	080066ed 	.word	0x080066ed
 800669c:	08006639 	.word	0x08006639
 80066a0:	08006639 	.word	0x08006639
 80066a4:	080067b3 	.word	0x080067b3
 80066a8:	682b      	ldr	r3, [r5, #0]
 80066aa:	1d1a      	adds	r2, r3, #4
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	602a      	str	r2, [r5, #0]
 80066b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066b8:	2301      	movs	r3, #1
 80066ba:	e0a3      	b.n	8006804 <_printf_i+0x1f4>
 80066bc:	6820      	ldr	r0, [r4, #0]
 80066be:	6829      	ldr	r1, [r5, #0]
 80066c0:	0606      	lsls	r6, r0, #24
 80066c2:	f101 0304 	add.w	r3, r1, #4
 80066c6:	d50a      	bpl.n	80066de <_printf_i+0xce>
 80066c8:	680e      	ldr	r6, [r1, #0]
 80066ca:	602b      	str	r3, [r5, #0]
 80066cc:	2e00      	cmp	r6, #0
 80066ce:	da03      	bge.n	80066d8 <_printf_i+0xc8>
 80066d0:	232d      	movs	r3, #45	; 0x2d
 80066d2:	4276      	negs	r6, r6
 80066d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066d8:	485e      	ldr	r0, [pc, #376]	; (8006854 <_printf_i+0x244>)
 80066da:	230a      	movs	r3, #10
 80066dc:	e019      	b.n	8006712 <_printf_i+0x102>
 80066de:	680e      	ldr	r6, [r1, #0]
 80066e0:	602b      	str	r3, [r5, #0]
 80066e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80066e6:	bf18      	it	ne
 80066e8:	b236      	sxthne	r6, r6
 80066ea:	e7ef      	b.n	80066cc <_printf_i+0xbc>
 80066ec:	682b      	ldr	r3, [r5, #0]
 80066ee:	6820      	ldr	r0, [r4, #0]
 80066f0:	1d19      	adds	r1, r3, #4
 80066f2:	6029      	str	r1, [r5, #0]
 80066f4:	0601      	lsls	r1, r0, #24
 80066f6:	d501      	bpl.n	80066fc <_printf_i+0xec>
 80066f8:	681e      	ldr	r6, [r3, #0]
 80066fa:	e002      	b.n	8006702 <_printf_i+0xf2>
 80066fc:	0646      	lsls	r6, r0, #25
 80066fe:	d5fb      	bpl.n	80066f8 <_printf_i+0xe8>
 8006700:	881e      	ldrh	r6, [r3, #0]
 8006702:	4854      	ldr	r0, [pc, #336]	; (8006854 <_printf_i+0x244>)
 8006704:	2f6f      	cmp	r7, #111	; 0x6f
 8006706:	bf0c      	ite	eq
 8006708:	2308      	moveq	r3, #8
 800670a:	230a      	movne	r3, #10
 800670c:	2100      	movs	r1, #0
 800670e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006712:	6865      	ldr	r5, [r4, #4]
 8006714:	60a5      	str	r5, [r4, #8]
 8006716:	2d00      	cmp	r5, #0
 8006718:	bfa2      	ittt	ge
 800671a:	6821      	ldrge	r1, [r4, #0]
 800671c:	f021 0104 	bicge.w	r1, r1, #4
 8006720:	6021      	strge	r1, [r4, #0]
 8006722:	b90e      	cbnz	r6, 8006728 <_printf_i+0x118>
 8006724:	2d00      	cmp	r5, #0
 8006726:	d04d      	beq.n	80067c4 <_printf_i+0x1b4>
 8006728:	4615      	mov	r5, r2
 800672a:	fbb6 f1f3 	udiv	r1, r6, r3
 800672e:	fb03 6711 	mls	r7, r3, r1, r6
 8006732:	5dc7      	ldrb	r7, [r0, r7]
 8006734:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006738:	4637      	mov	r7, r6
 800673a:	42bb      	cmp	r3, r7
 800673c:	460e      	mov	r6, r1
 800673e:	d9f4      	bls.n	800672a <_printf_i+0x11a>
 8006740:	2b08      	cmp	r3, #8
 8006742:	d10b      	bne.n	800675c <_printf_i+0x14c>
 8006744:	6823      	ldr	r3, [r4, #0]
 8006746:	07de      	lsls	r6, r3, #31
 8006748:	d508      	bpl.n	800675c <_printf_i+0x14c>
 800674a:	6923      	ldr	r3, [r4, #16]
 800674c:	6861      	ldr	r1, [r4, #4]
 800674e:	4299      	cmp	r1, r3
 8006750:	bfde      	ittt	le
 8006752:	2330      	movle	r3, #48	; 0x30
 8006754:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006758:	f105 35ff 	addle.w	r5, r5, #4294967295
 800675c:	1b52      	subs	r2, r2, r5
 800675e:	6122      	str	r2, [r4, #16]
 8006760:	f8cd a000 	str.w	sl, [sp]
 8006764:	464b      	mov	r3, r9
 8006766:	aa03      	add	r2, sp, #12
 8006768:	4621      	mov	r1, r4
 800676a:	4640      	mov	r0, r8
 800676c:	f7ff fee2 	bl	8006534 <_printf_common>
 8006770:	3001      	adds	r0, #1
 8006772:	d14c      	bne.n	800680e <_printf_i+0x1fe>
 8006774:	f04f 30ff 	mov.w	r0, #4294967295
 8006778:	b004      	add	sp, #16
 800677a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800677e:	4835      	ldr	r0, [pc, #212]	; (8006854 <_printf_i+0x244>)
 8006780:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006784:	6829      	ldr	r1, [r5, #0]
 8006786:	6823      	ldr	r3, [r4, #0]
 8006788:	f851 6b04 	ldr.w	r6, [r1], #4
 800678c:	6029      	str	r1, [r5, #0]
 800678e:	061d      	lsls	r5, r3, #24
 8006790:	d514      	bpl.n	80067bc <_printf_i+0x1ac>
 8006792:	07df      	lsls	r7, r3, #31
 8006794:	bf44      	itt	mi
 8006796:	f043 0320 	orrmi.w	r3, r3, #32
 800679a:	6023      	strmi	r3, [r4, #0]
 800679c:	b91e      	cbnz	r6, 80067a6 <_printf_i+0x196>
 800679e:	6823      	ldr	r3, [r4, #0]
 80067a0:	f023 0320 	bic.w	r3, r3, #32
 80067a4:	6023      	str	r3, [r4, #0]
 80067a6:	2310      	movs	r3, #16
 80067a8:	e7b0      	b.n	800670c <_printf_i+0xfc>
 80067aa:	6823      	ldr	r3, [r4, #0]
 80067ac:	f043 0320 	orr.w	r3, r3, #32
 80067b0:	6023      	str	r3, [r4, #0]
 80067b2:	2378      	movs	r3, #120	; 0x78
 80067b4:	4828      	ldr	r0, [pc, #160]	; (8006858 <_printf_i+0x248>)
 80067b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80067ba:	e7e3      	b.n	8006784 <_printf_i+0x174>
 80067bc:	0659      	lsls	r1, r3, #25
 80067be:	bf48      	it	mi
 80067c0:	b2b6      	uxthmi	r6, r6
 80067c2:	e7e6      	b.n	8006792 <_printf_i+0x182>
 80067c4:	4615      	mov	r5, r2
 80067c6:	e7bb      	b.n	8006740 <_printf_i+0x130>
 80067c8:	682b      	ldr	r3, [r5, #0]
 80067ca:	6826      	ldr	r6, [r4, #0]
 80067cc:	6961      	ldr	r1, [r4, #20]
 80067ce:	1d18      	adds	r0, r3, #4
 80067d0:	6028      	str	r0, [r5, #0]
 80067d2:	0635      	lsls	r5, r6, #24
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	d501      	bpl.n	80067dc <_printf_i+0x1cc>
 80067d8:	6019      	str	r1, [r3, #0]
 80067da:	e002      	b.n	80067e2 <_printf_i+0x1d2>
 80067dc:	0670      	lsls	r0, r6, #25
 80067de:	d5fb      	bpl.n	80067d8 <_printf_i+0x1c8>
 80067e0:	8019      	strh	r1, [r3, #0]
 80067e2:	2300      	movs	r3, #0
 80067e4:	6123      	str	r3, [r4, #16]
 80067e6:	4615      	mov	r5, r2
 80067e8:	e7ba      	b.n	8006760 <_printf_i+0x150>
 80067ea:	682b      	ldr	r3, [r5, #0]
 80067ec:	1d1a      	adds	r2, r3, #4
 80067ee:	602a      	str	r2, [r5, #0]
 80067f0:	681d      	ldr	r5, [r3, #0]
 80067f2:	6862      	ldr	r2, [r4, #4]
 80067f4:	2100      	movs	r1, #0
 80067f6:	4628      	mov	r0, r5
 80067f8:	f7f9 fd12 	bl	8000220 <memchr>
 80067fc:	b108      	cbz	r0, 8006802 <_printf_i+0x1f2>
 80067fe:	1b40      	subs	r0, r0, r5
 8006800:	6060      	str	r0, [r4, #4]
 8006802:	6863      	ldr	r3, [r4, #4]
 8006804:	6123      	str	r3, [r4, #16]
 8006806:	2300      	movs	r3, #0
 8006808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800680c:	e7a8      	b.n	8006760 <_printf_i+0x150>
 800680e:	6923      	ldr	r3, [r4, #16]
 8006810:	462a      	mov	r2, r5
 8006812:	4649      	mov	r1, r9
 8006814:	4640      	mov	r0, r8
 8006816:	47d0      	blx	sl
 8006818:	3001      	adds	r0, #1
 800681a:	d0ab      	beq.n	8006774 <_printf_i+0x164>
 800681c:	6823      	ldr	r3, [r4, #0]
 800681e:	079b      	lsls	r3, r3, #30
 8006820:	d413      	bmi.n	800684a <_printf_i+0x23a>
 8006822:	68e0      	ldr	r0, [r4, #12]
 8006824:	9b03      	ldr	r3, [sp, #12]
 8006826:	4298      	cmp	r0, r3
 8006828:	bfb8      	it	lt
 800682a:	4618      	movlt	r0, r3
 800682c:	e7a4      	b.n	8006778 <_printf_i+0x168>
 800682e:	2301      	movs	r3, #1
 8006830:	4632      	mov	r2, r6
 8006832:	4649      	mov	r1, r9
 8006834:	4640      	mov	r0, r8
 8006836:	47d0      	blx	sl
 8006838:	3001      	adds	r0, #1
 800683a:	d09b      	beq.n	8006774 <_printf_i+0x164>
 800683c:	3501      	adds	r5, #1
 800683e:	68e3      	ldr	r3, [r4, #12]
 8006840:	9903      	ldr	r1, [sp, #12]
 8006842:	1a5b      	subs	r3, r3, r1
 8006844:	42ab      	cmp	r3, r5
 8006846:	dcf2      	bgt.n	800682e <_printf_i+0x21e>
 8006848:	e7eb      	b.n	8006822 <_printf_i+0x212>
 800684a:	2500      	movs	r5, #0
 800684c:	f104 0619 	add.w	r6, r4, #25
 8006850:	e7f5      	b.n	800683e <_printf_i+0x22e>
 8006852:	bf00      	nop
 8006854:	08006be5 	.word	0x08006be5
 8006858:	08006bf6 	.word	0x08006bf6

0800685c <memcpy>:
 800685c:	440a      	add	r2, r1
 800685e:	4291      	cmp	r1, r2
 8006860:	f100 33ff 	add.w	r3, r0, #4294967295
 8006864:	d100      	bne.n	8006868 <memcpy+0xc>
 8006866:	4770      	bx	lr
 8006868:	b510      	push	{r4, lr}
 800686a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800686e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006872:	4291      	cmp	r1, r2
 8006874:	d1f9      	bne.n	800686a <memcpy+0xe>
 8006876:	bd10      	pop	{r4, pc}

08006878 <memmove>:
 8006878:	4288      	cmp	r0, r1
 800687a:	b510      	push	{r4, lr}
 800687c:	eb01 0402 	add.w	r4, r1, r2
 8006880:	d902      	bls.n	8006888 <memmove+0x10>
 8006882:	4284      	cmp	r4, r0
 8006884:	4623      	mov	r3, r4
 8006886:	d807      	bhi.n	8006898 <memmove+0x20>
 8006888:	1e43      	subs	r3, r0, #1
 800688a:	42a1      	cmp	r1, r4
 800688c:	d008      	beq.n	80068a0 <memmove+0x28>
 800688e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006892:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006896:	e7f8      	b.n	800688a <memmove+0x12>
 8006898:	4402      	add	r2, r0
 800689a:	4601      	mov	r1, r0
 800689c:	428a      	cmp	r2, r1
 800689e:	d100      	bne.n	80068a2 <memmove+0x2a>
 80068a0:	bd10      	pop	{r4, pc}
 80068a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80068a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80068aa:	e7f7      	b.n	800689c <memmove+0x24>

080068ac <_free_r>:
 80068ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068ae:	2900      	cmp	r1, #0
 80068b0:	d044      	beq.n	800693c <_free_r+0x90>
 80068b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068b6:	9001      	str	r0, [sp, #4]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f1a1 0404 	sub.w	r4, r1, #4
 80068be:	bfb8      	it	lt
 80068c0:	18e4      	addlt	r4, r4, r3
 80068c2:	f000 f913 	bl	8006aec <__malloc_lock>
 80068c6:	4a1e      	ldr	r2, [pc, #120]	; (8006940 <_free_r+0x94>)
 80068c8:	9801      	ldr	r0, [sp, #4]
 80068ca:	6813      	ldr	r3, [r2, #0]
 80068cc:	b933      	cbnz	r3, 80068dc <_free_r+0x30>
 80068ce:	6063      	str	r3, [r4, #4]
 80068d0:	6014      	str	r4, [r2, #0]
 80068d2:	b003      	add	sp, #12
 80068d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068d8:	f000 b90e 	b.w	8006af8 <__malloc_unlock>
 80068dc:	42a3      	cmp	r3, r4
 80068de:	d908      	bls.n	80068f2 <_free_r+0x46>
 80068e0:	6825      	ldr	r5, [r4, #0]
 80068e2:	1961      	adds	r1, r4, r5
 80068e4:	428b      	cmp	r3, r1
 80068e6:	bf01      	itttt	eq
 80068e8:	6819      	ldreq	r1, [r3, #0]
 80068ea:	685b      	ldreq	r3, [r3, #4]
 80068ec:	1949      	addeq	r1, r1, r5
 80068ee:	6021      	streq	r1, [r4, #0]
 80068f0:	e7ed      	b.n	80068ce <_free_r+0x22>
 80068f2:	461a      	mov	r2, r3
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	b10b      	cbz	r3, 80068fc <_free_r+0x50>
 80068f8:	42a3      	cmp	r3, r4
 80068fa:	d9fa      	bls.n	80068f2 <_free_r+0x46>
 80068fc:	6811      	ldr	r1, [r2, #0]
 80068fe:	1855      	adds	r5, r2, r1
 8006900:	42a5      	cmp	r5, r4
 8006902:	d10b      	bne.n	800691c <_free_r+0x70>
 8006904:	6824      	ldr	r4, [r4, #0]
 8006906:	4421      	add	r1, r4
 8006908:	1854      	adds	r4, r2, r1
 800690a:	42a3      	cmp	r3, r4
 800690c:	6011      	str	r1, [r2, #0]
 800690e:	d1e0      	bne.n	80068d2 <_free_r+0x26>
 8006910:	681c      	ldr	r4, [r3, #0]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	6053      	str	r3, [r2, #4]
 8006916:	4421      	add	r1, r4
 8006918:	6011      	str	r1, [r2, #0]
 800691a:	e7da      	b.n	80068d2 <_free_r+0x26>
 800691c:	d902      	bls.n	8006924 <_free_r+0x78>
 800691e:	230c      	movs	r3, #12
 8006920:	6003      	str	r3, [r0, #0]
 8006922:	e7d6      	b.n	80068d2 <_free_r+0x26>
 8006924:	6825      	ldr	r5, [r4, #0]
 8006926:	1961      	adds	r1, r4, r5
 8006928:	428b      	cmp	r3, r1
 800692a:	bf04      	itt	eq
 800692c:	6819      	ldreq	r1, [r3, #0]
 800692e:	685b      	ldreq	r3, [r3, #4]
 8006930:	6063      	str	r3, [r4, #4]
 8006932:	bf04      	itt	eq
 8006934:	1949      	addeq	r1, r1, r5
 8006936:	6021      	streq	r1, [r4, #0]
 8006938:	6054      	str	r4, [r2, #4]
 800693a:	e7ca      	b.n	80068d2 <_free_r+0x26>
 800693c:	b003      	add	sp, #12
 800693e:	bd30      	pop	{r4, r5, pc}
 8006940:	200003b8 	.word	0x200003b8

08006944 <sbrk_aligned>:
 8006944:	b570      	push	{r4, r5, r6, lr}
 8006946:	4e0e      	ldr	r6, [pc, #56]	; (8006980 <sbrk_aligned+0x3c>)
 8006948:	460c      	mov	r4, r1
 800694a:	6831      	ldr	r1, [r6, #0]
 800694c:	4605      	mov	r5, r0
 800694e:	b911      	cbnz	r1, 8006956 <sbrk_aligned+0x12>
 8006950:	f000 f8bc 	bl	8006acc <_sbrk_r>
 8006954:	6030      	str	r0, [r6, #0]
 8006956:	4621      	mov	r1, r4
 8006958:	4628      	mov	r0, r5
 800695a:	f000 f8b7 	bl	8006acc <_sbrk_r>
 800695e:	1c43      	adds	r3, r0, #1
 8006960:	d00a      	beq.n	8006978 <sbrk_aligned+0x34>
 8006962:	1cc4      	adds	r4, r0, #3
 8006964:	f024 0403 	bic.w	r4, r4, #3
 8006968:	42a0      	cmp	r0, r4
 800696a:	d007      	beq.n	800697c <sbrk_aligned+0x38>
 800696c:	1a21      	subs	r1, r4, r0
 800696e:	4628      	mov	r0, r5
 8006970:	f000 f8ac 	bl	8006acc <_sbrk_r>
 8006974:	3001      	adds	r0, #1
 8006976:	d101      	bne.n	800697c <sbrk_aligned+0x38>
 8006978:	f04f 34ff 	mov.w	r4, #4294967295
 800697c:	4620      	mov	r0, r4
 800697e:	bd70      	pop	{r4, r5, r6, pc}
 8006980:	200003bc 	.word	0x200003bc

08006984 <_malloc_r>:
 8006984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006988:	1ccd      	adds	r5, r1, #3
 800698a:	f025 0503 	bic.w	r5, r5, #3
 800698e:	3508      	adds	r5, #8
 8006990:	2d0c      	cmp	r5, #12
 8006992:	bf38      	it	cc
 8006994:	250c      	movcc	r5, #12
 8006996:	2d00      	cmp	r5, #0
 8006998:	4607      	mov	r7, r0
 800699a:	db01      	blt.n	80069a0 <_malloc_r+0x1c>
 800699c:	42a9      	cmp	r1, r5
 800699e:	d905      	bls.n	80069ac <_malloc_r+0x28>
 80069a0:	230c      	movs	r3, #12
 80069a2:	603b      	str	r3, [r7, #0]
 80069a4:	2600      	movs	r6, #0
 80069a6:	4630      	mov	r0, r6
 80069a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069ac:	4e2e      	ldr	r6, [pc, #184]	; (8006a68 <_malloc_r+0xe4>)
 80069ae:	f000 f89d 	bl	8006aec <__malloc_lock>
 80069b2:	6833      	ldr	r3, [r6, #0]
 80069b4:	461c      	mov	r4, r3
 80069b6:	bb34      	cbnz	r4, 8006a06 <_malloc_r+0x82>
 80069b8:	4629      	mov	r1, r5
 80069ba:	4638      	mov	r0, r7
 80069bc:	f7ff ffc2 	bl	8006944 <sbrk_aligned>
 80069c0:	1c43      	adds	r3, r0, #1
 80069c2:	4604      	mov	r4, r0
 80069c4:	d14d      	bne.n	8006a62 <_malloc_r+0xde>
 80069c6:	6834      	ldr	r4, [r6, #0]
 80069c8:	4626      	mov	r6, r4
 80069ca:	2e00      	cmp	r6, #0
 80069cc:	d140      	bne.n	8006a50 <_malloc_r+0xcc>
 80069ce:	6823      	ldr	r3, [r4, #0]
 80069d0:	4631      	mov	r1, r6
 80069d2:	4638      	mov	r0, r7
 80069d4:	eb04 0803 	add.w	r8, r4, r3
 80069d8:	f000 f878 	bl	8006acc <_sbrk_r>
 80069dc:	4580      	cmp	r8, r0
 80069de:	d13a      	bne.n	8006a56 <_malloc_r+0xd2>
 80069e0:	6821      	ldr	r1, [r4, #0]
 80069e2:	3503      	adds	r5, #3
 80069e4:	1a6d      	subs	r5, r5, r1
 80069e6:	f025 0503 	bic.w	r5, r5, #3
 80069ea:	3508      	adds	r5, #8
 80069ec:	2d0c      	cmp	r5, #12
 80069ee:	bf38      	it	cc
 80069f0:	250c      	movcc	r5, #12
 80069f2:	4629      	mov	r1, r5
 80069f4:	4638      	mov	r0, r7
 80069f6:	f7ff ffa5 	bl	8006944 <sbrk_aligned>
 80069fa:	3001      	adds	r0, #1
 80069fc:	d02b      	beq.n	8006a56 <_malloc_r+0xd2>
 80069fe:	6823      	ldr	r3, [r4, #0]
 8006a00:	442b      	add	r3, r5
 8006a02:	6023      	str	r3, [r4, #0]
 8006a04:	e00e      	b.n	8006a24 <_malloc_r+0xa0>
 8006a06:	6822      	ldr	r2, [r4, #0]
 8006a08:	1b52      	subs	r2, r2, r5
 8006a0a:	d41e      	bmi.n	8006a4a <_malloc_r+0xc6>
 8006a0c:	2a0b      	cmp	r2, #11
 8006a0e:	d916      	bls.n	8006a3e <_malloc_r+0xba>
 8006a10:	1961      	adds	r1, r4, r5
 8006a12:	42a3      	cmp	r3, r4
 8006a14:	6025      	str	r5, [r4, #0]
 8006a16:	bf18      	it	ne
 8006a18:	6059      	strne	r1, [r3, #4]
 8006a1a:	6863      	ldr	r3, [r4, #4]
 8006a1c:	bf08      	it	eq
 8006a1e:	6031      	streq	r1, [r6, #0]
 8006a20:	5162      	str	r2, [r4, r5]
 8006a22:	604b      	str	r3, [r1, #4]
 8006a24:	4638      	mov	r0, r7
 8006a26:	f104 060b 	add.w	r6, r4, #11
 8006a2a:	f000 f865 	bl	8006af8 <__malloc_unlock>
 8006a2e:	f026 0607 	bic.w	r6, r6, #7
 8006a32:	1d23      	adds	r3, r4, #4
 8006a34:	1af2      	subs	r2, r6, r3
 8006a36:	d0b6      	beq.n	80069a6 <_malloc_r+0x22>
 8006a38:	1b9b      	subs	r3, r3, r6
 8006a3a:	50a3      	str	r3, [r4, r2]
 8006a3c:	e7b3      	b.n	80069a6 <_malloc_r+0x22>
 8006a3e:	6862      	ldr	r2, [r4, #4]
 8006a40:	42a3      	cmp	r3, r4
 8006a42:	bf0c      	ite	eq
 8006a44:	6032      	streq	r2, [r6, #0]
 8006a46:	605a      	strne	r2, [r3, #4]
 8006a48:	e7ec      	b.n	8006a24 <_malloc_r+0xa0>
 8006a4a:	4623      	mov	r3, r4
 8006a4c:	6864      	ldr	r4, [r4, #4]
 8006a4e:	e7b2      	b.n	80069b6 <_malloc_r+0x32>
 8006a50:	4634      	mov	r4, r6
 8006a52:	6876      	ldr	r6, [r6, #4]
 8006a54:	e7b9      	b.n	80069ca <_malloc_r+0x46>
 8006a56:	230c      	movs	r3, #12
 8006a58:	603b      	str	r3, [r7, #0]
 8006a5a:	4638      	mov	r0, r7
 8006a5c:	f000 f84c 	bl	8006af8 <__malloc_unlock>
 8006a60:	e7a1      	b.n	80069a6 <_malloc_r+0x22>
 8006a62:	6025      	str	r5, [r4, #0]
 8006a64:	e7de      	b.n	8006a24 <_malloc_r+0xa0>
 8006a66:	bf00      	nop
 8006a68:	200003b8 	.word	0x200003b8

08006a6c <_realloc_r>:
 8006a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a70:	4680      	mov	r8, r0
 8006a72:	4614      	mov	r4, r2
 8006a74:	460e      	mov	r6, r1
 8006a76:	b921      	cbnz	r1, 8006a82 <_realloc_r+0x16>
 8006a78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a7c:	4611      	mov	r1, r2
 8006a7e:	f7ff bf81 	b.w	8006984 <_malloc_r>
 8006a82:	b92a      	cbnz	r2, 8006a90 <_realloc_r+0x24>
 8006a84:	f7ff ff12 	bl	80068ac <_free_r>
 8006a88:	4625      	mov	r5, r4
 8006a8a:	4628      	mov	r0, r5
 8006a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a90:	f000 f838 	bl	8006b04 <_malloc_usable_size_r>
 8006a94:	4284      	cmp	r4, r0
 8006a96:	4607      	mov	r7, r0
 8006a98:	d802      	bhi.n	8006aa0 <_realloc_r+0x34>
 8006a9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006a9e:	d812      	bhi.n	8006ac6 <_realloc_r+0x5a>
 8006aa0:	4621      	mov	r1, r4
 8006aa2:	4640      	mov	r0, r8
 8006aa4:	f7ff ff6e 	bl	8006984 <_malloc_r>
 8006aa8:	4605      	mov	r5, r0
 8006aaa:	2800      	cmp	r0, #0
 8006aac:	d0ed      	beq.n	8006a8a <_realloc_r+0x1e>
 8006aae:	42bc      	cmp	r4, r7
 8006ab0:	4622      	mov	r2, r4
 8006ab2:	4631      	mov	r1, r6
 8006ab4:	bf28      	it	cs
 8006ab6:	463a      	movcs	r2, r7
 8006ab8:	f7ff fed0 	bl	800685c <memcpy>
 8006abc:	4631      	mov	r1, r6
 8006abe:	4640      	mov	r0, r8
 8006ac0:	f7ff fef4 	bl	80068ac <_free_r>
 8006ac4:	e7e1      	b.n	8006a8a <_realloc_r+0x1e>
 8006ac6:	4635      	mov	r5, r6
 8006ac8:	e7df      	b.n	8006a8a <_realloc_r+0x1e>
	...

08006acc <_sbrk_r>:
 8006acc:	b538      	push	{r3, r4, r5, lr}
 8006ace:	4d06      	ldr	r5, [pc, #24]	; (8006ae8 <_sbrk_r+0x1c>)
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	4604      	mov	r4, r0
 8006ad4:	4608      	mov	r0, r1
 8006ad6:	602b      	str	r3, [r5, #0]
 8006ad8:	f7fa fb86 	bl	80011e8 <_sbrk>
 8006adc:	1c43      	adds	r3, r0, #1
 8006ade:	d102      	bne.n	8006ae6 <_sbrk_r+0x1a>
 8006ae0:	682b      	ldr	r3, [r5, #0]
 8006ae2:	b103      	cbz	r3, 8006ae6 <_sbrk_r+0x1a>
 8006ae4:	6023      	str	r3, [r4, #0]
 8006ae6:	bd38      	pop	{r3, r4, r5, pc}
 8006ae8:	200003c0 	.word	0x200003c0

08006aec <__malloc_lock>:
 8006aec:	4801      	ldr	r0, [pc, #4]	; (8006af4 <__malloc_lock+0x8>)
 8006aee:	f000 b811 	b.w	8006b14 <__retarget_lock_acquire_recursive>
 8006af2:	bf00      	nop
 8006af4:	200003c4 	.word	0x200003c4

08006af8 <__malloc_unlock>:
 8006af8:	4801      	ldr	r0, [pc, #4]	; (8006b00 <__malloc_unlock+0x8>)
 8006afa:	f000 b80c 	b.w	8006b16 <__retarget_lock_release_recursive>
 8006afe:	bf00      	nop
 8006b00:	200003c4 	.word	0x200003c4

08006b04 <_malloc_usable_size_r>:
 8006b04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b08:	1f18      	subs	r0, r3, #4
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	bfbc      	itt	lt
 8006b0e:	580b      	ldrlt	r3, [r1, r0]
 8006b10:	18c0      	addlt	r0, r0, r3
 8006b12:	4770      	bx	lr

08006b14 <__retarget_lock_acquire_recursive>:
 8006b14:	4770      	bx	lr

08006b16 <__retarget_lock_release_recursive>:
 8006b16:	4770      	bx	lr

08006b18 <_init>:
 8006b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b1a:	bf00      	nop
 8006b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b1e:	bc08      	pop	{r3}
 8006b20:	469e      	mov	lr, r3
 8006b22:	4770      	bx	lr

08006b24 <_fini>:
 8006b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b26:	bf00      	nop
 8006b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b2a:	bc08      	pop	{r3}
 8006b2c:	469e      	mov	lr, r3
 8006b2e:	4770      	bx	lr
